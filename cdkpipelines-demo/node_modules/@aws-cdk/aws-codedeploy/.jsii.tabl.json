{
  "version": "2",
  "toolVersion": "1.54.0",
  "snippets": {
    "3017358193f7d6d1a3674dea72b03ccb63a86d2a075321f714e06364f0d0e947": {
      "translations": {
        "python": {
          "source": "application = codedeploy.ServerApplication(self, \"CodeDeployApplication\",\n    application_name=\"MyApplication\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ServerApplication application = new ServerApplication(this, \"CodeDeployApplication\", new ServerApplicationProps {\n    ApplicationName = \"MyApplication\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ServerApplication application = ServerApplication.Builder.create(this, \"CodeDeployApplication\")\n        .applicationName(\"MyApplication\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const application = new codedeploy.ServerApplication(this, 'CodeDeployApplication', {\n  applicationName: 'MyApplication', // optional property\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codedeploy"
        },
        "field": {
          "field": "markdown",
          "line": 24
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.ServerApplication",
        "@aws-cdk/aws-codedeploy.ServerApplicationProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst application = new codedeploy.ServerApplication(this, 'CodeDeployApplication', {\n  applicationName: 'MyApplication', // optional property\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "3078f11f6bb14677e31fe7ecae2c4a6a1c3cdbe279a912f8fc13a6981d224f00"
    },
    "6b5c6ab0676dfd9d6db1449a9993535d4d08d41de064faf994ff8b69ca7127b6": {
      "translations": {
        "python": {
          "source": "application = codedeploy.ServerApplication.from_server_application_name(self, \"ExistingCodeDeployApplication\", \"MyExistingApplication\")",
          "version": "2"
        },
        "csharp": {
          "source": "IServerApplication application = ServerApplication.FromServerApplicationName(this, \"ExistingCodeDeployApplication\", \"MyExistingApplication\");",
          "version": "1"
        },
        "java": {
          "source": "IServerApplication application = ServerApplication.fromServerApplicationName(this, \"ExistingCodeDeployApplication\", \"MyExistingApplication\");",
          "version": "1"
        },
        "$": {
          "source": "const application = codedeploy.ServerApplication.fromServerApplicationName(\n  this,\n  'ExistingCodeDeployApplication',\n  'MyExistingApplication',\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codedeploy"
        },
        "field": {
          "field": "markdown",
          "line": 32
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.IServerApplication",
        "@aws-cdk/aws-codedeploy.ServerApplication",
        "@aws-cdk/aws-codedeploy.ServerApplication#fromServerApplicationName",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst application = codedeploy.ServerApplication.fromServerApplicationName(\n  this,\n  'ExistingCodeDeployApplication',\n  'MyExistingApplication',\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "611c6840b4304aa5485ceb8823cadbc59c8b4ece0b56887d0a908352c6ab621d"
    },
    "0bf2c035306fd463bf8b320608ed8d69a8fd4811c4a7c1f15c9a06cd283a7b6b": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_autoscaling as autoscaling\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n# application: codedeploy.ServerApplication\n# asg: autoscaling.AutoScalingGroup\n# alarm: cloudwatch.Alarm\n\ndeployment_group = codedeploy.ServerDeploymentGroup(self, \"CodeDeployDeploymentGroup\",\n    application=application,\n    deployment_group_name=\"MyDeploymentGroup\",\n    auto_scaling_groups=[asg],\n    # adds User Data that installs the CodeDeploy agent on your auto-scaling groups hosts\n    # default: true\n    install_agent=True,\n    # adds EC2 instances matching tags\n    ec2_instance_tags=codedeploy.InstanceTagSet({\n        # any instance with tags satisfying\n        # key1=v1 or key1=v2 or key2 (any value) or value v3 (any key)\n        # will match this group\n        \"key1\": [\"v1\", \"v2\"],\n        \"key2\": [],\n        \"\": [\"v3\"]\n    }),\n    # adds on-premise instances matching tags\n    on_premise_instance_tags=codedeploy.InstanceTagSet({\n        \"key1\": [\"v1\", \"v2\"]\n    }, {\n        \"key2\": [\"v3\"]\n    }),\n    # CloudWatch alarms\n    alarms=[alarm],\n    # whether to ignore failure to fetch the status of alarms from CloudWatch\n    # default: false\n    ignore_poll_alarms_failure=False,\n    # auto-rollback configuration\n    auto_rollback=codedeploy.AutoRollbackConfig(\n        failed_deployment=True,  # default: true\n        stopped_deployment=True,  # default: false\n        deployment_in_alarm=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AutoScaling;\nusing Amazon.CDK.AWS.CloudWatch;\n\nServerApplication application;\nAutoScalingGroup asg;\nAlarm alarm;\n\nServerDeploymentGroup deploymentGroup = new ServerDeploymentGroup(this, \"CodeDeployDeploymentGroup\", new ServerDeploymentGroupProps {\n    Application = application,\n    DeploymentGroupName = \"MyDeploymentGroup\",\n    AutoScalingGroups = new [] { asg },\n    // adds User Data that installs the CodeDeploy agent on your auto-scaling groups hosts\n    // default: true\n    InstallAgent = true,\n    // adds EC2 instances matching tags\n    Ec2InstanceTags = new InstanceTagSet(new Dictionary<string, string[]> {\n        // any instance with tags satisfying\n        // key1=v1 or key1=v2 or key2 (any value) or value v3 (any key)\n        // will match this group\n        { \"key1\", new [] { \"v1\", \"v2\" } },\n        { \"key2\", new [] {  } },\n        { \"\", new [] { \"v3\" } }\n    }),\n    // adds on-premise instances matching tags\n    OnPremiseInstanceTags = new InstanceTagSet(new Dictionary<string, string[]> {\n        { \"key1\", new [] { \"v1\", \"v2\" } }\n    }, new Dictionary<string, string[]> {\n        { \"key2\", new [] { \"v3\" } }\n    }),\n    // CloudWatch alarms\n    Alarms = new [] { alarm },\n    // whether to ignore failure to fetch the status of alarms from CloudWatch\n    // default: false\n    IgnorePollAlarmsFailure = false,\n    // auto-rollback configuration\n    AutoRollback = new AutoRollbackConfig {\n        FailedDeployment = true,  // default: true\n        StoppedDeployment = true,  // default: false\n        DeploymentInAlarm = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.autoscaling.*;\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nServerApplication application;\nAutoScalingGroup asg;\nAlarm alarm;\n\nServerDeploymentGroup deploymentGroup = ServerDeploymentGroup.Builder.create(this, \"CodeDeployDeploymentGroup\")\n        .application(application)\n        .deploymentGroupName(\"MyDeploymentGroup\")\n        .autoScalingGroups(List.of(asg))\n        // adds User Data that installs the CodeDeploy agent on your auto-scaling groups hosts\n        // default: true\n        .installAgent(true)\n        // adds EC2 instances matching tags\n        .ec2InstanceTags(new InstanceTagSet(Map.of(\n                // any instance with tags satisfying\n                // key1=v1 or key1=v2 or key2 (any value) or value v3 (any key)\n                // will match this group\n                \"key1\", List.of(\"v1\", \"v2\"),\n                \"key2\", List.of(),\n                \"\", List.of(\"v3\"))))\n        // adds on-premise instances matching tags\n        .onPremiseInstanceTags(new InstanceTagSet(Map.of(\n                \"key1\", List.of(\"v1\", \"v2\")), Map.of(\n                \"key2\", List.of(\"v3\"))))\n        // CloudWatch alarms\n        .alarms(List.of(alarm))\n        // whether to ignore failure to fetch the status of alarms from CloudWatch\n        // default: false\n        .ignorePollAlarmsFailure(false)\n        // auto-rollback configuration\n        .autoRollback(AutoRollbackConfig.builder()\n                .failedDeployment(true) // default: true\n                .stoppedDeployment(true) // default: false\n                .deploymentInAlarm(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const application: codedeploy.ServerApplication;\ndeclare const asg: autoscaling.AutoScalingGroup;\ndeclare const alarm: cloudwatch.Alarm;\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'CodeDeployDeploymentGroup', {\n  application,\n  deploymentGroupName: 'MyDeploymentGroup',\n  autoScalingGroups: [asg],\n  // adds User Data that installs the CodeDeploy agent on your auto-scaling groups hosts\n  // default: true\n  installAgent: true,\n  // adds EC2 instances matching tags\n  ec2InstanceTags: new codedeploy.InstanceTagSet(\n    {\n      // any instance with tags satisfying\n      // key1=v1 or key1=v2 or key2 (any value) or value v3 (any key)\n      // will match this group\n      'key1': ['v1', 'v2'],\n      'key2': [],\n      '': ['v3'],\n    },\n  ),\n  // adds on-premise instances matching tags\n  onPremiseInstanceTags: new codedeploy.InstanceTagSet(\n    // only instances with tags (key1=v1 or key1=v2) AND key2=v3 will match this set\n    {\n      'key1': ['v1', 'v2'],\n    },\n    {\n      'key2': ['v3'],\n    },\n  ),\n  // CloudWatch alarms\n  alarms: [alarm],\n  // whether to ignore failure to fetch the status of alarms from CloudWatch\n  // default: false\n  ignorePollAlarmsFailure: false,\n  // auto-rollback configuration\n  autoRollback: {\n    failedDeployment: true, // default: true\n    stoppedDeployment: true, // default: false\n    deploymentInAlarm: true, // default: true if you provided any alarms, false otherwise\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codedeploy"
        },
        "field": {
          "field": "markdown",
          "line": 44
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.AutoRollbackConfig",
        "@aws-cdk/aws-codedeploy.IServerApplication",
        "@aws-cdk/aws-codedeploy.InstanceTagSet",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroup",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroupProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const application: codedeploy.ServerApplication;\ndeclare const asg: autoscaling.AutoScalingGroup;\ndeclare const alarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'CodeDeployDeploymentGroup', {\n  application,\n  deploymentGroupName: 'MyDeploymentGroup',\n  autoScalingGroups: [asg],\n  // adds User Data that installs the CodeDeploy agent on your auto-scaling groups hosts\n  // default: true\n  installAgent: true,\n  // adds EC2 instances matching tags\n  ec2InstanceTags: new codedeploy.InstanceTagSet(\n    {\n      // any instance with tags satisfying\n      // key1=v1 or key1=v2 or key2 (any value) or value v3 (any key)\n      // will match this group\n      'key1': ['v1', 'v2'],\n      'key2': [],\n      '': ['v3'],\n    },\n  ),\n  // adds on-premise instances matching tags\n  onPremiseInstanceTags: new codedeploy.InstanceTagSet(\n    // only instances with tags (key1=v1 or key1=v2) AND key2=v3 will match this set\n    {\n      'key1': ['v1', 'v2'],\n    },\n    {\n      'key2': ['v3'],\n    },\n  ),\n  // CloudWatch alarms\n  alarms: [alarm],\n  // whether to ignore failure to fetch the status of alarms from CloudWatch\n  // default: false\n  ignorePollAlarmsFailure: false,\n  // auto-rollback configuration\n  autoRollback: {\n    failedDeployment: true, // default: true\n    stoppedDeployment: true, // default: false\n    deploymentInAlarm: true, // default: true if you provided any alarms, false otherwise\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 15,
        "75": 32,
        "91": 1,
        "104": 1,
        "106": 4,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 7,
        "193": 5,
        "194": 3,
        "197": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 16,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "4b2956fd388c99821721ebf1ad71f79c53722a27070ad184192c7d24d8eef541"
    },
    "b5d60ba03608ede07abf2aa99782729fd24f5d8866bebc89060d2131140329d9": {
      "translations": {
        "python": {
          "source": "# application: codedeploy.ServerApplication\n\ndeployment_group = codedeploy.ServerDeploymentGroup.from_server_deployment_group_attributes(self, \"ExistingCodeDeployDeploymentGroup\",\n    application=application,\n    deployment_group_name=\"MyExistingDeploymentGroup\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ServerApplication application;\n\nIServerDeploymentGroup deploymentGroup = ServerDeploymentGroup.FromServerDeploymentGroupAttributes(this, \"ExistingCodeDeployDeploymentGroup\", new ServerDeploymentGroupAttributes {\n    Application = application,\n    DeploymentGroupName = \"MyExistingDeploymentGroup\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ServerApplication application;\n\nIServerDeploymentGroup deploymentGroup = ServerDeploymentGroup.fromServerDeploymentGroupAttributes(this, \"ExistingCodeDeployDeploymentGroup\", ServerDeploymentGroupAttributes.builder()\n        .application(application)\n        .deploymentGroupName(\"MyExistingDeploymentGroup\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const application: codedeploy.ServerApplication;\nconst deploymentGroup = codedeploy.ServerDeploymentGroup.fromServerDeploymentGroupAttributes(\n  this,\n  'ExistingCodeDeployDeploymentGroup', {\n    application,\n    deploymentGroupName: 'MyExistingDeploymentGroup',\n  },\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codedeploy"
        },
        "field": {
          "field": "markdown",
          "line": 98
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.IServerApplication",
        "@aws-cdk/aws-codedeploy.IServerDeploymentGroup",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroup",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroup#fromServerDeploymentGroupAttributes",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroupAttributes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const application: codedeploy.ServerApplication;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst deploymentGroup = codedeploy.ServerDeploymentGroup.fromServerDeploymentGroupAttributes(\n  this,\n  'ExistingCodeDeployDeploymentGroup', {\n    application,\n    deploymentGroupName: 'MyExistingDeploymentGroup',\n  },\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9c0e38bcdb0ba14a4fbaf7ae3caa5496d3c0db1b143b2050856d017343230cec"
    },
    "e80198b2b6d7c83795982062c705a20931af6a249b92cdef4a2bebcad3247181": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancing as elb\n\n# lb: elb.LoadBalancer\n\nlb.add_listener(\n    external_port=80\n)\n\ndeployment_group = codedeploy.ServerDeploymentGroup(self, \"DeploymentGroup\",\n    load_balancer=codedeploy.LoadBalancer.classic(lb)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancing;\n\nLoadBalancer lb;\n\nlb.AddListener(new LoadBalancerListener {\n    ExternalPort = 80\n});\n\nServerDeploymentGroup deploymentGroup = new ServerDeploymentGroup(this, \"DeploymentGroup\", new ServerDeploymentGroupProps {\n    LoadBalancer = LoadBalancer.Classic(lb)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancing.*;\n\nLoadBalancer lb;\n\nlb.addListener(LoadBalancerListener.builder()\n        .externalPort(80)\n        .build());\n\nServerDeploymentGroup deploymentGroup = ServerDeploymentGroup.Builder.create(this, \"DeploymentGroup\")\n        .loadBalancer(LoadBalancer.classic(lb))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const lb: elb.LoadBalancer;\nlb.addListener({\n  externalPort: 80,\n});\n\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'DeploymentGroup', {\n  loadBalancer: codedeploy.LoadBalancer.classic(lb),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codedeploy"
        },
        "field": {
          "field": "markdown",
          "line": 118
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.LoadBalancer",
        "@aws-cdk/aws-codedeploy.LoadBalancer#classic",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroup",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroupProps",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const lb: elb.LoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nlb.addListener({\n  externalPort: 80,\n});\n\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'DeploymentGroup', {\n  loadBalancer: codedeploy.LoadBalancer.classic(lb),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "5d4258b1f12d045b7caf513f7849e3b60451e940235259983b2ba2b2c2622643"
    },
    "aea580e97cc16ae89d24295d86bb6dd38362370b3b60cb1da7150d9e932f5410": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n# alb: elbv2.ApplicationLoadBalancer\n\nlistener = alb.add_listener(\"Listener\", port=80)\ntarget_group = listener.add_targets(\"Fleet\", port=80)\n\ndeployment_group = codedeploy.ServerDeploymentGroup(self, \"DeploymentGroup\",\n    load_balancer=codedeploy.LoadBalancer.application(target_group)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\nApplicationLoadBalancer alb;\n\nApplicationListener listener = alb.AddListener(\"Listener\", new BaseApplicationListenerProps { Port = 80 });\nApplicationTargetGroup targetGroup = listener.AddTargets(\"Fleet\", new AddApplicationTargetsProps { Port = 80 });\n\nServerDeploymentGroup deploymentGroup = new ServerDeploymentGroup(this, \"DeploymentGroup\", new ServerDeploymentGroupProps {\n    LoadBalancer = LoadBalancer.Application(targetGroup)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\nApplicationLoadBalancer alb;\n\nApplicationListener listener = alb.addListener(\"Listener\", BaseApplicationListenerProps.builder().port(80).build());\nApplicationTargetGroup targetGroup = listener.addTargets(\"Fleet\", AddApplicationTargetsProps.builder().port(80).build());\n\nServerDeploymentGroup deploymentGroup = ServerDeploymentGroup.Builder.create(this, \"DeploymentGroup\")\n        .loadBalancer(LoadBalancer.application(targetGroup))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\ndeclare const alb: elbv2.ApplicationLoadBalancer;\nconst listener = alb.addListener('Listener', { port: 80 });\nconst targetGroup = listener.addTargets('Fleet', { port: 80 });\n\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'DeploymentGroup', {\n  loadBalancer: codedeploy.LoadBalancer.application(targetGroup),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codedeploy"
        },
        "field": {
          "field": "markdown",
          "line": 134
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.LoadBalancer",
        "@aws-cdk/aws-codedeploy.LoadBalancer#application",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroup",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroupProps",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationTargetGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\ndeclare const alb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst listener = alb.addListener('Listener', { port: 80 });\nconst targetGroup = listener.addTargets('Fleet', { port: 80 });\n\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'DeploymentGroup', {\n  loadBalancer: codedeploy.LoadBalancer.application(targetGroup),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 20,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 3,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f16f530248ea7edc1d8745f213aaf2b6ea42968f4fe1bb1a6a104c6394072c69"
    },
    "2b60c024f3a7dc6c1196ce19da901f3e67f3a9f0a163fb9dbde4ff2a28504f1b": {
      "translations": {
        "python": {
          "source": "deployment_group = codedeploy.ServerDeploymentGroup(self, \"CodeDeployDeploymentGroup\",\n    deployment_config=codedeploy.ServerDeploymentConfig.ALL_AT_ONCE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ServerDeploymentGroup deploymentGroup = new ServerDeploymentGroup(this, \"CodeDeployDeploymentGroup\", new ServerDeploymentGroupProps {\n    DeploymentConfig = ServerDeploymentConfig.ALL_AT_ONCE\n});",
          "version": "1"
        },
        "java": {
          "source": "ServerDeploymentGroup deploymentGroup = ServerDeploymentGroup.Builder.create(this, \"CodeDeployDeploymentGroup\")\n        .deploymentConfig(ServerDeploymentConfig.ALL_AT_ONCE)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'CodeDeployDeploymentGroup', {\n  deploymentConfig: codedeploy.ServerDeploymentConfig.ALL_AT_ONCE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codedeploy"
        },
        "field": {
          "field": "markdown",
          "line": 150
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.IServerDeploymentConfig",
        "@aws-cdk/aws-codedeploy.ServerDeploymentConfig",
        "@aws-cdk/aws-codedeploy.ServerDeploymentConfig#ALL_AT_ONCE",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroup",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroupProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'CodeDeployDeploymentGroup', {\n  deploymentConfig: codedeploy.ServerDeploymentConfig.ALL_AT_ONCE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "930e322a06a28f8a6bc69acf191144a58f33e4e029cca424bdac5a287d70ef3b"
    },
    "a43f5d6da333857f1bca49a562543f5582a79dc03d45258c110910755cf5f9c7": {
      "translations": {
        "python": {
          "source": "deployment_config = codedeploy.ServerDeploymentConfig(self, \"DeploymentConfiguration\",\n    deployment_config_name=\"MyDeploymentConfiguration\",  # optional property\n    # one of these is required, but both cannot be specified at the same time\n    minimum_healthy_hosts=codedeploy.MinimumHealthyHosts.count(2)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ServerDeploymentConfig deploymentConfig = new ServerDeploymentConfig(this, \"DeploymentConfiguration\", new ServerDeploymentConfigProps {\n    DeploymentConfigName = \"MyDeploymentConfiguration\",  // optional property\n    // one of these is required, but both cannot be specified at the same time\n    MinimumHealthyHosts = MinimumHealthyHosts.Count(2)\n});",
          "version": "1"
        },
        "java": {
          "source": "ServerDeploymentConfig deploymentConfig = ServerDeploymentConfig.Builder.create(this, \"DeploymentConfiguration\")\n        .deploymentConfigName(\"MyDeploymentConfiguration\") // optional property\n        // one of these is required, but both cannot be specified at the same time\n        .minimumHealthyHosts(MinimumHealthyHosts.count(2))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const deploymentConfig = new codedeploy.ServerDeploymentConfig(this, 'DeploymentConfiguration', {\n  deploymentConfigName: 'MyDeploymentConfiguration', // optional property\n  // one of these is required, but both cannot be specified at the same time\n  minimumHealthyHosts: codedeploy.MinimumHealthyHosts.count(2),\n  // minimumHealthyHosts: codedeploy.MinimumHealthyHosts.percentage(75),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codedeploy"
        },
        "field": {
          "field": "markdown",
          "line": 160
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.MinimumHealthyHosts",
        "@aws-cdk/aws-codedeploy.MinimumHealthyHosts#count",
        "@aws-cdk/aws-codedeploy.ServerDeploymentConfig",
        "@aws-cdk/aws-codedeploy.ServerDeploymentConfigProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst deploymentConfig = new codedeploy.ServerDeploymentConfig(this, 'DeploymentConfiguration', {\n  deploymentConfigName: 'MyDeploymentConfiguration', // optional property\n  // one of these is required, but both cannot be specified at the same time\n  minimumHealthyHosts: codedeploy.MinimumHealthyHosts.count(2),\n  // minimumHealthyHosts: codedeploy.MinimumHealthyHosts.percentage(75),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "033e628874506ae3477f142f7ce63ab725aae572a1217d542e8c5b00182d6912"
    },
    "69ff6ae3db778a9cbd588b0e93e24f851a1b194ab9aaa9b58cc3d245dd59231e": {
      "translations": {
        "python": {
          "source": "deployment_config = codedeploy.ServerDeploymentConfig.from_server_deployment_config_name(self, \"ExistingDeploymentConfiguration\", \"MyExistingDeploymentConfiguration\")",
          "version": "2"
        },
        "csharp": {
          "source": "IServerDeploymentConfig deploymentConfig = ServerDeploymentConfig.FromServerDeploymentConfigName(this, \"ExistingDeploymentConfiguration\", \"MyExistingDeploymentConfiguration\");",
          "version": "1"
        },
        "java": {
          "source": "IServerDeploymentConfig deploymentConfig = ServerDeploymentConfig.fromServerDeploymentConfigName(this, \"ExistingDeploymentConfiguration\", \"MyExistingDeploymentConfiguration\");",
          "version": "1"
        },
        "$": {
          "source": "const deploymentConfig = codedeploy.ServerDeploymentConfig.fromServerDeploymentConfigName(\n  this,\n  'ExistingDeploymentConfiguration',\n  'MyExistingDeploymentConfiguration',\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codedeploy"
        },
        "field": {
          "field": "markdown",
          "line": 171
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.IServerDeploymentConfig",
        "@aws-cdk/aws-codedeploy.ServerDeploymentConfig",
        "@aws-cdk/aws-codedeploy.ServerDeploymentConfig#fromServerDeploymentConfigName",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst deploymentConfig = codedeploy.ServerDeploymentConfig.fromServerDeploymentConfigName(\n  this,\n  'ExistingDeploymentConfiguration',\n  'MyExistingDeploymentConfiguration',\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "aab332613dfa2e0e485e167e149509e0ec283599aba8a338f3a9861fde5e48bd"
    },
    "e53eb8bfedffa1ba84fa721c475923d52f7f8f26fa6e51750744e886c4845dc4": {
      "translations": {
        "python": {
          "source": "application = codedeploy.LambdaApplication(self, \"CodeDeployApplication\",\n    application_name=\"MyApplication\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaApplication application = new LambdaApplication(this, \"CodeDeployApplication\", new LambdaApplicationProps {\n    ApplicationName = \"MyApplication\"\n});",
          "version": "1"
        },
        "java": {
          "source": "LambdaApplication application = LambdaApplication.Builder.create(this, \"CodeDeployApplication\")\n        .applicationName(\"MyApplication\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const application = new codedeploy.LambdaApplication(this, 'CodeDeployApplication', {\n  applicationName: 'MyApplication', // optional property\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codedeploy"
        },
        "field": {
          "field": "markdown",
          "line": 183
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.LambdaApplication",
        "@aws-cdk/aws-codedeploy.LambdaApplicationProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst application = new codedeploy.LambdaApplication(this, 'CodeDeployApplication', {\n  applicationName: 'MyApplication', // optional property\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "534fb3dc87210efda2f5bfd15b601e60e1f2dede2703f114fd2828fe1439180d"
    },
    "ffc8cabec5672c96f7fd0490cae6d036f897973011cb406fca9499b6a5a9f770": {
      "translations": {
        "python": {
          "source": "application = codedeploy.LambdaApplication.from_lambda_application_name(self, \"ExistingCodeDeployApplication\", \"MyExistingApplication\")",
          "version": "2"
        },
        "csharp": {
          "source": "ILambdaApplication application = LambdaApplication.FromLambdaApplicationName(this, \"ExistingCodeDeployApplication\", \"MyExistingApplication\");",
          "version": "1"
        },
        "java": {
          "source": "ILambdaApplication application = LambdaApplication.fromLambdaApplicationName(this, \"ExistingCodeDeployApplication\", \"MyExistingApplication\");",
          "version": "1"
        },
        "$": {
          "source": "const application = codedeploy.LambdaApplication.fromLambdaApplicationName(\n  this,\n  'ExistingCodeDeployApplication',\n  'MyExistingApplication',\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codedeploy"
        },
        "field": {
          "field": "markdown",
          "line": 191
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.ILambdaApplication",
        "@aws-cdk/aws-codedeploy.LambdaApplication",
        "@aws-cdk/aws-codedeploy.LambdaApplication#fromLambdaApplicationName",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst application = codedeploy.LambdaApplication.fromLambdaApplicationName(\n  this,\n  'ExistingCodeDeployApplication',\n  'MyExistingApplication',\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "4e9d84f4d53fe7708b9df2c8702c13174e0a87852ededa93a13b6f3bdcf5ef0f"
    },
    "623f9cf53e7e0fb6f6a1a8ed3e952d59cd1ae3053b8d16974882c41d29143bd0": {
      "translations": {
        "python": {
          "source": "# my_application: codedeploy.LambdaApplication\n# func: lambda.Function\n\nversion = func.add_version(\"1\")\nversion1_alias = lambda_.Alias(self, \"alias\",\n    alias_name=\"prod\",\n    version=version\n)\n\ndeployment_group = codedeploy.LambdaDeploymentGroup(self, \"BlueGreenDeployment\",\n    application=my_application,  # optional property: one will be created for you if not provided\n    alias=version1_alias,\n    deployment_config=codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaApplication myApplication;\nFunction func;\n\nVersion version = func.AddVersion(\"1\");\nAlias version1Alias = new Alias(this, \"alias\", new AliasProps {\n    AliasName = \"prod\",\n    Version = version\n});\n\nLambdaDeploymentGroup deploymentGroup = new LambdaDeploymentGroup(this, \"BlueGreenDeployment\", new LambdaDeploymentGroupProps {\n    Application = myApplication,  // optional property: one will be created for you if not provided\n    Alias = version1Alias,\n    DeploymentConfig = LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE\n});",
          "version": "1"
        },
        "java": {
          "source": "LambdaApplication myApplication;\nFunction func;\n\nVersion version = func.addVersion(\"1\");\nAlias version1Alias = Alias.Builder.create(this, \"alias\")\n        .aliasName(\"prod\")\n        .version(version)\n        .build();\n\nLambdaDeploymentGroup deploymentGroup = LambdaDeploymentGroup.Builder.create(this, \"BlueGreenDeployment\")\n        .application(myApplication) // optional property: one will be created for you if not provided\n        .alias(version1Alias)\n        .deploymentConfig(LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myApplication: codedeploy.LambdaApplication;\ndeclare const func: lambda.Function;\nconst version = func.addVersion('1');\nconst version1Alias = new lambda.Alias(this, 'alias', {\n  aliasName: 'prod',\n  version,\n});\n\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  application: myApplication, // optional property: one will be created for you if not provided\n  alias: version1Alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codedeploy"
        },
        "field": {
          "field": "markdown",
          "line": 207
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.ILambdaApplication",
        "@aws-cdk/aws-codedeploy.ILambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig#LINEAR_10PERCENT_EVERY_1MINUTE",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupProps",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.Function#addVersion",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.Version",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myApplication: codedeploy.LambdaApplication;\ndeclare const func: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst version = func.addVersion('1');\nconst version1Alias = new lambda.Alias(this, 'alias', {\n  aliasName: 'prod',\n  version,\n});\n\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  application: myApplication, // optional property: one will be created for you if not provided\n  alias: version1Alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "810eab010540eb25c15461e327e1e3cb6b59d24d336d7964471e306c87b78a56"
    },
    "7fc223667abab0def6f8d336b126eb5436eb4e4728ed99f62fdd553fcc2159ac": {
      "translations": {
        "python": {
          "source": "# application: codedeploy.LambdaApplication\n# alias: lambda.Alias\nconfig = codedeploy.CustomLambdaDeploymentConfig(self, \"CustomConfig\",\n    type=codedeploy.CustomLambdaDeploymentConfigType.CANARY,\n    interval=Duration.minutes(1),\n    percentage=5\n)\ndeployment_group = codedeploy.LambdaDeploymentGroup(self, \"BlueGreenDeployment\",\n    application=application,\n    alias=alias,\n    deployment_config=config\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaApplication application;\nAlias alias;\nCustomLambdaDeploymentConfig config = new CustomLambdaDeploymentConfig(this, \"CustomConfig\", new CustomLambdaDeploymentConfigProps {\n    Type = CustomLambdaDeploymentConfigType.CANARY,\n    Interval = Duration.Minutes(1),\n    Percentage = 5\n});\nLambdaDeploymentGroup deploymentGroup = new LambdaDeploymentGroup(this, \"BlueGreenDeployment\", new LambdaDeploymentGroupProps {\n    Application = application,\n    Alias = alias,\n    DeploymentConfig = config\n});",
          "version": "1"
        },
        "java": {
          "source": "LambdaApplication application;\nAlias alias;\nCustomLambdaDeploymentConfig config = CustomLambdaDeploymentConfig.Builder.create(this, \"CustomConfig\")\n        .type(CustomLambdaDeploymentConfigType.CANARY)\n        .interval(Duration.minutes(1))\n        .percentage(5)\n        .build();\nLambdaDeploymentGroup deploymentGroup = LambdaDeploymentGroup.Builder.create(this, \"BlueGreenDeployment\")\n        .application(application)\n        .alias(alias)\n        .deploymentConfig(config)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const config = new codedeploy.CustomLambdaDeploymentConfig(this, 'CustomConfig', {\n  type: codedeploy.CustomLambdaDeploymentConfigType.CANARY,\n  interval: Duration.minutes(1),\n  percentage: 5,\n});\n\ndeclare const application: codedeploy.LambdaApplication;\ndeclare const alias: lambda.Alias;\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  application,\n  alias,\n  deploymentConfig: config,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codedeploy"
        },
        "field": {
          "field": "markdown",
          "line": 237
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigProps",
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigType",
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigType#CANARY",
        "@aws-cdk/aws-codedeploy.ILambdaApplication",
        "@aws-cdk/aws-codedeploy.ILambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupProps",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const application: codedeploy.LambdaApplication;\ndeclare const alias: lambda.Alias;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst config = new codedeploy.CustomLambdaDeploymentConfig(this, 'CustomConfig', {\n  type: codedeploy.CustomLambdaDeploymentConfigType.CANARY,\n  interval: Duration.minutes(1),\n  percentage: 5,\n});\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  application,\n  alias,\n  deploymentConfig: config,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 24,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 4,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "54e8427a752d12b3ee8f90d563747cd7ecb79aadc50b0c52b2936f46b9be93c7"
    },
    "f12a1c72787e3a718f9b709ae3f781667de939150d2b31fc97b024872a37cb28": {
      "translations": {
        "python": {
          "source": "config = codedeploy.CustomLambdaDeploymentConfig(self, \"CustomConfig\",\n    type=codedeploy.CustomLambdaDeploymentConfigType.CANARY,\n    interval=Duration.minutes(1),\n    percentage=5,\n    deployment_config_name=\"MyDeploymentConfig\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CustomLambdaDeploymentConfig config = new CustomLambdaDeploymentConfig(this, \"CustomConfig\", new CustomLambdaDeploymentConfigProps {\n    Type = CustomLambdaDeploymentConfigType.CANARY,\n    Interval = Duration.Minutes(1),\n    Percentage = 5,\n    DeploymentConfigName = \"MyDeploymentConfig\"\n});",
          "version": "1"
        },
        "java": {
          "source": "CustomLambdaDeploymentConfig config = CustomLambdaDeploymentConfig.Builder.create(this, \"CustomConfig\")\n        .type(CustomLambdaDeploymentConfigType.CANARY)\n        .interval(Duration.minutes(1))\n        .percentage(5)\n        .deploymentConfigName(\"MyDeploymentConfig\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const config = new codedeploy.CustomLambdaDeploymentConfig(this, 'CustomConfig', {\n  type: codedeploy.CustomLambdaDeploymentConfigType.CANARY,\n  interval: Duration.minutes(1),\n  percentage: 5,\n  deploymentConfigName: 'MyDeploymentConfig',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codedeploy"
        },
        "field": {
          "field": "markdown",
          "line": 255
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigProps",
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigType",
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigType#CANARY",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst config = new codedeploy.CustomLambdaDeploymentConfig(this, 'CustomConfig', {\n  type: codedeploy.CustomLambdaDeploymentConfigType.CANARY,\n  interval: Duration.minutes(1),\n  percentage: 5,\n  deploymentConfigName: 'MyDeploymentConfig',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 12,
        "104": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "9e9972fff660af3e0b95308d47ab65f5f36f111d3cd0eaf37bbfc4a3d080cd5a"
    },
    "2165f7b8188abddf102ce2829c97148a7a25c456c97c29f8684ce374225763d6": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cloudwatch as cloudwatch\n\n# alias: lambda.Alias\n\n# or add alarms to an existing group\n# blue_green_alias: lambda.Alias\n\nalarm = cloudwatch.Alarm(self, \"Errors\",\n    comparison_operator=cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n    threshold=1,\n    evaluation_periods=1,\n    metric=alias.metric_errors()\n)\ndeployment_group = codedeploy.LambdaDeploymentGroup(self, \"BlueGreenDeployment\",\n    alias=alias,\n    deployment_config=codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n    alarms=[alarm\n    ]\n)\ndeployment_group.add_alarm(cloudwatch.Alarm(self, \"BlueGreenErrors\",\n    comparison_operator=cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n    threshold=1,\n    evaluation_periods=1,\n    metric=blue_green_alias.metric_errors()\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CloudWatch;\n\nAlias alias;\n\n// or add alarms to an existing group\nAlias blueGreenAlias;\n\nAlarm alarm = new Alarm(this, \"Errors\", new AlarmProps {\n    ComparisonOperator = ComparisonOperator.GREATER_THAN_THRESHOLD,\n    Threshold = 1,\n    EvaluationPeriods = 1,\n    Metric = alias.MetricErrors()\n});\nLambdaDeploymentGroup deploymentGroup = new LambdaDeploymentGroup(this, \"BlueGreenDeployment\", new LambdaDeploymentGroupProps {\n    Alias = alias,\n    DeploymentConfig = LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n    Alarms = new [] { alarm }\n});\ndeploymentGroup.AddAlarm(new Alarm(this, \"BlueGreenErrors\", new AlarmProps {\n    ComparisonOperator = ComparisonOperator.GREATER_THAN_THRESHOLD,\n    Threshold = 1,\n    EvaluationPeriods = 1,\n    Metric = blueGreenAlias.MetricErrors()\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cloudwatch.*;\n\nAlias alias;\n\n// or add alarms to an existing group\nAlias blueGreenAlias;\n\nAlarm alarm = Alarm.Builder.create(this, \"Errors\")\n        .comparisonOperator(ComparisonOperator.GREATER_THAN_THRESHOLD)\n        .threshold(1)\n        .evaluationPeriods(1)\n        .metric(alias.metricErrors())\n        .build();\nLambdaDeploymentGroup deploymentGroup = LambdaDeploymentGroup.Builder.create(this, \"BlueGreenDeployment\")\n        .alias(alias)\n        .deploymentConfig(LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE)\n        .alarms(List.of(alarm))\n        .build();\ndeploymentGroup.addAlarm(Alarm.Builder.create(this, \"BlueGreenErrors\")\n        .comparisonOperator(ComparisonOperator.GREATER_THAN_THRESHOLD)\n        .threshold(1)\n        .evaluationPeriods(1)\n        .metric(blueGreenAlias.metricErrors())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const alias: lambda.Alias;\nconst alarm = new cloudwatch.Alarm(this, 'Errors', {\n  comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n  threshold: 1,\n  evaluationPeriods: 1,\n  metric: alias.metricErrors(),\n});\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n  alarms: [\n    // pass some alarms when constructing the deployment group\n    alarm,\n  ],\n});\n\n// or add alarms to an existing group\ndeclare const blueGreenAlias: lambda.Alias;\ndeploymentGroup.addAlarm(new cloudwatch.Alarm(this, 'BlueGreenErrors', {\n  comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n  threshold: 1,\n  evaluationPeriods: 1,\n  metric: blueGreenAlias.metricErrors(),\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codedeploy"
        },
        "field": {
          "field": "markdown",
          "line": 268
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cloudwatch.Alarm",
        "@aws-cdk/aws-cloudwatch.AlarmProps",
        "@aws-cdk/aws-cloudwatch.ComparisonOperator",
        "@aws-cdk/aws-cloudwatch.ComparisonOperator#GREATER_THAN_THRESHOLD",
        "@aws-cdk/aws-cloudwatch.IAlarm",
        "@aws-cdk/aws-cloudwatch.IMetric",
        "@aws-cdk/aws-codedeploy.ILambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig#LINEAR_10PERCENT_EVERY_1MINUTE",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup#addAlarm",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupProps",
        "@aws-cdk/aws-lambda.Alias",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const alias: lambda.Alias;\n\n// or add alarms to an existing group\ndeclare const blueGreenAlias: lambda.Alias;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst alarm = new cloudwatch.Alarm(this, 'Errors', {\n  comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n  threshold: 1,\n  evaluationPeriods: 1,\n  metric: alias.metricErrors(),\n});\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n  alarms: [\n    // pass some alarms when constructing the deployment group\n    alarm,\n  ],\n});\ndeploymentGroup.addAlarm(new cloudwatch.Alarm(this, 'BlueGreenErrors', {\n  comparisonOperator: cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,\n  threshold: 1,\n  evaluationPeriods: 1,\n  metric: blueGreenAlias.metricErrors(),\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 4,
        "75": 42,
        "104": 3,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 3,
        "194": 12,
        "196": 3,
        "197": 3,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "34a8f8eb496458de394306d17244c1b23a7a1c1aff71a18fddd6bed28fff706e"
    },
    "28666339caf64d768a03d37ffe5c046f8976ad74d97fd795c6457c1bdb257cdb": {
      "translations": {
        "python": {
          "source": "# warm_up_user_cache: lambda.Function\n# end_to_end_validation: lambda.Function\n# alias: lambda.Alias\n\n\n# pass a hook whe creating the deployment group\ndeployment_group = codedeploy.LambdaDeploymentGroup(self, \"BlueGreenDeployment\",\n    alias=alias,\n    deployment_config=codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n    pre_hook=warm_up_user_cache\n)\n\n# or configure one on an existing deployment group\ndeployment_group.add_post_hook(end_to_end_validation)",
          "version": "2"
        },
        "csharp": {
          "source": "Function warmUpUserCache;\nFunction endToEndValidation;\nAlias alias;\n\n\n// pass a hook whe creating the deployment group\nLambdaDeploymentGroup deploymentGroup = new LambdaDeploymentGroup(this, \"BlueGreenDeployment\", new LambdaDeploymentGroupProps {\n    Alias = alias,\n    DeploymentConfig = LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n    PreHook = warmUpUserCache\n});\n\n// or configure one on an existing deployment group\ndeploymentGroup.AddPostHook(endToEndValidation);",
          "version": "1"
        },
        "java": {
          "source": "Function warmUpUserCache;\nFunction endToEndValidation;\nAlias alias;\n\n\n// pass a hook whe creating the deployment group\nLambdaDeploymentGroup deploymentGroup = LambdaDeploymentGroup.Builder.create(this, \"BlueGreenDeployment\")\n        .alias(alias)\n        .deploymentConfig(LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE)\n        .preHook(warmUpUserCache)\n        .build();\n\n// or configure one on an existing deployment group\ndeploymentGroup.addPostHook(endToEndValidation);",
          "version": "1"
        },
        "$": {
          "source": "declare const warmUpUserCache: lambda.Function;\ndeclare const endToEndValidation: lambda.Function;\ndeclare const alias: lambda.Alias;\n\n// pass a hook whe creating the deployment group\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  alias: alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n  preHook: warmUpUserCache,\n});\n\n// or configure one on an existing deployment group\ndeploymentGroup.addPostHook(endToEndValidation);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codedeploy"
        },
        "field": {
          "field": "markdown",
          "line": 303
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.ILambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig#LINEAR_10PERCENT_EVERY_1MINUTE",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup#addPostHook",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupProps",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const warmUpUserCache: lambda.Function;\ndeclare const endToEndValidation: lambda.Function;\ndeclare const alias: lambda.Alias;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\n// pass a hook whe creating the deployment group\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  alias: alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n  preHook: warmUpUserCache,\n});\n\n// or configure one on an existing deployment group\ndeploymentGroup.addPostHook(endToEndValidation);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 23,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "a8f11d70fb1e2a41cb0182ce19b0e03c0491802327a8962abc031958e749fa22"
    },
    "22f7ad2bd231aa940cdfa72f54e3e77ecb7d89d3327bd8241406a534ebaaa041": {
      "translations": {
        "python": {
          "source": "# application: codedeploy.LambdaApplication\n\ndeployment_group = codedeploy.LambdaDeploymentGroup.from_lambda_deployment_group_attributes(self, \"ExistingCodeDeployDeploymentGroup\",\n    application=application,\n    deployment_group_name=\"MyExistingDeploymentGroup\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaApplication application;\n\nILambdaDeploymentGroup deploymentGroup = LambdaDeploymentGroup.FromLambdaDeploymentGroupAttributes(this, \"ExistingCodeDeployDeploymentGroup\", new LambdaDeploymentGroupAttributes {\n    Application = application,\n    DeploymentGroupName = \"MyExistingDeploymentGroup\"\n});",
          "version": "1"
        },
        "java": {
          "source": "LambdaApplication application;\n\nILambdaDeploymentGroup deploymentGroup = LambdaDeploymentGroup.fromLambdaDeploymentGroupAttributes(this, \"ExistingCodeDeployDeploymentGroup\", LambdaDeploymentGroupAttributes.builder()\n        .application(application)\n        .deploymentGroupName(\"MyExistingDeploymentGroup\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const application: codedeploy.LambdaApplication;\nconst deploymentGroup = codedeploy.LambdaDeploymentGroup.fromLambdaDeploymentGroupAttributes(this, 'ExistingCodeDeployDeploymentGroup', {\n  application,\n  deploymentGroupName: 'MyExistingDeploymentGroup',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-codedeploy"
        },
        "field": {
          "field": "markdown",
          "line": 323
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.ILambdaApplication",
        "@aws-cdk/aws-codedeploy.ILambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup#fromLambdaDeploymentGroupAttributes",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupAttributes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const application: codedeploy.LambdaApplication;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst deploymentGroup = codedeploy.LambdaDeploymentGroup.fromLambdaDeploymentGroupAttributes(this, 'ExistingCodeDeployDeploymentGroup', {\n  application,\n  deploymentGroupName: 'MyExistingDeploymentGroup',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "6736baec5eafee30497ea3b60d8f8c9c303c5c1c74b3ace6529feff741fb1d80"
    },
    "bea78b2c0057ff94ebf300990830724ddd8c52b8c1c04595e0046242c6ab7b24": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_autoscaling as autoscaling\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n# application: codedeploy.ServerApplication\n# asg: autoscaling.AutoScalingGroup\n# alarm: cloudwatch.Alarm\n\ndeployment_group = codedeploy.ServerDeploymentGroup(self, \"CodeDeployDeploymentGroup\",\n    application=application,\n    deployment_group_name=\"MyDeploymentGroup\",\n    auto_scaling_groups=[asg],\n    # adds User Data that installs the CodeDeploy agent on your auto-scaling groups hosts\n    # default: true\n    install_agent=True,\n    # adds EC2 instances matching tags\n    ec2_instance_tags=codedeploy.InstanceTagSet({\n        # any instance with tags satisfying\n        # key1=v1 or key1=v2 or key2 (any value) or value v3 (any key)\n        # will match this group\n        \"key1\": [\"v1\", \"v2\"],\n        \"key2\": [],\n        \"\": [\"v3\"]\n    }),\n    # adds on-premise instances matching tags\n    on_premise_instance_tags=codedeploy.InstanceTagSet({\n        \"key1\": [\"v1\", \"v2\"]\n    }, {\n        \"key2\": [\"v3\"]\n    }),\n    # CloudWatch alarms\n    alarms=[alarm],\n    # whether to ignore failure to fetch the status of alarms from CloudWatch\n    # default: false\n    ignore_poll_alarms_failure=False,\n    # auto-rollback configuration\n    auto_rollback=codedeploy.AutoRollbackConfig(\n        failed_deployment=True,  # default: true\n        stopped_deployment=True,  # default: false\n        deployment_in_alarm=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AutoScaling;\nusing Amazon.CDK.AWS.CloudWatch;\n\nServerApplication application;\nAutoScalingGroup asg;\nAlarm alarm;\n\nServerDeploymentGroup deploymentGroup = new ServerDeploymentGroup(this, \"CodeDeployDeploymentGroup\", new ServerDeploymentGroupProps {\n    Application = application,\n    DeploymentGroupName = \"MyDeploymentGroup\",\n    AutoScalingGroups = new [] { asg },\n    // adds User Data that installs the CodeDeploy agent on your auto-scaling groups hosts\n    // default: true\n    InstallAgent = true,\n    // adds EC2 instances matching tags\n    Ec2InstanceTags = new InstanceTagSet(new Dictionary<string, string[]> {\n        // any instance with tags satisfying\n        // key1=v1 or key1=v2 or key2 (any value) or value v3 (any key)\n        // will match this group\n        { \"key1\", new [] { \"v1\", \"v2\" } },\n        { \"key2\", new [] {  } },\n        { \"\", new [] { \"v3\" } }\n    }),\n    // adds on-premise instances matching tags\n    OnPremiseInstanceTags = new InstanceTagSet(new Dictionary<string, string[]> {\n        { \"key1\", new [] { \"v1\", \"v2\" } }\n    }, new Dictionary<string, string[]> {\n        { \"key2\", new [] { \"v3\" } }\n    }),\n    // CloudWatch alarms\n    Alarms = new [] { alarm },\n    // whether to ignore failure to fetch the status of alarms from CloudWatch\n    // default: false\n    IgnorePollAlarmsFailure = false,\n    // auto-rollback configuration\n    AutoRollback = new AutoRollbackConfig {\n        FailedDeployment = true,  // default: true\n        StoppedDeployment = true,  // default: false\n        DeploymentInAlarm = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.autoscaling.*;\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nServerApplication application;\nAutoScalingGroup asg;\nAlarm alarm;\n\nServerDeploymentGroup deploymentGroup = ServerDeploymentGroup.Builder.create(this, \"CodeDeployDeploymentGroup\")\n        .application(application)\n        .deploymentGroupName(\"MyDeploymentGroup\")\n        .autoScalingGroups(List.of(asg))\n        // adds User Data that installs the CodeDeploy agent on your auto-scaling groups hosts\n        // default: true\n        .installAgent(true)\n        // adds EC2 instances matching tags\n        .ec2InstanceTags(new InstanceTagSet(Map.of(\n                // any instance with tags satisfying\n                // key1=v1 or key1=v2 or key2 (any value) or value v3 (any key)\n                // will match this group\n                \"key1\", List.of(\"v1\", \"v2\"),\n                \"key2\", List.of(),\n                \"\", List.of(\"v3\"))))\n        // adds on-premise instances matching tags\n        .onPremiseInstanceTags(new InstanceTagSet(Map.of(\n                \"key1\", List.of(\"v1\", \"v2\")), Map.of(\n                \"key2\", List.of(\"v3\"))))\n        // CloudWatch alarms\n        .alarms(List.of(alarm))\n        // whether to ignore failure to fetch the status of alarms from CloudWatch\n        // default: false\n        .ignorePollAlarmsFailure(false)\n        // auto-rollback configuration\n        .autoRollback(AutoRollbackConfig.builder()\n                .failedDeployment(true) // default: true\n                .stoppedDeployment(true) // default: false\n                .deploymentInAlarm(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const application: codedeploy.ServerApplication;\ndeclare const asg: autoscaling.AutoScalingGroup;\ndeclare const alarm: cloudwatch.Alarm;\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'CodeDeployDeploymentGroup', {\n  application,\n  deploymentGroupName: 'MyDeploymentGroup',\n  autoScalingGroups: [asg],\n  // adds User Data that installs the CodeDeploy agent on your auto-scaling groups hosts\n  // default: true\n  installAgent: true,\n  // adds EC2 instances matching tags\n  ec2InstanceTags: new codedeploy.InstanceTagSet(\n    {\n      // any instance with tags satisfying\n      // key1=v1 or key1=v2 or key2 (any value) or value v3 (any key)\n      // will match this group\n      'key1': ['v1', 'v2'],\n      'key2': [],\n      '': ['v3'],\n    },\n  ),\n  // adds on-premise instances matching tags\n  onPremiseInstanceTags: new codedeploy.InstanceTagSet(\n    // only instances with tags (key1=v1 or key1=v2) AND key2=v3 will match this set\n    {\n      'key1': ['v1', 'v2'],\n    },\n    {\n      'key2': ['v3'],\n    },\n  ),\n  // CloudWatch alarms\n  alarms: [alarm],\n  // whether to ignore failure to fetch the status of alarms from CloudWatch\n  // default: false\n  ignorePollAlarmsFailure: false,\n  // auto-rollback configuration\n  autoRollback: {\n    failedDeployment: true, // default: true\n    stoppedDeployment: true, // default: false\n    deploymentInAlarm: true, // default: true if you provided any alarms, false otherwise\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.AutoRollbackConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.AutoRollbackConfig",
        "@aws-cdk/aws-codedeploy.IServerApplication",
        "@aws-cdk/aws-codedeploy.InstanceTagSet",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroup",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroupProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const application: codedeploy.ServerApplication;\ndeclare const asg: autoscaling.AutoScalingGroup;\ndeclare const alarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'CodeDeployDeploymentGroup', {\n  application,\n  deploymentGroupName: 'MyDeploymentGroup',\n  autoScalingGroups: [asg],\n  // adds User Data that installs the CodeDeploy agent on your auto-scaling groups hosts\n  // default: true\n  installAgent: true,\n  // adds EC2 instances matching tags\n  ec2InstanceTags: new codedeploy.InstanceTagSet(\n    {\n      // any instance with tags satisfying\n      // key1=v1 or key1=v2 or key2 (any value) or value v3 (any key)\n      // will match this group\n      'key1': ['v1', 'v2'],\n      'key2': [],\n      '': ['v3'],\n    },\n  ),\n  // adds on-premise instances matching tags\n  onPremiseInstanceTags: new codedeploy.InstanceTagSet(\n    // only instances with tags (key1=v1 or key1=v2) AND key2=v3 will match this set\n    {\n      'key1': ['v1', 'v2'],\n    },\n    {\n      'key2': ['v3'],\n    },\n  ),\n  // CloudWatch alarms\n  alarms: [alarm],\n  // whether to ignore failure to fetch the status of alarms from CloudWatch\n  // default: false\n  ignorePollAlarmsFailure: false,\n  // auto-rollback configuration\n  autoRollback: {\n    failedDeployment: true, // default: true\n    stoppedDeployment: true, // default: false\n    deploymentInAlarm: true, // default: true if you provided any alarms, false otherwise\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 15,
        "75": 32,
        "91": 1,
        "104": 1,
        "106": 4,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 7,
        "193": 5,
        "194": 3,
        "197": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 16,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "4b2956fd388c99821721ebf1ad71f79c53722a27070ad184192c7d24d8eef541"
    },
    "ab04230038013206e81f6b850e9a1d860c42fbdaa9340baecd46b9d98a219e63": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ncfn_application = codedeploy.CfnApplication(self, \"MyCfnApplication\",\n    application_name=\"applicationName\",\n    compute_platform=\"computePlatform\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nCfnApplication cfnApplication = new CfnApplication(this, \"MyCfnApplication\", new CfnApplicationProps {\n    ApplicationName = \"applicationName\",\n    ComputePlatform = \"computePlatform\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nCfnApplication cfnApplication = CfnApplication.Builder.create(this, \"MyCfnApplication\")\n        .applicationName(\"applicationName\")\n        .computePlatform(\"computePlatform\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst cfnApplication = new codedeploy.CfnApplication(this, 'MyCfnApplication', /* all optional props */ {\n  applicationName: 'applicationName',\n  computePlatform: 'computePlatform',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnApplication"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnApplication",
        "@aws-cdk/aws-codedeploy.CfnApplicationProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApplication = new codedeploy.CfnApplication(this, 'MyCfnApplication', /* all optional props */ {\n  applicationName: 'applicationName',\n  computePlatform: 'computePlatform',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "c01af2c6ddb5087c64b946c6c12f529fa086f2e1bc56f2ce46fced479793253c"
    },
    "eb86a43f7be7abaa3f41657a222e6f1f7dc10ff36970497da56bb42906d2c1a7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ncfn_application_props = codedeploy.CfnApplicationProps(\n    application_name=\"applicationName\",\n    compute_platform=\"computePlatform\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nCfnApplicationProps cfnApplicationProps = new CfnApplicationProps {\n    ApplicationName = \"applicationName\",\n    ComputePlatform = \"computePlatform\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nCfnApplicationProps cfnApplicationProps = CfnApplicationProps.builder()\n        .applicationName(\"applicationName\")\n        .computePlatform(\"computePlatform\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst cfnApplicationProps: codedeploy.CfnApplicationProps = {\n  applicationName: 'applicationName',\n  computePlatform: 'computePlatform',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnApplicationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnApplicationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnApplicationProps: codedeploy.CfnApplicationProps = {\n  applicationName: 'applicationName',\n  computePlatform: 'computePlatform',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "c33ce7eecacf5b14e0869bf1498990d8049a191b35efb82fd057f7eb07548318"
    },
    "0cc97867d5b1fb27df6de508c03d542427b735eea10a1e01f7d12bd5fe81b5f7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ncfn_deployment_config = codedeploy.CfnDeploymentConfig(self, \"MyCfnDeploymentConfig\",\n    compute_platform=\"computePlatform\",\n    deployment_config_name=\"deploymentConfigName\",\n    minimum_healthy_hosts=codedeploy.CfnDeploymentConfig.MinimumHealthyHostsProperty(\n        type=\"type\",\n        value=123\n    ),\n    traffic_routing_config=codedeploy.CfnDeploymentConfig.TrafficRoutingConfigProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        time_based_canary=codedeploy.CfnDeploymentConfig.TimeBasedCanaryProperty(\n            canary_interval=123,\n            canary_percentage=123\n        ),\n        time_based_linear=codedeploy.CfnDeploymentConfig.TimeBasedLinearProperty(\n            linear_interval=123,\n            linear_percentage=123\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nCfnDeploymentConfig cfnDeploymentConfig = new CfnDeploymentConfig(this, \"MyCfnDeploymentConfig\", new CfnDeploymentConfigProps {\n    ComputePlatform = \"computePlatform\",\n    DeploymentConfigName = \"deploymentConfigName\",\n    MinimumHealthyHosts = new MinimumHealthyHostsProperty {\n        Type = \"type\",\n        Value = 123\n    },\n    TrafficRoutingConfig = new TrafficRoutingConfigProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        TimeBasedCanary = new TimeBasedCanaryProperty {\n            CanaryInterval = 123,\n            CanaryPercentage = 123\n        },\n        TimeBasedLinear = new TimeBasedLinearProperty {\n            LinearInterval = 123,\n            LinearPercentage = 123\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nCfnDeploymentConfig cfnDeploymentConfig = CfnDeploymentConfig.Builder.create(this, \"MyCfnDeploymentConfig\")\n        .computePlatform(\"computePlatform\")\n        .deploymentConfigName(\"deploymentConfigName\")\n        .minimumHealthyHosts(MinimumHealthyHostsProperty.builder()\n                .type(\"type\")\n                .value(123)\n                .build())\n        .trafficRoutingConfig(TrafficRoutingConfigProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .timeBasedCanary(TimeBasedCanaryProperty.builder()\n                        .canaryInterval(123)\n                        .canaryPercentage(123)\n                        .build())\n                .timeBasedLinear(TimeBasedLinearProperty.builder()\n                        .linearInterval(123)\n                        .linearPercentage(123)\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst cfnDeploymentConfig = new codedeploy.CfnDeploymentConfig(this, 'MyCfnDeploymentConfig', /* all optional props */ {\n  computePlatform: 'computePlatform',\n  deploymentConfigName: 'deploymentConfigName',\n  minimumHealthyHosts: {\n    type: 'type',\n    value: 123,\n  },\n  trafficRoutingConfig: {\n    type: 'type',\n\n    // the properties below are optional\n    timeBasedCanary: {\n      canaryInterval: 123,\n      canaryPercentage: 123,\n    },\n    timeBasedLinear: {\n      linearInterval: 123,\n      linearPercentage: 123,\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentConfig",
        "@aws-cdk/aws-codedeploy.CfnDeploymentConfigProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDeploymentConfig = new codedeploy.CfnDeploymentConfig(this, 'MyCfnDeploymentConfig', /* all optional props */ {\n  computePlatform: 'computePlatform',\n  deploymentConfigName: 'deploymentConfigName',\n  minimumHealthyHosts: {\n    type: 'type',\n    value: 123,\n  },\n  trafficRoutingConfig: {\n    type: 'type',\n\n    // the properties below are optional\n    timeBasedCanary: {\n      canaryInterval: 123,\n      canaryPercentage: 123,\n    },\n    timeBasedLinear: {\n      linearInterval: 123,\n      linearPercentage: 123,\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 5,
        "10": 6,
        "75": 17,
        "104": 1,
        "193": 5,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "320d257ee6aaa2458809ebb2c7bf1eac5cecc64462b5aac8d93b2c5c6a807e76"
    },
    "d0e48e12002ee1b8b454d8751a0fa4d849e1ebb720a04aca1b5718642867785d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\nminimum_healthy_hosts_property = codedeploy.CfnDeploymentConfig.MinimumHealthyHostsProperty(\n    type=\"type\",\n    value=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nMinimumHealthyHostsProperty minimumHealthyHostsProperty = new MinimumHealthyHostsProperty {\n    Type = \"type\",\n    Value = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nMinimumHealthyHostsProperty minimumHealthyHostsProperty = MinimumHealthyHostsProperty.builder()\n        .type(\"type\")\n        .value(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst minimumHealthyHostsProperty: codedeploy.CfnDeploymentConfig.MinimumHealthyHostsProperty = {\n  type: 'type',\n  value: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentConfig.MinimumHealthyHostsProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentConfig.MinimumHealthyHostsProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst minimumHealthyHostsProperty: codedeploy.CfnDeploymentConfig.MinimumHealthyHostsProperty = {\n  type: 'type',\n  value: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "621fa8e84461d3ac5b452c76cae9e896066cb7d1cca179a2d0672e1f8405096c"
    },
    "0c9618cb7e187e41ddc6217255cf8f1d7411b4f8c1f223454c5bcca6a2cba7d3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ntime_based_canary_property = codedeploy.CfnDeploymentConfig.TimeBasedCanaryProperty(\n    canary_interval=123,\n    canary_percentage=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nTimeBasedCanaryProperty timeBasedCanaryProperty = new TimeBasedCanaryProperty {\n    CanaryInterval = 123,\n    CanaryPercentage = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nTimeBasedCanaryProperty timeBasedCanaryProperty = TimeBasedCanaryProperty.builder()\n        .canaryInterval(123)\n        .canaryPercentage(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst timeBasedCanaryProperty: codedeploy.CfnDeploymentConfig.TimeBasedCanaryProperty = {\n  canaryInterval: 123,\n  canaryPercentage: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentConfig.TimeBasedCanaryProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentConfig.TimeBasedCanaryProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst timeBasedCanaryProperty: codedeploy.CfnDeploymentConfig.TimeBasedCanaryProperty = {\n  canaryInterval: 123,\n  canaryPercentage: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "141203ad100d6e4675b784d67ee34394a42051911427250de3b6164c96ff6a9d"
    },
    "2a6468954ecbf53a405fb2649aa51b3ad42c3d2494f7c55c6bdfbaf036b89b1b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ntime_based_linear_property = codedeploy.CfnDeploymentConfig.TimeBasedLinearProperty(\n    linear_interval=123,\n    linear_percentage=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nTimeBasedLinearProperty timeBasedLinearProperty = new TimeBasedLinearProperty {\n    LinearInterval = 123,\n    LinearPercentage = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nTimeBasedLinearProperty timeBasedLinearProperty = TimeBasedLinearProperty.builder()\n        .linearInterval(123)\n        .linearPercentage(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst timeBasedLinearProperty: codedeploy.CfnDeploymentConfig.TimeBasedLinearProperty = {\n  linearInterval: 123,\n  linearPercentage: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentConfig.TimeBasedLinearProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentConfig.TimeBasedLinearProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst timeBasedLinearProperty: codedeploy.CfnDeploymentConfig.TimeBasedLinearProperty = {\n  linearInterval: 123,\n  linearPercentage: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "88f7bb6ef5115d68e5d6b447fe724643de293cafc6e65e786c36c39da7dc3a1c"
    },
    "f75503bd493b780e012d23f986d2d94be4132b85b1a90ec1866f0bfb636ee14e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ntraffic_routing_config_property = codedeploy.CfnDeploymentConfig.TrafficRoutingConfigProperty(\n    type=\"type\",\n\n    # the properties below are optional\n    time_based_canary=codedeploy.CfnDeploymentConfig.TimeBasedCanaryProperty(\n        canary_interval=123,\n        canary_percentage=123\n    ),\n    time_based_linear=codedeploy.CfnDeploymentConfig.TimeBasedLinearProperty(\n        linear_interval=123,\n        linear_percentage=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nTrafficRoutingConfigProperty trafficRoutingConfigProperty = new TrafficRoutingConfigProperty {\n    Type = \"type\",\n\n    // the properties below are optional\n    TimeBasedCanary = new TimeBasedCanaryProperty {\n        CanaryInterval = 123,\n        CanaryPercentage = 123\n    },\n    TimeBasedLinear = new TimeBasedLinearProperty {\n        LinearInterval = 123,\n        LinearPercentage = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nTrafficRoutingConfigProperty trafficRoutingConfigProperty = TrafficRoutingConfigProperty.builder()\n        .type(\"type\")\n\n        // the properties below are optional\n        .timeBasedCanary(TimeBasedCanaryProperty.builder()\n                .canaryInterval(123)\n                .canaryPercentage(123)\n                .build())\n        .timeBasedLinear(TimeBasedLinearProperty.builder()\n                .linearInterval(123)\n                .linearPercentage(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst trafficRoutingConfigProperty: codedeploy.CfnDeploymentConfig.TrafficRoutingConfigProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  timeBasedCanary: {\n    canaryInterval: 123,\n    canaryPercentage: 123,\n  },\n  timeBasedLinear: {\n    linearInterval: 123,\n    linearPercentage: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentConfig.TrafficRoutingConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentConfig.TrafficRoutingConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst trafficRoutingConfigProperty: codedeploy.CfnDeploymentConfig.TrafficRoutingConfigProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  timeBasedCanary: {\n    canaryInterval: 123,\n    canaryPercentage: 123,\n  },\n  timeBasedLinear: {\n    linearInterval: 123,\n    linearPercentage: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 4,
        "10": 2,
        "75": 12,
        "153": 2,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "dffa850870b3cce886132013e816f06914bb56caa0e8d3dddc2899f7a1e58b97"
    },
    "c2b7c14026ce877b8a2730a1224a897dd3616cc3bc6c5e6c4ba9141629cbfa02": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ncfn_deployment_config_props = codedeploy.CfnDeploymentConfigProps(\n    compute_platform=\"computePlatform\",\n    deployment_config_name=\"deploymentConfigName\",\n    minimum_healthy_hosts=codedeploy.CfnDeploymentConfig.MinimumHealthyHostsProperty(\n        type=\"type\",\n        value=123\n    ),\n    traffic_routing_config=codedeploy.CfnDeploymentConfig.TrafficRoutingConfigProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        time_based_canary=codedeploy.CfnDeploymentConfig.TimeBasedCanaryProperty(\n            canary_interval=123,\n            canary_percentage=123\n        ),\n        time_based_linear=codedeploy.CfnDeploymentConfig.TimeBasedLinearProperty(\n            linear_interval=123,\n            linear_percentage=123\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nCfnDeploymentConfigProps cfnDeploymentConfigProps = new CfnDeploymentConfigProps {\n    ComputePlatform = \"computePlatform\",\n    DeploymentConfigName = \"deploymentConfigName\",\n    MinimumHealthyHosts = new MinimumHealthyHostsProperty {\n        Type = \"type\",\n        Value = 123\n    },\n    TrafficRoutingConfig = new TrafficRoutingConfigProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        TimeBasedCanary = new TimeBasedCanaryProperty {\n            CanaryInterval = 123,\n            CanaryPercentage = 123\n        },\n        TimeBasedLinear = new TimeBasedLinearProperty {\n            LinearInterval = 123,\n            LinearPercentage = 123\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nCfnDeploymentConfigProps cfnDeploymentConfigProps = CfnDeploymentConfigProps.builder()\n        .computePlatform(\"computePlatform\")\n        .deploymentConfigName(\"deploymentConfigName\")\n        .minimumHealthyHosts(MinimumHealthyHostsProperty.builder()\n                .type(\"type\")\n                .value(123)\n                .build())\n        .trafficRoutingConfig(TrafficRoutingConfigProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .timeBasedCanary(TimeBasedCanaryProperty.builder()\n                        .canaryInterval(123)\n                        .canaryPercentage(123)\n                        .build())\n                .timeBasedLinear(TimeBasedLinearProperty.builder()\n                        .linearInterval(123)\n                        .linearPercentage(123)\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst cfnDeploymentConfigProps: codedeploy.CfnDeploymentConfigProps = {\n  computePlatform: 'computePlatform',\n  deploymentConfigName: 'deploymentConfigName',\n  minimumHealthyHosts: {\n    type: 'type',\n    value: 123,\n  },\n  trafficRoutingConfig: {\n    type: 'type',\n\n    // the properties below are optional\n    timeBasedCanary: {\n      canaryInterval: 123,\n      canaryPercentage: 123,\n    },\n    timeBasedLinear: {\n      linearInterval: 123,\n      linearPercentage: 123,\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentConfigProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentConfigProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDeploymentConfigProps: codedeploy.CfnDeploymentConfigProps = {\n  computePlatform: 'computePlatform',\n  deploymentConfigName: 'deploymentConfigName',\n  minimumHealthyHosts: {\n    type: 'type',\n    value: 123,\n  },\n  trafficRoutingConfig: {\n    type: 'type',\n\n    // the properties below are optional\n    timeBasedCanary: {\n      canaryInterval: 123,\n      canaryPercentage: 123,\n    },\n    timeBasedLinear: {\n      linearInterval: 123,\n      linearPercentage: 123,\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 5,
        "10": 5,
        "75": 17,
        "153": 1,
        "169": 1,
        "193": 5,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "8e0173be6a4cc647e442417096795355f292c522dd351a8c5f301612ebc9701c"
    },
    "20d356a2137e43b039a869745c72ecf3061537229e034c198ac3212a28e36e4b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ncfn_deployment_group = codedeploy.CfnDeploymentGroup(self, \"MyCfnDeploymentGroup\",\n    application_name=\"applicationName\",\n    service_role_arn=\"serviceRoleArn\",\n\n    # the properties below are optional\n    alarm_configuration=codedeploy.CfnDeploymentGroup.AlarmConfigurationProperty(\n        alarms=[codedeploy.CfnDeploymentGroup.AlarmProperty(\n            name=\"name\"\n        )],\n        enabled=False,\n        ignore_poll_alarm_failure=False\n    ),\n    auto_rollback_configuration=codedeploy.CfnDeploymentGroup.AutoRollbackConfigurationProperty(\n        enabled=False,\n        events=[\"events\"]\n    ),\n    auto_scaling_groups=[\"autoScalingGroups\"],\n    blue_green_deployment_configuration=codedeploy.CfnDeploymentGroup.BlueGreenDeploymentConfigurationProperty(\n        deployment_ready_option=codedeploy.CfnDeploymentGroup.DeploymentReadyOptionProperty(\n            action_on_timeout=\"actionOnTimeout\",\n            wait_time_in_minutes=123\n        ),\n        green_fleet_provisioning_option=codedeploy.CfnDeploymentGroup.GreenFleetProvisioningOptionProperty(\n            action=\"action\"\n        ),\n        terminate_blue_instances_on_deployment_success=codedeploy.CfnDeploymentGroup.BlueInstanceTerminationOptionProperty(\n            action=\"action\",\n            termination_wait_time_in_minutes=123\n        )\n    ),\n    deployment=codedeploy.CfnDeploymentGroup.DeploymentProperty(\n        revision=codedeploy.CfnDeploymentGroup.RevisionLocationProperty(\n            git_hub_location=codedeploy.CfnDeploymentGroup.GitHubLocationProperty(\n                commit_id=\"commitId\",\n                repository=\"repository\"\n            ),\n            revision_type=\"revisionType\",\n            s3_location=codedeploy.CfnDeploymentGroup.S3LocationProperty(\n                bucket=\"bucket\",\n                key=\"key\",\n\n                # the properties below are optional\n                bundle_type=\"bundleType\",\n                e_tag=\"eTag\",\n                version=\"version\"\n            )\n        ),\n\n        # the properties below are optional\n        description=\"description\",\n        ignore_application_stop_failures=False\n    ),\n    deployment_config_name=\"deploymentConfigName\",\n    deployment_group_name=\"deploymentGroupName\",\n    deployment_style=codedeploy.CfnDeploymentGroup.DeploymentStyleProperty(\n        deployment_option=\"deploymentOption\",\n        deployment_type=\"deploymentType\"\n    ),\n    ec2_tag_filters=[codedeploy.CfnDeploymentGroup.EC2TagFilterProperty(\n        key=\"key\",\n        type=\"type\",\n        value=\"value\"\n    )],\n    ec2_tag_set=codedeploy.CfnDeploymentGroup.EC2TagSetProperty(\n        ec2_tag_set_list=[codedeploy.CfnDeploymentGroup.EC2TagSetListObjectProperty(\n            ec2_tag_group=[codedeploy.CfnDeploymentGroup.EC2TagFilterProperty(\n                key=\"key\",\n                type=\"type\",\n                value=\"value\"\n            )]\n        )]\n    ),\n    ecs_services=[codedeploy.CfnDeploymentGroup.ECSServiceProperty(\n        cluster_name=\"clusterName\",\n        service_name=\"serviceName\"\n    )],\n    load_balancer_info=codedeploy.CfnDeploymentGroup.LoadBalancerInfoProperty(\n        elb_info_list=[codedeploy.CfnDeploymentGroup.ELBInfoProperty(\n            name=\"name\"\n        )],\n        target_group_info_list=[codedeploy.CfnDeploymentGroup.TargetGroupInfoProperty(\n            name=\"name\"\n        )]\n    ),\n    on_premises_instance_tag_filters=[codedeploy.CfnDeploymentGroup.TagFilterProperty(\n        key=\"key\",\n        type=\"type\",\n        value=\"value\"\n    )],\n    on_premises_tag_set=codedeploy.CfnDeploymentGroup.OnPremisesTagSetProperty(\n        on_premises_tag_set_list=[codedeploy.CfnDeploymentGroup.OnPremisesTagSetListObjectProperty(\n            on_premises_tag_group=[codedeploy.CfnDeploymentGroup.TagFilterProperty(\n                key=\"key\",\n                type=\"type\",\n                value=\"value\"\n            )]\n        )]\n    ),\n    trigger_configurations=[codedeploy.CfnDeploymentGroup.TriggerConfigProperty(\n        trigger_events=[\"triggerEvents\"],\n        trigger_name=\"triggerName\",\n        trigger_target_arn=\"triggerTargetArn\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nCfnDeploymentGroup cfnDeploymentGroup = new CfnDeploymentGroup(this, \"MyCfnDeploymentGroup\", new CfnDeploymentGroupProps {\n    ApplicationName = \"applicationName\",\n    ServiceRoleArn = \"serviceRoleArn\",\n\n    // the properties below are optional\n    AlarmConfiguration = new AlarmConfigurationProperty {\n        Alarms = new [] { new AlarmProperty {\n            Name = \"name\"\n        } },\n        Enabled = false,\n        IgnorePollAlarmFailure = false\n    },\n    AutoRollbackConfiguration = new AutoRollbackConfigurationProperty {\n        Enabled = false,\n        Events = new [] { \"events\" }\n    },\n    AutoScalingGroups = new [] { \"autoScalingGroups\" },\n    BlueGreenDeploymentConfiguration = new BlueGreenDeploymentConfigurationProperty {\n        DeploymentReadyOption = new DeploymentReadyOptionProperty {\n            ActionOnTimeout = \"actionOnTimeout\",\n            WaitTimeInMinutes = 123\n        },\n        GreenFleetProvisioningOption = new GreenFleetProvisioningOptionProperty {\n            Action = \"action\"\n        },\n        TerminateBlueInstancesOnDeploymentSuccess = new BlueInstanceTerminationOptionProperty {\n            Action = \"action\",\n            TerminationWaitTimeInMinutes = 123\n        }\n    },\n    Deployment = new DeploymentProperty {\n        Revision = new RevisionLocationProperty {\n            GitHubLocation = new GitHubLocationProperty {\n                CommitId = \"commitId\",\n                Repository = \"repository\"\n            },\n            RevisionType = \"revisionType\",\n            S3Location = new S3LocationProperty {\n                Bucket = \"bucket\",\n                Key = \"key\",\n\n                // the properties below are optional\n                BundleType = \"bundleType\",\n                ETag = \"eTag\",\n                Version = \"version\"\n            }\n        },\n\n        // the properties below are optional\n        Description = \"description\",\n        IgnoreApplicationStopFailures = false\n    },\n    DeploymentConfigName = \"deploymentConfigName\",\n    DeploymentGroupName = \"deploymentGroupName\",\n    DeploymentStyle = new DeploymentStyleProperty {\n        DeploymentOption = \"deploymentOption\",\n        DeploymentType = \"deploymentType\"\n    },\n    Ec2TagFilters = new [] { new EC2TagFilterProperty {\n        Key = \"key\",\n        Type = \"type\",\n        Value = \"value\"\n    } },\n    Ec2TagSet = new EC2TagSetProperty {\n        Ec2TagSetList = new [] { new EC2TagSetListObjectProperty {\n            Ec2TagGroup = new [] { new EC2TagFilterProperty {\n                Key = \"key\",\n                Type = \"type\",\n                Value = \"value\"\n            } }\n        } }\n    },\n    EcsServices = new [] { new ECSServiceProperty {\n        ClusterName = \"clusterName\",\n        ServiceName = \"serviceName\"\n    } },\n    LoadBalancerInfo = new LoadBalancerInfoProperty {\n        ElbInfoList = new [] { new ELBInfoProperty {\n            Name = \"name\"\n        } },\n        TargetGroupInfoList = new [] { new TargetGroupInfoProperty {\n            Name = \"name\"\n        } }\n    },\n    OnPremisesInstanceTagFilters = new [] { new TagFilterProperty {\n        Key = \"key\",\n        Type = \"type\",\n        Value = \"value\"\n    } },\n    OnPremisesTagSet = new OnPremisesTagSetProperty {\n        OnPremisesTagSetList = new [] { new OnPremisesTagSetListObjectProperty {\n            OnPremisesTagGroup = new [] { new TagFilterProperty {\n                Key = \"key\",\n                Type = \"type\",\n                Value = \"value\"\n            } }\n        } }\n    },\n    TriggerConfigurations = new [] { new TriggerConfigProperty {\n        TriggerEvents = new [] { \"triggerEvents\" },\n        TriggerName = \"triggerName\",\n        TriggerTargetArn = \"triggerTargetArn\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nCfnDeploymentGroup cfnDeploymentGroup = CfnDeploymentGroup.Builder.create(this, \"MyCfnDeploymentGroup\")\n        .applicationName(\"applicationName\")\n        .serviceRoleArn(\"serviceRoleArn\")\n\n        // the properties below are optional\n        .alarmConfiguration(AlarmConfigurationProperty.builder()\n                .alarms(List.of(AlarmProperty.builder()\n                        .name(\"name\")\n                        .build()))\n                .enabled(false)\n                .ignorePollAlarmFailure(false)\n                .build())\n        .autoRollbackConfiguration(AutoRollbackConfigurationProperty.builder()\n                .enabled(false)\n                .events(List.of(\"events\"))\n                .build())\n        .autoScalingGroups(List.of(\"autoScalingGroups\"))\n        .blueGreenDeploymentConfiguration(BlueGreenDeploymentConfigurationProperty.builder()\n                .deploymentReadyOption(DeploymentReadyOptionProperty.builder()\n                        .actionOnTimeout(\"actionOnTimeout\")\n                        .waitTimeInMinutes(123)\n                        .build())\n                .greenFleetProvisioningOption(GreenFleetProvisioningOptionProperty.builder()\n                        .action(\"action\")\n                        .build())\n                .terminateBlueInstancesOnDeploymentSuccess(BlueInstanceTerminationOptionProperty.builder()\n                        .action(\"action\")\n                        .terminationWaitTimeInMinutes(123)\n                        .build())\n                .build())\n        .deployment(DeploymentProperty.builder()\n                .revision(RevisionLocationProperty.builder()\n                        .gitHubLocation(GitHubLocationProperty.builder()\n                                .commitId(\"commitId\")\n                                .repository(\"repository\")\n                                .build())\n                        .revisionType(\"revisionType\")\n                        .s3Location(S3LocationProperty.builder()\n                                .bucket(\"bucket\")\n                                .key(\"key\")\n\n                                // the properties below are optional\n                                .bundleType(\"bundleType\")\n                                .eTag(\"eTag\")\n                                .version(\"version\")\n                                .build())\n                        .build())\n\n                // the properties below are optional\n                .description(\"description\")\n                .ignoreApplicationStopFailures(false)\n                .build())\n        .deploymentConfigName(\"deploymentConfigName\")\n        .deploymentGroupName(\"deploymentGroupName\")\n        .deploymentStyle(DeploymentStyleProperty.builder()\n                .deploymentOption(\"deploymentOption\")\n                .deploymentType(\"deploymentType\")\n                .build())\n        .ec2TagFilters(List.of(EC2TagFilterProperty.builder()\n                .key(\"key\")\n                .type(\"type\")\n                .value(\"value\")\n                .build()))\n        .ec2TagSet(EC2TagSetProperty.builder()\n                .ec2TagSetList(List.of(EC2TagSetListObjectProperty.builder()\n                        .ec2TagGroup(List.of(EC2TagFilterProperty.builder()\n                                .key(\"key\")\n                                .type(\"type\")\n                                .value(\"value\")\n                                .build()))\n                        .build()))\n                .build())\n        .ecsServices(List.of(ECSServiceProperty.builder()\n                .clusterName(\"clusterName\")\n                .serviceName(\"serviceName\")\n                .build()))\n        .loadBalancerInfo(LoadBalancerInfoProperty.builder()\n                .elbInfoList(List.of(ELBInfoProperty.builder()\n                        .name(\"name\")\n                        .build()))\n                .targetGroupInfoList(List.of(TargetGroupInfoProperty.builder()\n                        .name(\"name\")\n                        .build()))\n                .build())\n        .onPremisesInstanceTagFilters(List.of(TagFilterProperty.builder()\n                .key(\"key\")\n                .type(\"type\")\n                .value(\"value\")\n                .build()))\n        .onPremisesTagSet(OnPremisesTagSetProperty.builder()\n                .onPremisesTagSetList(List.of(OnPremisesTagSetListObjectProperty.builder()\n                        .onPremisesTagGroup(List.of(TagFilterProperty.builder()\n                                .key(\"key\")\n                                .type(\"type\")\n                                .value(\"value\")\n                                .build()))\n                        .build()))\n                .build())\n        .triggerConfigurations(List.of(TriggerConfigProperty.builder()\n                .triggerEvents(List.of(\"triggerEvents\"))\n                .triggerName(\"triggerName\")\n                .triggerTargetArn(\"triggerTargetArn\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst cfnDeploymentGroup = new codedeploy.CfnDeploymentGroup(this, 'MyCfnDeploymentGroup', {\n  applicationName: 'applicationName',\n  serviceRoleArn: 'serviceRoleArn',\n\n  // the properties below are optional\n  alarmConfiguration: {\n    alarms: [{\n      name: 'name',\n    }],\n    enabled: false,\n    ignorePollAlarmFailure: false,\n  },\n  autoRollbackConfiguration: {\n    enabled: false,\n    events: ['events'],\n  },\n  autoScalingGroups: ['autoScalingGroups'],\n  blueGreenDeploymentConfiguration: {\n    deploymentReadyOption: {\n      actionOnTimeout: 'actionOnTimeout',\n      waitTimeInMinutes: 123,\n    },\n    greenFleetProvisioningOption: {\n      action: 'action',\n    },\n    terminateBlueInstancesOnDeploymentSuccess: {\n      action: 'action',\n      terminationWaitTimeInMinutes: 123,\n    },\n  },\n  deployment: {\n    revision: {\n      gitHubLocation: {\n        commitId: 'commitId',\n        repository: 'repository',\n      },\n      revisionType: 'revisionType',\n      s3Location: {\n        bucket: 'bucket',\n        key: 'key',\n\n        // the properties below are optional\n        bundleType: 'bundleType',\n        eTag: 'eTag',\n        version: 'version',\n      },\n    },\n\n    // the properties below are optional\n    description: 'description',\n    ignoreApplicationStopFailures: false,\n  },\n  deploymentConfigName: 'deploymentConfigName',\n  deploymentGroupName: 'deploymentGroupName',\n  deploymentStyle: {\n    deploymentOption: 'deploymentOption',\n    deploymentType: 'deploymentType',\n  },\n  ec2TagFilters: [{\n    key: 'key',\n    type: 'type',\n    value: 'value',\n  }],\n  ec2TagSet: {\n    ec2TagSetList: [{\n      ec2TagGroup: [{\n        key: 'key',\n        type: 'type',\n        value: 'value',\n      }],\n    }],\n  },\n  ecsServices: [{\n    clusterName: 'clusterName',\n    serviceName: 'serviceName',\n  }],\n  loadBalancerInfo: {\n    elbInfoList: [{\n      name: 'name',\n    }],\n    targetGroupInfoList: [{\n      name: 'name',\n    }],\n  },\n  onPremisesInstanceTagFilters: [{\n    key: 'key',\n    type: 'type',\n    value: 'value',\n  }],\n  onPremisesTagSet: {\n    onPremisesTagSetList: [{\n      onPremisesTagGroup: [{\n        key: 'key',\n        type: 'type',\n        value: 'value',\n      }],\n    }],\n  },\n  triggerConfigurations: [{\n    triggerEvents: ['triggerEvents'],\n    triggerName: 'triggerName',\n    triggerTargetArn: 'triggerTargetArn',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup",
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroupProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDeploymentGroup = new codedeploy.CfnDeploymentGroup(this, 'MyCfnDeploymentGroup', {\n  applicationName: 'applicationName',\n  serviceRoleArn: 'serviceRoleArn',\n\n  // the properties below are optional\n  alarmConfiguration: {\n    alarms: [{\n      name: 'name',\n    }],\n    enabled: false,\n    ignorePollAlarmFailure: false,\n  },\n  autoRollbackConfiguration: {\n    enabled: false,\n    events: ['events'],\n  },\n  autoScalingGroups: ['autoScalingGroups'],\n  blueGreenDeploymentConfiguration: {\n    deploymentReadyOption: {\n      actionOnTimeout: 'actionOnTimeout',\n      waitTimeInMinutes: 123,\n    },\n    greenFleetProvisioningOption: {\n      action: 'action',\n    },\n    terminateBlueInstancesOnDeploymentSuccess: {\n      action: 'action',\n      terminationWaitTimeInMinutes: 123,\n    },\n  },\n  deployment: {\n    revision: {\n      gitHubLocation: {\n        commitId: 'commitId',\n        repository: 'repository',\n      },\n      revisionType: 'revisionType',\n      s3Location: {\n        bucket: 'bucket',\n        key: 'key',\n\n        // the properties below are optional\n        bundleType: 'bundleType',\n        eTag: 'eTag',\n        version: 'version',\n      },\n    },\n\n    // the properties below are optional\n    description: 'description',\n    ignoreApplicationStopFailures: false,\n  },\n  deploymentConfigName: 'deploymentConfigName',\n  deploymentGroupName: 'deploymentGroupName',\n  deploymentStyle: {\n    deploymentOption: 'deploymentOption',\n    deploymentType: 'deploymentType',\n  },\n  ec2TagFilters: [{\n    key: 'key',\n    type: 'type',\n    value: 'value',\n  }],\n  ec2TagSet: {\n    ec2TagSetList: [{\n      ec2TagGroup: [{\n        key: 'key',\n        type: 'type',\n        value: 'value',\n      }],\n    }],\n  },\n  ecsServices: [{\n    clusterName: 'clusterName',\n    serviceName: 'serviceName',\n  }],\n  loadBalancerInfo: {\n    elbInfoList: [{\n      name: 'name',\n    }],\n    targetGroupInfoList: [{\n      name: 'name',\n    }],\n  },\n  onPremisesInstanceTagFilters: [{\n    key: 'key',\n    type: 'type',\n    value: 'value',\n  }],\n  onPremisesTagSet: {\n    onPremisesTagSetList: [{\n      onPremisesTagGroup: [{\n        key: 'key',\n        type: 'type',\n        value: 'value',\n      }],\n    }],\n  },\n  triggerConfigurations: [{\n    triggerEvents: ['triggerEvents'],\n    triggerName: 'triggerName',\n    triggerTargetArn: 'triggerTargetArn',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 42,
        "75": 75,
        "91": 4,
        "104": 1,
        "192": 14,
        "193": 26,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 71,
        "290": 1
      },
      "fqnsFingerprint": "0723ee24e319da3655488f9b55844af6ce6a4e9fd42ad4a06bddad406c55c9ee"
    },
    "87e391224f91b98c8bd2b9177008d5658981330758e21a76122c80ae3204fa76": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\nalarm_configuration_property = codedeploy.CfnDeploymentGroup.AlarmConfigurationProperty(\n    alarms=[codedeploy.CfnDeploymentGroup.AlarmProperty(\n        name=\"name\"\n    )],\n    enabled=False,\n    ignore_poll_alarm_failure=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nAlarmConfigurationProperty alarmConfigurationProperty = new AlarmConfigurationProperty {\n    Alarms = new [] { new AlarmProperty {\n        Name = \"name\"\n    } },\n    Enabled = false,\n    IgnorePollAlarmFailure = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nAlarmConfigurationProperty alarmConfigurationProperty = AlarmConfigurationProperty.builder()\n        .alarms(List.of(AlarmProperty.builder()\n                .name(\"name\")\n                .build()))\n        .enabled(false)\n        .ignorePollAlarmFailure(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst alarmConfigurationProperty: codedeploy.CfnDeploymentGroup.AlarmConfigurationProperty = {\n  alarms: [{\n    name: 'name',\n  }],\n  enabled: false,\n  ignorePollAlarmFailure: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.AlarmConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.AlarmConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst alarmConfigurationProperty: codedeploy.CfnDeploymentGroup.AlarmConfigurationProperty = {\n  alarms: [{\n    name: 'name',\n  }],\n  enabled: false,\n  ignorePollAlarmFailure: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "91": 2,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "fdff705fd2e6b6c1b5036cc90c022e3b149db014dc7d32c8558a995cfc432d5f"
    },
    "fdb8b71c1fd0591594805a4edb197dfb1ee9d24e2283529d4d77264d96d55aa6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\nalarm_property = codedeploy.CfnDeploymentGroup.AlarmProperty(\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nAlarmProperty alarmProperty = new AlarmProperty {\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nAlarmProperty alarmProperty = AlarmProperty.builder()\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst alarmProperty: codedeploy.CfnDeploymentGroup.AlarmProperty = {\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.AlarmProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.AlarmProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst alarmProperty: codedeploy.CfnDeploymentGroup.AlarmProperty = {\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "2c7a1341d5aad19845ee1e310a93a7dbb1ec79d2d78a2805490f5726fd1cb6b3"
    },
    "25cbdb043f392212fbe296c202d65ef6515911a425757355da5fc67239da4e7f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\nauto_rollback_configuration_property = codedeploy.CfnDeploymentGroup.AutoRollbackConfigurationProperty(\n    enabled=False,\n    events=[\"events\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nAutoRollbackConfigurationProperty autoRollbackConfigurationProperty = new AutoRollbackConfigurationProperty {\n    Enabled = false,\n    Events = new [] { \"events\" }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nAutoRollbackConfigurationProperty autoRollbackConfigurationProperty = AutoRollbackConfigurationProperty.builder()\n        .enabled(false)\n        .events(List.of(\"events\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst autoRollbackConfigurationProperty: codedeploy.CfnDeploymentGroup.AutoRollbackConfigurationProperty = {\n  enabled: false,\n  events: ['events'],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.AutoRollbackConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.AutoRollbackConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst autoRollbackConfigurationProperty: codedeploy.CfnDeploymentGroup.AutoRollbackConfigurationProperty = {\n  enabled: false,\n  events: ['events'],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "91": 1,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "bf9e517e4aa7e33b9b6059d047c30695ec1ccbc86b064f8c82a779f5170164bd"
    },
    "6f4f2f0a6f612c25e2aede9df826f1a93496f564757898ba100a92fbde1d3fd8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\nblue_green_deployment_configuration_property = codedeploy.CfnDeploymentGroup.BlueGreenDeploymentConfigurationProperty(\n    deployment_ready_option=codedeploy.CfnDeploymentGroup.DeploymentReadyOptionProperty(\n        action_on_timeout=\"actionOnTimeout\",\n        wait_time_in_minutes=123\n    ),\n    green_fleet_provisioning_option=codedeploy.CfnDeploymentGroup.GreenFleetProvisioningOptionProperty(\n        action=\"action\"\n    ),\n    terminate_blue_instances_on_deployment_success=codedeploy.CfnDeploymentGroup.BlueInstanceTerminationOptionProperty(\n        action=\"action\",\n        termination_wait_time_in_minutes=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nBlueGreenDeploymentConfigurationProperty blueGreenDeploymentConfigurationProperty = new BlueGreenDeploymentConfigurationProperty {\n    DeploymentReadyOption = new DeploymentReadyOptionProperty {\n        ActionOnTimeout = \"actionOnTimeout\",\n        WaitTimeInMinutes = 123\n    },\n    GreenFleetProvisioningOption = new GreenFleetProvisioningOptionProperty {\n        Action = \"action\"\n    },\n    TerminateBlueInstancesOnDeploymentSuccess = new BlueInstanceTerminationOptionProperty {\n        Action = \"action\",\n        TerminationWaitTimeInMinutes = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nBlueGreenDeploymentConfigurationProperty blueGreenDeploymentConfigurationProperty = BlueGreenDeploymentConfigurationProperty.builder()\n        .deploymentReadyOption(DeploymentReadyOptionProperty.builder()\n                .actionOnTimeout(\"actionOnTimeout\")\n                .waitTimeInMinutes(123)\n                .build())\n        .greenFleetProvisioningOption(GreenFleetProvisioningOptionProperty.builder()\n                .action(\"action\")\n                .build())\n        .terminateBlueInstancesOnDeploymentSuccess(BlueInstanceTerminationOptionProperty.builder()\n                .action(\"action\")\n                .terminationWaitTimeInMinutes(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst blueGreenDeploymentConfigurationProperty: codedeploy.CfnDeploymentGroup.BlueGreenDeploymentConfigurationProperty = {\n  deploymentReadyOption: {\n    actionOnTimeout: 'actionOnTimeout',\n    waitTimeInMinutes: 123,\n  },\n  greenFleetProvisioningOption: {\n    action: 'action',\n  },\n  terminateBlueInstancesOnDeploymentSuccess: {\n    action: 'action',\n    terminationWaitTimeInMinutes: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.BlueGreenDeploymentConfigurationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.BlueGreenDeploymentConfigurationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst blueGreenDeploymentConfigurationProperty: codedeploy.CfnDeploymentGroup.BlueGreenDeploymentConfigurationProperty = {\n  deploymentReadyOption: {\n    actionOnTimeout: 'actionOnTimeout',\n    waitTimeInMinutes: 123,\n  },\n  greenFleetProvisioningOption: {\n    action: 'action',\n  },\n  terminateBlueInstancesOnDeploymentSuccess: {\n    action: 'action',\n    terminationWaitTimeInMinutes: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 13,
        "153": 2,
        "169": 1,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "a2eb1ed4aa365fd6b5e985f6dfac9cebf3baeed2c1b1ff4de302386054c0284a"
    },
    "8e54ebdb16972e5ea88ba0a5a6171be8a57d93b002c67e2ca8ea0f6f530209cd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\nblue_instance_termination_option_property = codedeploy.CfnDeploymentGroup.BlueInstanceTerminationOptionProperty(\n    action=\"action\",\n    termination_wait_time_in_minutes=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nBlueInstanceTerminationOptionProperty blueInstanceTerminationOptionProperty = new BlueInstanceTerminationOptionProperty {\n    Action = \"action\",\n    TerminationWaitTimeInMinutes = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nBlueInstanceTerminationOptionProperty blueInstanceTerminationOptionProperty = BlueInstanceTerminationOptionProperty.builder()\n        .action(\"action\")\n        .terminationWaitTimeInMinutes(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst blueInstanceTerminationOptionProperty: codedeploy.CfnDeploymentGroup.BlueInstanceTerminationOptionProperty = {\n  action: 'action',\n  terminationWaitTimeInMinutes: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.BlueInstanceTerminationOptionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.BlueInstanceTerminationOptionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst blueInstanceTerminationOptionProperty: codedeploy.CfnDeploymentGroup.BlueInstanceTerminationOptionProperty = {\n  action: 'action',\n  terminationWaitTimeInMinutes: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "af9a29579340f13dfe678a01805ad4dd78fa37af37ea141704faf85f5b85bc63"
    },
    "f19505a9c67e01b50a9d29f045026cba374be15038bed6e9d25dd250b2a50bc0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ndeployment_property = codedeploy.CfnDeploymentGroup.DeploymentProperty(\n    revision=codedeploy.CfnDeploymentGroup.RevisionLocationProperty(\n        git_hub_location=codedeploy.CfnDeploymentGroup.GitHubLocationProperty(\n            commit_id=\"commitId\",\n            repository=\"repository\"\n        ),\n        revision_type=\"revisionType\",\n        s3_location=codedeploy.CfnDeploymentGroup.S3LocationProperty(\n            bucket=\"bucket\",\n            key=\"key\",\n\n            # the properties below are optional\n            bundle_type=\"bundleType\",\n            e_tag=\"eTag\",\n            version=\"version\"\n        )\n    ),\n\n    # the properties below are optional\n    description=\"description\",\n    ignore_application_stop_failures=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nDeploymentProperty deploymentProperty = new DeploymentProperty {\n    Revision = new RevisionLocationProperty {\n        GitHubLocation = new GitHubLocationProperty {\n            CommitId = \"commitId\",\n            Repository = \"repository\"\n        },\n        RevisionType = \"revisionType\",\n        S3Location = new S3LocationProperty {\n            Bucket = \"bucket\",\n            Key = \"key\",\n\n            // the properties below are optional\n            BundleType = \"bundleType\",\n            ETag = \"eTag\",\n            Version = \"version\"\n        }\n    },\n\n    // the properties below are optional\n    Description = \"description\",\n    IgnoreApplicationStopFailures = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nDeploymentProperty deploymentProperty = DeploymentProperty.builder()\n        .revision(RevisionLocationProperty.builder()\n                .gitHubLocation(GitHubLocationProperty.builder()\n                        .commitId(\"commitId\")\n                        .repository(\"repository\")\n                        .build())\n                .revisionType(\"revisionType\")\n                .s3Location(S3LocationProperty.builder()\n                        .bucket(\"bucket\")\n                        .key(\"key\")\n\n                        // the properties below are optional\n                        .bundleType(\"bundleType\")\n                        .eTag(\"eTag\")\n                        .version(\"version\")\n                        .build())\n                .build())\n\n        // the properties below are optional\n        .description(\"description\")\n        .ignoreApplicationStopFailures(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst deploymentProperty: codedeploy.CfnDeploymentGroup.DeploymentProperty = {\n  revision: {\n    gitHubLocation: {\n      commitId: 'commitId',\n      repository: 'repository',\n    },\n    revisionType: 'revisionType',\n    s3Location: {\n      bucket: 'bucket',\n      key: 'key',\n\n      // the properties below are optional\n      bundleType: 'bundleType',\n      eTag: 'eTag',\n      version: 'version',\n    },\n  },\n\n  // the properties below are optional\n  description: 'description',\n  ignoreApplicationStopFailures: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.DeploymentProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.DeploymentProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst deploymentProperty: codedeploy.CfnDeploymentGroup.DeploymentProperty = {\n  revision: {\n    gitHubLocation: {\n      commitId: 'commitId',\n      repository: 'repository',\n    },\n    revisionType: 'revisionType',\n    s3Location: {\n      bucket: 'bucket',\n      key: 'key',\n\n      // the properties below are optional\n      bundleType: 'bundleType',\n      eTag: 'eTag',\n      version: 'version',\n    },\n  },\n\n  // the properties below are optional\n  description: 'description',\n  ignoreApplicationStopFailures: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 10,
        "75": 18,
        "91": 1,
        "153": 2,
        "169": 1,
        "193": 4,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "4160311c6603aae1d59a4213ab029703fcc837f7fc202bd76ffcb2482d77b599"
    },
    "b6755728b0d823373eeac878cb396684ef52154df4333c4e8f8cf9ccd47159ba": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ndeployment_ready_option_property = codedeploy.CfnDeploymentGroup.DeploymentReadyOptionProperty(\n    action_on_timeout=\"actionOnTimeout\",\n    wait_time_in_minutes=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nDeploymentReadyOptionProperty deploymentReadyOptionProperty = new DeploymentReadyOptionProperty {\n    ActionOnTimeout = \"actionOnTimeout\",\n    WaitTimeInMinutes = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nDeploymentReadyOptionProperty deploymentReadyOptionProperty = DeploymentReadyOptionProperty.builder()\n        .actionOnTimeout(\"actionOnTimeout\")\n        .waitTimeInMinutes(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst deploymentReadyOptionProperty: codedeploy.CfnDeploymentGroup.DeploymentReadyOptionProperty = {\n  actionOnTimeout: 'actionOnTimeout',\n  waitTimeInMinutes: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.DeploymentReadyOptionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.DeploymentReadyOptionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst deploymentReadyOptionProperty: codedeploy.CfnDeploymentGroup.DeploymentReadyOptionProperty = {\n  actionOnTimeout: 'actionOnTimeout',\n  waitTimeInMinutes: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "b29fb481b663989ee97ac046904122cab0708fed4f06b198c4f3d2a45b3808f5"
    },
    "a1d925adcfc6ede98c9bfab86f9adce246382dd6ddec7489ded1f2704788d2e2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ndeployment_style_property = codedeploy.CfnDeploymentGroup.DeploymentStyleProperty(\n    deployment_option=\"deploymentOption\",\n    deployment_type=\"deploymentType\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nDeploymentStyleProperty deploymentStyleProperty = new DeploymentStyleProperty {\n    DeploymentOption = \"deploymentOption\",\n    DeploymentType = \"deploymentType\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nDeploymentStyleProperty deploymentStyleProperty = DeploymentStyleProperty.builder()\n        .deploymentOption(\"deploymentOption\")\n        .deploymentType(\"deploymentType\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst deploymentStyleProperty: codedeploy.CfnDeploymentGroup.DeploymentStyleProperty = {\n  deploymentOption: 'deploymentOption',\n  deploymentType: 'deploymentType',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.DeploymentStyleProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.DeploymentStyleProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst deploymentStyleProperty: codedeploy.CfnDeploymentGroup.DeploymentStyleProperty = {\n  deploymentOption: 'deploymentOption',\n  deploymentType: 'deploymentType',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d5594343064d6838220aa77cf8b029198abf72f07341151444f20c6138268c7a"
    },
    "c5a863b3a4d0f4bff436c1d956b922c475e572ed7c812c5b43dd907c414a7b34": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ne_c2_tag_filter_property = codedeploy.CfnDeploymentGroup.EC2TagFilterProperty(\n    key=\"key\",\n    type=\"type\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nEC2TagFilterProperty eC2TagFilterProperty = new EC2TagFilterProperty {\n    Key = \"key\",\n    Type = \"type\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nEC2TagFilterProperty eC2TagFilterProperty = EC2TagFilterProperty.builder()\n        .key(\"key\")\n        .type(\"type\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst eC2TagFilterProperty: codedeploy.CfnDeploymentGroup.EC2TagFilterProperty = {\n  key: 'key',\n  type: 'type',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.EC2TagFilterProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.EC2TagFilterProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst eC2TagFilterProperty: codedeploy.CfnDeploymentGroup.EC2TagFilterProperty = {\n  key: 'key',\n  type: 'type',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f907fea3d050cc974a51f8d2f179d15cfb121836f093db0b8644016e8b35c29f"
    },
    "99c7039f8a15ff90a06f76411936986c5724fcabfb070dd25d797e721ecb4f1f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ne_c2_tag_set_list_object_property = codedeploy.CfnDeploymentGroup.EC2TagSetListObjectProperty(\n    ec2_tag_group=[codedeploy.CfnDeploymentGroup.EC2TagFilterProperty(\n        key=\"key\",\n        type=\"type\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nEC2TagSetListObjectProperty eC2TagSetListObjectProperty = new EC2TagSetListObjectProperty {\n    Ec2TagGroup = new [] { new EC2TagFilterProperty {\n        Key = \"key\",\n        Type = \"type\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nEC2TagSetListObjectProperty eC2TagSetListObjectProperty = EC2TagSetListObjectProperty.builder()\n        .ec2TagGroup(List.of(EC2TagFilterProperty.builder()\n                .key(\"key\")\n                .type(\"type\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst eC2TagSetListObjectProperty: codedeploy.CfnDeploymentGroup.EC2TagSetListObjectProperty = {\n  ec2TagGroup: [{\n    key: 'key',\n    type: 'type',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.EC2TagSetListObjectProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.EC2TagSetListObjectProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst eC2TagSetListObjectProperty: codedeploy.CfnDeploymentGroup.EC2TagSetListObjectProperty = {\n  ec2TagGroup: [{\n    key: 'key',\n    type: 'type',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "93c1cbf965b0bfc19601c3d7931d99c90393a51c8f13566228f9cdba2bb4f1ae"
    },
    "3b39b21acec87fcf4901b32ee31f1b2b2605df6b1f55f19061b3407b68e15265": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ne_c2_tag_set_property = codedeploy.CfnDeploymentGroup.EC2TagSetProperty(\n    ec2_tag_set_list=[codedeploy.CfnDeploymentGroup.EC2TagSetListObjectProperty(\n        ec2_tag_group=[codedeploy.CfnDeploymentGroup.EC2TagFilterProperty(\n            key=\"key\",\n            type=\"type\",\n            value=\"value\"\n        )]\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nEC2TagSetProperty eC2TagSetProperty = new EC2TagSetProperty {\n    Ec2TagSetList = new [] { new EC2TagSetListObjectProperty {\n        Ec2TagGroup = new [] { new EC2TagFilterProperty {\n            Key = \"key\",\n            Type = \"type\",\n            Value = \"value\"\n        } }\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nEC2TagSetProperty eC2TagSetProperty = EC2TagSetProperty.builder()\n        .ec2TagSetList(List.of(EC2TagSetListObjectProperty.builder()\n                .ec2TagGroup(List.of(EC2TagFilterProperty.builder()\n                        .key(\"key\")\n                        .type(\"type\")\n                        .value(\"value\")\n                        .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst eC2TagSetProperty: codedeploy.CfnDeploymentGroup.EC2TagSetProperty = {\n  ec2TagSetList: [{\n    ec2TagGroup: [{\n      key: 'key',\n      type: 'type',\n      value: 'value',\n    }],\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.EC2TagSetProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.EC2TagSetProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst eC2TagSetProperty: codedeploy.CfnDeploymentGroup.EC2TagSetProperty = {\n  ec2TagSetList: [{\n    ec2TagGroup: [{\n      key: 'key',\n      type: 'type',\n      value: 'value',\n    }],\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "9fca671eeff5acc38c7fefa3f8a68c9b5ea8e42985cbe75fab49235840b1a809"
    },
    "23c4d93d333a82fd9a65670e229d5cfa51fa9ddd0ccb34f6c21f930fe7df3b59": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ne_cSService_property = codedeploy.CfnDeploymentGroup.ECSServiceProperty(\n    cluster_name=\"clusterName\",\n    service_name=\"serviceName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nECSServiceProperty eCSServiceProperty = new ECSServiceProperty {\n    ClusterName = \"clusterName\",\n    ServiceName = \"serviceName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nECSServiceProperty eCSServiceProperty = ECSServiceProperty.builder()\n        .clusterName(\"clusterName\")\n        .serviceName(\"serviceName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst eCSServiceProperty: codedeploy.CfnDeploymentGroup.ECSServiceProperty = {\n  clusterName: 'clusterName',\n  serviceName: 'serviceName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.ECSServiceProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.ECSServiceProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst eCSServiceProperty: codedeploy.CfnDeploymentGroup.ECSServiceProperty = {\n  clusterName: 'clusterName',\n  serviceName: 'serviceName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a24b734f08b8ad2df7ec8f9a4aa73e016bbb40cf827874274813750d71d3dc97"
    },
    "c411e163b6558dee663f5bd98d42027347904512a3604f7bf02d1aa14e4ab7aa": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ne_lBInfo_property = codedeploy.CfnDeploymentGroup.ELBInfoProperty(\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nELBInfoProperty eLBInfoProperty = new ELBInfoProperty {\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nELBInfoProperty eLBInfoProperty = ELBInfoProperty.builder()\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst eLBInfoProperty: codedeploy.CfnDeploymentGroup.ELBInfoProperty = {\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.ELBInfoProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.ELBInfoProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst eLBInfoProperty: codedeploy.CfnDeploymentGroup.ELBInfoProperty = {\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "c4cdd0a6c58e73194733fd073aefc56cd0712eeb7cb3f20c7ed04e636a068060"
    },
    "7f304de033d04034f9615b7134aa740d0d68d753143d6a15bcce91057b53f55a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ngit_hub_location_property = codedeploy.CfnDeploymentGroup.GitHubLocationProperty(\n    commit_id=\"commitId\",\n    repository=\"repository\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nGitHubLocationProperty gitHubLocationProperty = new GitHubLocationProperty {\n    CommitId = \"commitId\",\n    Repository = \"repository\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nGitHubLocationProperty gitHubLocationProperty = GitHubLocationProperty.builder()\n        .commitId(\"commitId\")\n        .repository(\"repository\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst gitHubLocationProperty: codedeploy.CfnDeploymentGroup.GitHubLocationProperty = {\n  commitId: 'commitId',\n  repository: 'repository',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.GitHubLocationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.GitHubLocationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst gitHubLocationProperty: codedeploy.CfnDeploymentGroup.GitHubLocationProperty = {\n  commitId: 'commitId',\n  repository: 'repository',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "09305b5cab5a78abada7f17b69eed9a28b2cad9f7df71cd2160eb8a25b5bb27d"
    },
    "53cef4abb8e48acb1f4f3e43121a4b81a61e62645eb6088d6d4f9f87f7fd3f2a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ngreen_fleet_provisioning_option_property = codedeploy.CfnDeploymentGroup.GreenFleetProvisioningOptionProperty(\n    action=\"action\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nGreenFleetProvisioningOptionProperty greenFleetProvisioningOptionProperty = new GreenFleetProvisioningOptionProperty {\n    Action = \"action\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nGreenFleetProvisioningOptionProperty greenFleetProvisioningOptionProperty = GreenFleetProvisioningOptionProperty.builder()\n        .action(\"action\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst greenFleetProvisioningOptionProperty: codedeploy.CfnDeploymentGroup.GreenFleetProvisioningOptionProperty = {\n  action: 'action',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.GreenFleetProvisioningOptionProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.GreenFleetProvisioningOptionProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst greenFleetProvisioningOptionProperty: codedeploy.CfnDeploymentGroup.GreenFleetProvisioningOptionProperty = {\n  action: 'action',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "2b58b8106bab7d05b494fe1ce52a1a962e1cd70bc668c32c17983a9a7541d231"
    },
    "1940c96eabde1faf7bd562b497d887a9f5b99b00f83a4fdc0735e04946edbc10": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\nload_balancer_info_property = codedeploy.CfnDeploymentGroup.LoadBalancerInfoProperty(\n    elb_info_list=[codedeploy.CfnDeploymentGroup.ELBInfoProperty(\n        name=\"name\"\n    )],\n    target_group_info_list=[codedeploy.CfnDeploymentGroup.TargetGroupInfoProperty(\n        name=\"name\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nLoadBalancerInfoProperty loadBalancerInfoProperty = new LoadBalancerInfoProperty {\n    ElbInfoList = new [] { new ELBInfoProperty {\n        Name = \"name\"\n    } },\n    TargetGroupInfoList = new [] { new TargetGroupInfoProperty {\n        Name = \"name\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nLoadBalancerInfoProperty loadBalancerInfoProperty = LoadBalancerInfoProperty.builder()\n        .elbInfoList(List.of(ELBInfoProperty.builder()\n                .name(\"name\")\n                .build()))\n        .targetGroupInfoList(List.of(TargetGroupInfoProperty.builder()\n                .name(\"name\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst loadBalancerInfoProperty: codedeploy.CfnDeploymentGroup.LoadBalancerInfoProperty = {\n  elbInfoList: [{\n    name: 'name',\n  }],\n  targetGroupInfoList: [{\n    name: 'name',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.LoadBalancerInfoProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.LoadBalancerInfoProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst loadBalancerInfoProperty: codedeploy.CfnDeploymentGroup.LoadBalancerInfoProperty = {\n  elbInfoList: [{\n    name: 'name',\n  }],\n  targetGroupInfoList: [{\n    name: 'name',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "fb2b1142413b99f93ebca2423ff9549a2960badaceaee0a779d89f5aa68a5580"
    },
    "debe6c3af5716ee438aab74ea55d23e59d9e30ea38a46a454bd59fbeca45d146": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\non_premises_tag_set_list_object_property = codedeploy.CfnDeploymentGroup.OnPremisesTagSetListObjectProperty(\n    on_premises_tag_group=[codedeploy.CfnDeploymentGroup.TagFilterProperty(\n        key=\"key\",\n        type=\"type\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nOnPremisesTagSetListObjectProperty onPremisesTagSetListObjectProperty = new OnPremisesTagSetListObjectProperty {\n    OnPremisesTagGroup = new [] { new TagFilterProperty {\n        Key = \"key\",\n        Type = \"type\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nOnPremisesTagSetListObjectProperty onPremisesTagSetListObjectProperty = OnPremisesTagSetListObjectProperty.builder()\n        .onPremisesTagGroup(List.of(TagFilterProperty.builder()\n                .key(\"key\")\n                .type(\"type\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst onPremisesTagSetListObjectProperty: codedeploy.CfnDeploymentGroup.OnPremisesTagSetListObjectProperty = {\n  onPremisesTagGroup: [{\n    key: 'key',\n    type: 'type',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.OnPremisesTagSetListObjectProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.OnPremisesTagSetListObjectProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst onPremisesTagSetListObjectProperty: codedeploy.CfnDeploymentGroup.OnPremisesTagSetListObjectProperty = {\n  onPremisesTagGroup: [{\n    key: 'key',\n    type: 'type',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "8b32df361cc14ed77dfe4fc58959a2be21019fb893bb24558ef2c646b375fbca"
    },
    "6a68f3390b551e45d7e1ea6282cc40227b70988ed761e699b1e8886433155796": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\non_premises_tag_set_property = codedeploy.CfnDeploymentGroup.OnPremisesTagSetProperty(\n    on_premises_tag_set_list=[codedeploy.CfnDeploymentGroup.OnPremisesTagSetListObjectProperty(\n        on_premises_tag_group=[codedeploy.CfnDeploymentGroup.TagFilterProperty(\n            key=\"key\",\n            type=\"type\",\n            value=\"value\"\n        )]\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nOnPremisesTagSetProperty onPremisesTagSetProperty = new OnPremisesTagSetProperty {\n    OnPremisesTagSetList = new [] { new OnPremisesTagSetListObjectProperty {\n        OnPremisesTagGroup = new [] { new TagFilterProperty {\n            Key = \"key\",\n            Type = \"type\",\n            Value = \"value\"\n        } }\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nOnPremisesTagSetProperty onPremisesTagSetProperty = OnPremisesTagSetProperty.builder()\n        .onPremisesTagSetList(List.of(OnPremisesTagSetListObjectProperty.builder()\n                .onPremisesTagGroup(List.of(TagFilterProperty.builder()\n                        .key(\"key\")\n                        .type(\"type\")\n                        .value(\"value\")\n                        .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst onPremisesTagSetProperty: codedeploy.CfnDeploymentGroup.OnPremisesTagSetProperty = {\n  onPremisesTagSetList: [{\n    onPremisesTagGroup: [{\n      key: 'key',\n      type: 'type',\n      value: 'value',\n    }],\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.OnPremisesTagSetProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.OnPremisesTagSetProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst onPremisesTagSetProperty: codedeploy.CfnDeploymentGroup.OnPremisesTagSetProperty = {\n  onPremisesTagSetList: [{\n    onPremisesTagGroup: [{\n      key: 'key',\n      type: 'type',\n      value: 'value',\n    }],\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "153": 2,
        "169": 1,
        "192": 2,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "8af0e7c7afd3562902922691c026e4183d7f207c04fd7e09dce60de31b4b0b7c"
    },
    "1365265be18609de6e0a2bdb23858f0e8ffb919809b3fc489bdb8e90b7a43996": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\nrevision_location_property = codedeploy.CfnDeploymentGroup.RevisionLocationProperty(\n    git_hub_location=codedeploy.CfnDeploymentGroup.GitHubLocationProperty(\n        commit_id=\"commitId\",\n        repository=\"repository\"\n    ),\n    revision_type=\"revisionType\",\n    s3_location=codedeploy.CfnDeploymentGroup.S3LocationProperty(\n        bucket=\"bucket\",\n        key=\"key\",\n\n        # the properties below are optional\n        bundle_type=\"bundleType\",\n        e_tag=\"eTag\",\n        version=\"version\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nRevisionLocationProperty revisionLocationProperty = new RevisionLocationProperty {\n    GitHubLocation = new GitHubLocationProperty {\n        CommitId = \"commitId\",\n        Repository = \"repository\"\n    },\n    RevisionType = \"revisionType\",\n    S3Location = new S3LocationProperty {\n        Bucket = \"bucket\",\n        Key = \"key\",\n\n        // the properties below are optional\n        BundleType = \"bundleType\",\n        ETag = \"eTag\",\n        Version = \"version\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nRevisionLocationProperty revisionLocationProperty = RevisionLocationProperty.builder()\n        .gitHubLocation(GitHubLocationProperty.builder()\n                .commitId(\"commitId\")\n                .repository(\"repository\")\n                .build())\n        .revisionType(\"revisionType\")\n        .s3Location(S3LocationProperty.builder()\n                .bucket(\"bucket\")\n                .key(\"key\")\n\n                // the properties below are optional\n                .bundleType(\"bundleType\")\n                .eTag(\"eTag\")\n                .version(\"version\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst revisionLocationProperty: codedeploy.CfnDeploymentGroup.RevisionLocationProperty = {\n  gitHubLocation: {\n    commitId: 'commitId',\n    repository: 'repository',\n  },\n  revisionType: 'revisionType',\n  s3Location: {\n    bucket: 'bucket',\n    key: 'key',\n\n    // the properties below are optional\n    bundleType: 'bundleType',\n    eTag: 'eTag',\n    version: 'version',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.RevisionLocationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.RevisionLocationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst revisionLocationProperty: codedeploy.CfnDeploymentGroup.RevisionLocationProperty = {\n  gitHubLocation: {\n    commitId: 'commitId',\n    repository: 'repository',\n  },\n  revisionType: 'revisionType',\n  s3Location: {\n    bucket: 'bucket',\n    key: 'key',\n\n    // the properties below are optional\n    bundleType: 'bundleType',\n    eTag: 'eTag',\n    version: 'version',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 15,
        "153": 2,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "58b3639680c674075e699ba837d0f60a8f47d0ae92126f2d07837dc13bcde65d"
    },
    "4f03ed322d2247867e6d2f992041513f3c036f118e7eb74f73cfada41a3388c7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ns3_location_property = codedeploy.CfnDeploymentGroup.S3LocationProperty(\n    bucket=\"bucket\",\n    key=\"key\",\n\n    # the properties below are optional\n    bundle_type=\"bundleType\",\n    e_tag=\"eTag\",\n    version=\"version\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nS3LocationProperty s3LocationProperty = new S3LocationProperty {\n    Bucket = \"bucket\",\n    Key = \"key\",\n\n    // the properties below are optional\n    BundleType = \"bundleType\",\n    ETag = \"eTag\",\n    Version = \"version\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nS3LocationProperty s3LocationProperty = S3LocationProperty.builder()\n        .bucket(\"bucket\")\n        .key(\"key\")\n\n        // the properties below are optional\n        .bundleType(\"bundleType\")\n        .eTag(\"eTag\")\n        .version(\"version\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst s3LocationProperty: codedeploy.CfnDeploymentGroup.S3LocationProperty = {\n  bucket: 'bucket',\n  key: 'key',\n\n  // the properties below are optional\n  bundleType: 'bundleType',\n  eTag: 'eTag',\n  version: 'version',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.S3LocationProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.S3LocationProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst s3LocationProperty: codedeploy.CfnDeploymentGroup.S3LocationProperty = {\n  bucket: 'bucket',\n  key: 'key',\n\n  // the properties below are optional\n  bundleType: 'bundleType',\n  eTag: 'eTag',\n  version: 'version',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 10,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "9ce6306424c247654b5a7c425eb04d7be893a9dc6ea6820e5c8a0dfd9015ebf5"
    },
    "8eddd65737a2b6dbc90202410d7843a9664a7975f7b66d1dc3346bd319804e7a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ntag_filter_property = codedeploy.CfnDeploymentGroup.TagFilterProperty(\n    key=\"key\",\n    type=\"type\",\n    value=\"value\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nTagFilterProperty tagFilterProperty = new TagFilterProperty {\n    Key = \"key\",\n    Type = \"type\",\n    Value = \"value\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nTagFilterProperty tagFilterProperty = TagFilterProperty.builder()\n        .key(\"key\")\n        .type(\"type\")\n        .value(\"value\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst tagFilterProperty: codedeploy.CfnDeploymentGroup.TagFilterProperty = {\n  key: 'key',\n  type: 'type',\n  value: 'value',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.TagFilterProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.TagFilterProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst tagFilterProperty: codedeploy.CfnDeploymentGroup.TagFilterProperty = {\n  key: 'key',\n  type: 'type',\n  value: 'value',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "2621c1c6355766baa2f7b7131b70f862d2247c7bc049cd00b69d16c0fcb17e56"
    },
    "0a2b27860fd73081a95061671afbc0daecd9a3c8d7fbac64dc3f958b9b114546": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ntarget_group_info_property = codedeploy.CfnDeploymentGroup.TargetGroupInfoProperty(\n    name=\"name\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nTargetGroupInfoProperty targetGroupInfoProperty = new TargetGroupInfoProperty {\n    Name = \"name\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nTargetGroupInfoProperty targetGroupInfoProperty = TargetGroupInfoProperty.builder()\n        .name(\"name\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst targetGroupInfoProperty: codedeploy.CfnDeploymentGroup.TargetGroupInfoProperty = {\n  name: 'name',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.TargetGroupInfoProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.TargetGroupInfoProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst targetGroupInfoProperty: codedeploy.CfnDeploymentGroup.TargetGroupInfoProperty = {\n  name: 'name',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "1a11f3fe834bb393645db2721183140f9fffeffbe5e9b07f09d3436d084715f3"
    },
    "151b1def420f84038cbf76e3f0d598e5923b3c4b639acc50b46f4f34c6302cb1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ntrigger_config_property = codedeploy.CfnDeploymentGroup.TriggerConfigProperty(\n    trigger_events=[\"triggerEvents\"],\n    trigger_name=\"triggerName\",\n    trigger_target_arn=\"triggerTargetArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nTriggerConfigProperty triggerConfigProperty = new TriggerConfigProperty {\n    TriggerEvents = new [] { \"triggerEvents\" },\n    TriggerName = \"triggerName\",\n    TriggerTargetArn = \"triggerTargetArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nTriggerConfigProperty triggerConfigProperty = TriggerConfigProperty.builder()\n        .triggerEvents(List.of(\"triggerEvents\"))\n        .triggerName(\"triggerName\")\n        .triggerTargetArn(\"triggerTargetArn\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst triggerConfigProperty: codedeploy.CfnDeploymentGroup.TriggerConfigProperty = {\n  triggerEvents: ['triggerEvents'],\n  triggerName: 'triggerName',\n  triggerTargetArn: 'triggerTargetArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.TriggerConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroup.TriggerConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst triggerConfigProperty: codedeploy.CfnDeploymentGroup.TriggerConfigProperty = {\n  triggerEvents: ['triggerEvents'],\n  triggerName: 'triggerName',\n  triggerTargetArn: 'triggerTargetArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "3ba5e91a2def90edb0b4a63272ca2d8ebc11bca82ad698443e20d74e16212a5e"
    },
    "d36671ece5dfaae3229fc006519a655a69099245a370d4a3155ab166bff951cf": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\ncfn_deployment_group_props = codedeploy.CfnDeploymentGroupProps(\n    application_name=\"applicationName\",\n    service_role_arn=\"serviceRoleArn\",\n\n    # the properties below are optional\n    alarm_configuration=codedeploy.CfnDeploymentGroup.AlarmConfigurationProperty(\n        alarms=[codedeploy.CfnDeploymentGroup.AlarmProperty(\n            name=\"name\"\n        )],\n        enabled=False,\n        ignore_poll_alarm_failure=False\n    ),\n    auto_rollback_configuration=codedeploy.CfnDeploymentGroup.AutoRollbackConfigurationProperty(\n        enabled=False,\n        events=[\"events\"]\n    ),\n    auto_scaling_groups=[\"autoScalingGroups\"],\n    blue_green_deployment_configuration=codedeploy.CfnDeploymentGroup.BlueGreenDeploymentConfigurationProperty(\n        deployment_ready_option=codedeploy.CfnDeploymentGroup.DeploymentReadyOptionProperty(\n            action_on_timeout=\"actionOnTimeout\",\n            wait_time_in_minutes=123\n        ),\n        green_fleet_provisioning_option=codedeploy.CfnDeploymentGroup.GreenFleetProvisioningOptionProperty(\n            action=\"action\"\n        ),\n        terminate_blue_instances_on_deployment_success=codedeploy.CfnDeploymentGroup.BlueInstanceTerminationOptionProperty(\n            action=\"action\",\n            termination_wait_time_in_minutes=123\n        )\n    ),\n    deployment=codedeploy.CfnDeploymentGroup.DeploymentProperty(\n        revision=codedeploy.CfnDeploymentGroup.RevisionLocationProperty(\n            git_hub_location=codedeploy.CfnDeploymentGroup.GitHubLocationProperty(\n                commit_id=\"commitId\",\n                repository=\"repository\"\n            ),\n            revision_type=\"revisionType\",\n            s3_location=codedeploy.CfnDeploymentGroup.S3LocationProperty(\n                bucket=\"bucket\",\n                key=\"key\",\n\n                # the properties below are optional\n                bundle_type=\"bundleType\",\n                e_tag=\"eTag\",\n                version=\"version\"\n            )\n        ),\n\n        # the properties below are optional\n        description=\"description\",\n        ignore_application_stop_failures=False\n    ),\n    deployment_config_name=\"deploymentConfigName\",\n    deployment_group_name=\"deploymentGroupName\",\n    deployment_style=codedeploy.CfnDeploymentGroup.DeploymentStyleProperty(\n        deployment_option=\"deploymentOption\",\n        deployment_type=\"deploymentType\"\n    ),\n    ec2_tag_filters=[codedeploy.CfnDeploymentGroup.EC2TagFilterProperty(\n        key=\"key\",\n        type=\"type\",\n        value=\"value\"\n    )],\n    ec2_tag_set=codedeploy.CfnDeploymentGroup.EC2TagSetProperty(\n        ec2_tag_set_list=[codedeploy.CfnDeploymentGroup.EC2TagSetListObjectProperty(\n            ec2_tag_group=[codedeploy.CfnDeploymentGroup.EC2TagFilterProperty(\n                key=\"key\",\n                type=\"type\",\n                value=\"value\"\n            )]\n        )]\n    ),\n    ecs_services=[codedeploy.CfnDeploymentGroup.ECSServiceProperty(\n        cluster_name=\"clusterName\",\n        service_name=\"serviceName\"\n    )],\n    load_balancer_info=codedeploy.CfnDeploymentGroup.LoadBalancerInfoProperty(\n        elb_info_list=[codedeploy.CfnDeploymentGroup.ELBInfoProperty(\n            name=\"name\"\n        )],\n        target_group_info_list=[codedeploy.CfnDeploymentGroup.TargetGroupInfoProperty(\n            name=\"name\"\n        )]\n    ),\n    on_premises_instance_tag_filters=[codedeploy.CfnDeploymentGroup.TagFilterProperty(\n        key=\"key\",\n        type=\"type\",\n        value=\"value\"\n    )],\n    on_premises_tag_set=codedeploy.CfnDeploymentGroup.OnPremisesTagSetProperty(\n        on_premises_tag_set_list=[codedeploy.CfnDeploymentGroup.OnPremisesTagSetListObjectProperty(\n            on_premises_tag_group=[codedeploy.CfnDeploymentGroup.TagFilterProperty(\n                key=\"key\",\n                type=\"type\",\n                value=\"value\"\n            )]\n        )]\n    ),\n    trigger_configurations=[codedeploy.CfnDeploymentGroup.TriggerConfigProperty(\n        trigger_events=[\"triggerEvents\"],\n        trigger_name=\"triggerName\",\n        trigger_target_arn=\"triggerTargetArn\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nCfnDeploymentGroupProps cfnDeploymentGroupProps = new CfnDeploymentGroupProps {\n    ApplicationName = \"applicationName\",\n    ServiceRoleArn = \"serviceRoleArn\",\n\n    // the properties below are optional\n    AlarmConfiguration = new AlarmConfigurationProperty {\n        Alarms = new [] { new AlarmProperty {\n            Name = \"name\"\n        } },\n        Enabled = false,\n        IgnorePollAlarmFailure = false\n    },\n    AutoRollbackConfiguration = new AutoRollbackConfigurationProperty {\n        Enabled = false,\n        Events = new [] { \"events\" }\n    },\n    AutoScalingGroups = new [] { \"autoScalingGroups\" },\n    BlueGreenDeploymentConfiguration = new BlueGreenDeploymentConfigurationProperty {\n        DeploymentReadyOption = new DeploymentReadyOptionProperty {\n            ActionOnTimeout = \"actionOnTimeout\",\n            WaitTimeInMinutes = 123\n        },\n        GreenFleetProvisioningOption = new GreenFleetProvisioningOptionProperty {\n            Action = \"action\"\n        },\n        TerminateBlueInstancesOnDeploymentSuccess = new BlueInstanceTerminationOptionProperty {\n            Action = \"action\",\n            TerminationWaitTimeInMinutes = 123\n        }\n    },\n    Deployment = new DeploymentProperty {\n        Revision = new RevisionLocationProperty {\n            GitHubLocation = new GitHubLocationProperty {\n                CommitId = \"commitId\",\n                Repository = \"repository\"\n            },\n            RevisionType = \"revisionType\",\n            S3Location = new S3LocationProperty {\n                Bucket = \"bucket\",\n                Key = \"key\",\n\n                // the properties below are optional\n                BundleType = \"bundleType\",\n                ETag = \"eTag\",\n                Version = \"version\"\n            }\n        },\n\n        // the properties below are optional\n        Description = \"description\",\n        IgnoreApplicationStopFailures = false\n    },\n    DeploymentConfigName = \"deploymentConfigName\",\n    DeploymentGroupName = \"deploymentGroupName\",\n    DeploymentStyle = new DeploymentStyleProperty {\n        DeploymentOption = \"deploymentOption\",\n        DeploymentType = \"deploymentType\"\n    },\n    Ec2TagFilters = new [] { new EC2TagFilterProperty {\n        Key = \"key\",\n        Type = \"type\",\n        Value = \"value\"\n    } },\n    Ec2TagSet = new EC2TagSetProperty {\n        Ec2TagSetList = new [] { new EC2TagSetListObjectProperty {\n            Ec2TagGroup = new [] { new EC2TagFilterProperty {\n                Key = \"key\",\n                Type = \"type\",\n                Value = \"value\"\n            } }\n        } }\n    },\n    EcsServices = new [] { new ECSServiceProperty {\n        ClusterName = \"clusterName\",\n        ServiceName = \"serviceName\"\n    } },\n    LoadBalancerInfo = new LoadBalancerInfoProperty {\n        ElbInfoList = new [] { new ELBInfoProperty {\n            Name = \"name\"\n        } },\n        TargetGroupInfoList = new [] { new TargetGroupInfoProperty {\n            Name = \"name\"\n        } }\n    },\n    OnPremisesInstanceTagFilters = new [] { new TagFilterProperty {\n        Key = \"key\",\n        Type = \"type\",\n        Value = \"value\"\n    } },\n    OnPremisesTagSet = new OnPremisesTagSetProperty {\n        OnPremisesTagSetList = new [] { new OnPremisesTagSetListObjectProperty {\n            OnPremisesTagGroup = new [] { new TagFilterProperty {\n                Key = \"key\",\n                Type = \"type\",\n                Value = \"value\"\n            } }\n        } }\n    },\n    TriggerConfigurations = new [] { new TriggerConfigProperty {\n        TriggerEvents = new [] { \"triggerEvents\" },\n        TriggerName = \"triggerName\",\n        TriggerTargetArn = \"triggerTargetArn\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nCfnDeploymentGroupProps cfnDeploymentGroupProps = CfnDeploymentGroupProps.builder()\n        .applicationName(\"applicationName\")\n        .serviceRoleArn(\"serviceRoleArn\")\n\n        // the properties below are optional\n        .alarmConfiguration(AlarmConfigurationProperty.builder()\n                .alarms(List.of(AlarmProperty.builder()\n                        .name(\"name\")\n                        .build()))\n                .enabled(false)\n                .ignorePollAlarmFailure(false)\n                .build())\n        .autoRollbackConfiguration(AutoRollbackConfigurationProperty.builder()\n                .enabled(false)\n                .events(List.of(\"events\"))\n                .build())\n        .autoScalingGroups(List.of(\"autoScalingGroups\"))\n        .blueGreenDeploymentConfiguration(BlueGreenDeploymentConfigurationProperty.builder()\n                .deploymentReadyOption(DeploymentReadyOptionProperty.builder()\n                        .actionOnTimeout(\"actionOnTimeout\")\n                        .waitTimeInMinutes(123)\n                        .build())\n                .greenFleetProvisioningOption(GreenFleetProvisioningOptionProperty.builder()\n                        .action(\"action\")\n                        .build())\n                .terminateBlueInstancesOnDeploymentSuccess(BlueInstanceTerminationOptionProperty.builder()\n                        .action(\"action\")\n                        .terminationWaitTimeInMinutes(123)\n                        .build())\n                .build())\n        .deployment(DeploymentProperty.builder()\n                .revision(RevisionLocationProperty.builder()\n                        .gitHubLocation(GitHubLocationProperty.builder()\n                                .commitId(\"commitId\")\n                                .repository(\"repository\")\n                                .build())\n                        .revisionType(\"revisionType\")\n                        .s3Location(S3LocationProperty.builder()\n                                .bucket(\"bucket\")\n                                .key(\"key\")\n\n                                // the properties below are optional\n                                .bundleType(\"bundleType\")\n                                .eTag(\"eTag\")\n                                .version(\"version\")\n                                .build())\n                        .build())\n\n                // the properties below are optional\n                .description(\"description\")\n                .ignoreApplicationStopFailures(false)\n                .build())\n        .deploymentConfigName(\"deploymentConfigName\")\n        .deploymentGroupName(\"deploymentGroupName\")\n        .deploymentStyle(DeploymentStyleProperty.builder()\n                .deploymentOption(\"deploymentOption\")\n                .deploymentType(\"deploymentType\")\n                .build())\n        .ec2TagFilters(List.of(EC2TagFilterProperty.builder()\n                .key(\"key\")\n                .type(\"type\")\n                .value(\"value\")\n                .build()))\n        .ec2TagSet(EC2TagSetProperty.builder()\n                .ec2TagSetList(List.of(EC2TagSetListObjectProperty.builder()\n                        .ec2TagGroup(List.of(EC2TagFilterProperty.builder()\n                                .key(\"key\")\n                                .type(\"type\")\n                                .value(\"value\")\n                                .build()))\n                        .build()))\n                .build())\n        .ecsServices(List.of(ECSServiceProperty.builder()\n                .clusterName(\"clusterName\")\n                .serviceName(\"serviceName\")\n                .build()))\n        .loadBalancerInfo(LoadBalancerInfoProperty.builder()\n                .elbInfoList(List.of(ELBInfoProperty.builder()\n                        .name(\"name\")\n                        .build()))\n                .targetGroupInfoList(List.of(TargetGroupInfoProperty.builder()\n                        .name(\"name\")\n                        .build()))\n                .build())\n        .onPremisesInstanceTagFilters(List.of(TagFilterProperty.builder()\n                .key(\"key\")\n                .type(\"type\")\n                .value(\"value\")\n                .build()))\n        .onPremisesTagSet(OnPremisesTagSetProperty.builder()\n                .onPremisesTagSetList(List.of(OnPremisesTagSetListObjectProperty.builder()\n                        .onPremisesTagGroup(List.of(TagFilterProperty.builder()\n                                .key(\"key\")\n                                .type(\"type\")\n                                .value(\"value\")\n                                .build()))\n                        .build()))\n                .build())\n        .triggerConfigurations(List.of(TriggerConfigProperty.builder()\n                .triggerEvents(List.of(\"triggerEvents\"))\n                .triggerName(\"triggerName\")\n                .triggerTargetArn(\"triggerTargetArn\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst cfnDeploymentGroupProps: codedeploy.CfnDeploymentGroupProps = {\n  applicationName: 'applicationName',\n  serviceRoleArn: 'serviceRoleArn',\n\n  // the properties below are optional\n  alarmConfiguration: {\n    alarms: [{\n      name: 'name',\n    }],\n    enabled: false,\n    ignorePollAlarmFailure: false,\n  },\n  autoRollbackConfiguration: {\n    enabled: false,\n    events: ['events'],\n  },\n  autoScalingGroups: ['autoScalingGroups'],\n  blueGreenDeploymentConfiguration: {\n    deploymentReadyOption: {\n      actionOnTimeout: 'actionOnTimeout',\n      waitTimeInMinutes: 123,\n    },\n    greenFleetProvisioningOption: {\n      action: 'action',\n    },\n    terminateBlueInstancesOnDeploymentSuccess: {\n      action: 'action',\n      terminationWaitTimeInMinutes: 123,\n    },\n  },\n  deployment: {\n    revision: {\n      gitHubLocation: {\n        commitId: 'commitId',\n        repository: 'repository',\n      },\n      revisionType: 'revisionType',\n      s3Location: {\n        bucket: 'bucket',\n        key: 'key',\n\n        // the properties below are optional\n        bundleType: 'bundleType',\n        eTag: 'eTag',\n        version: 'version',\n      },\n    },\n\n    // the properties below are optional\n    description: 'description',\n    ignoreApplicationStopFailures: false,\n  },\n  deploymentConfigName: 'deploymentConfigName',\n  deploymentGroupName: 'deploymentGroupName',\n  deploymentStyle: {\n    deploymentOption: 'deploymentOption',\n    deploymentType: 'deploymentType',\n  },\n  ec2TagFilters: [{\n    key: 'key',\n    type: 'type',\n    value: 'value',\n  }],\n  ec2TagSet: {\n    ec2TagSetList: [{\n      ec2TagGroup: [{\n        key: 'key',\n        type: 'type',\n        value: 'value',\n      }],\n    }],\n  },\n  ecsServices: [{\n    clusterName: 'clusterName',\n    serviceName: 'serviceName',\n  }],\n  loadBalancerInfo: {\n    elbInfoList: [{\n      name: 'name',\n    }],\n    targetGroupInfoList: [{\n      name: 'name',\n    }],\n  },\n  onPremisesInstanceTagFilters: [{\n    key: 'key',\n    type: 'type',\n    value: 'value',\n  }],\n  onPremisesTagSet: {\n    onPremisesTagSetList: [{\n      onPremisesTagGroup: [{\n        key: 'key',\n        type: 'type',\n        value: 'value',\n      }],\n    }],\n  },\n  triggerConfigurations: [{\n    triggerEvents: ['triggerEvents'],\n    triggerName: 'triggerName',\n    triggerTargetArn: 'triggerTargetArn',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CfnDeploymentGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CfnDeploymentGroupProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnDeploymentGroupProps: codedeploy.CfnDeploymentGroupProps = {\n  applicationName: 'applicationName',\n  serviceRoleArn: 'serviceRoleArn',\n\n  // the properties below are optional\n  alarmConfiguration: {\n    alarms: [{\n      name: 'name',\n    }],\n    enabled: false,\n    ignorePollAlarmFailure: false,\n  },\n  autoRollbackConfiguration: {\n    enabled: false,\n    events: ['events'],\n  },\n  autoScalingGroups: ['autoScalingGroups'],\n  blueGreenDeploymentConfiguration: {\n    deploymentReadyOption: {\n      actionOnTimeout: 'actionOnTimeout',\n      waitTimeInMinutes: 123,\n    },\n    greenFleetProvisioningOption: {\n      action: 'action',\n    },\n    terminateBlueInstancesOnDeploymentSuccess: {\n      action: 'action',\n      terminationWaitTimeInMinutes: 123,\n    },\n  },\n  deployment: {\n    revision: {\n      gitHubLocation: {\n        commitId: 'commitId',\n        repository: 'repository',\n      },\n      revisionType: 'revisionType',\n      s3Location: {\n        bucket: 'bucket',\n        key: 'key',\n\n        // the properties below are optional\n        bundleType: 'bundleType',\n        eTag: 'eTag',\n        version: 'version',\n      },\n    },\n\n    // the properties below are optional\n    description: 'description',\n    ignoreApplicationStopFailures: false,\n  },\n  deploymentConfigName: 'deploymentConfigName',\n  deploymentGroupName: 'deploymentGroupName',\n  deploymentStyle: {\n    deploymentOption: 'deploymentOption',\n    deploymentType: 'deploymentType',\n  },\n  ec2TagFilters: [{\n    key: 'key',\n    type: 'type',\n    value: 'value',\n  }],\n  ec2TagSet: {\n    ec2TagSetList: [{\n      ec2TagGroup: [{\n        key: 'key',\n        type: 'type',\n        value: 'value',\n      }],\n    }],\n  },\n  ecsServices: [{\n    clusterName: 'clusterName',\n    serviceName: 'serviceName',\n  }],\n  loadBalancerInfo: {\n    elbInfoList: [{\n      name: 'name',\n    }],\n    targetGroupInfoList: [{\n      name: 'name',\n    }],\n  },\n  onPremisesInstanceTagFilters: [{\n    key: 'key',\n    type: 'type',\n    value: 'value',\n  }],\n  onPremisesTagSet: {\n    onPremisesTagSetList: [{\n      onPremisesTagGroup: [{\n        key: 'key',\n        type: 'type',\n        value: 'value',\n      }],\n    }],\n  },\n  triggerConfigurations: [{\n    triggerEvents: ['triggerEvents'],\n    triggerName: 'triggerName',\n    triggerTargetArn: 'triggerTargetArn',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 41,
        "75": 75,
        "91": 4,
        "153": 1,
        "169": 1,
        "192": 14,
        "193": 26,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 71,
        "290": 1
      },
      "fqnsFingerprint": "d10b7e0685d48e5b7c30e5608d5b04b17f018609e0ff8d68b2d5bdd35e15206d"
    },
    "4b8eb51c93e1f64c6cdf5034cc3c04c44e9c1db3be9ec1f973e22f4164a80e31": {
      "translations": {
        "python": {
          "source": "# application: codedeploy.LambdaApplication\n# alias: lambda.Alias\nconfig = codedeploy.CustomLambdaDeploymentConfig(self, \"CustomConfig\",\n    type=codedeploy.CustomLambdaDeploymentConfigType.CANARY,\n    interval=Duration.minutes(1),\n    percentage=5\n)\ndeployment_group = codedeploy.LambdaDeploymentGroup(self, \"BlueGreenDeployment\",\n    application=application,\n    alias=alias,\n    deployment_config=config\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaApplication application;\nAlias alias;\nCustomLambdaDeploymentConfig config = new CustomLambdaDeploymentConfig(this, \"CustomConfig\", new CustomLambdaDeploymentConfigProps {\n    Type = CustomLambdaDeploymentConfigType.CANARY,\n    Interval = Duration.Minutes(1),\n    Percentage = 5\n});\nLambdaDeploymentGroup deploymentGroup = new LambdaDeploymentGroup(this, \"BlueGreenDeployment\", new LambdaDeploymentGroupProps {\n    Application = application,\n    Alias = alias,\n    DeploymentConfig = config\n});",
          "version": "1"
        },
        "java": {
          "source": "LambdaApplication application;\nAlias alias;\nCustomLambdaDeploymentConfig config = CustomLambdaDeploymentConfig.Builder.create(this, \"CustomConfig\")\n        .type(CustomLambdaDeploymentConfigType.CANARY)\n        .interval(Duration.minutes(1))\n        .percentage(5)\n        .build();\nLambdaDeploymentGroup deploymentGroup = LambdaDeploymentGroup.Builder.create(this, \"BlueGreenDeployment\")\n        .application(application)\n        .alias(alias)\n        .deploymentConfig(config)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const config = new codedeploy.CustomLambdaDeploymentConfig(this, 'CustomConfig', {\n  type: codedeploy.CustomLambdaDeploymentConfigType.CANARY,\n  interval: Duration.minutes(1),\n  percentage: 5,\n});\n\ndeclare const application: codedeploy.LambdaApplication;\ndeclare const alias: lambda.Alias;\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  application,\n  alias,\n  deploymentConfig: config,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigProps",
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigType",
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigType#CANARY",
        "@aws-cdk/aws-codedeploy.ILambdaApplication",
        "@aws-cdk/aws-codedeploy.ILambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupProps",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const application: codedeploy.LambdaApplication;\ndeclare const alias: lambda.Alias;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst config = new codedeploy.CustomLambdaDeploymentConfig(this, 'CustomConfig', {\n  type: codedeploy.CustomLambdaDeploymentConfigType.CANARY,\n  interval: Duration.minutes(1),\n  percentage: 5,\n});\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  application,\n  alias,\n  deploymentConfig: config,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 24,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 4,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "54e8427a752d12b3ee8f90d563747cd7ecb79aadc50b0c52b2936f46b9be93c7"
    },
    "74bc06fb9202a2e27cd30dfcb4eb85d85000500a50b936b82bf61d4110270454": {
      "translations": {
        "python": {
          "source": "# application: codedeploy.LambdaApplication\n# alias: lambda.Alias\nconfig = codedeploy.CustomLambdaDeploymentConfig(self, \"CustomConfig\",\n    type=codedeploy.CustomLambdaDeploymentConfigType.CANARY,\n    interval=Duration.minutes(1),\n    percentage=5\n)\ndeployment_group = codedeploy.LambdaDeploymentGroup(self, \"BlueGreenDeployment\",\n    application=application,\n    alias=alias,\n    deployment_config=config\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaApplication application;\nAlias alias;\nCustomLambdaDeploymentConfig config = new CustomLambdaDeploymentConfig(this, \"CustomConfig\", new CustomLambdaDeploymentConfigProps {\n    Type = CustomLambdaDeploymentConfigType.CANARY,\n    Interval = Duration.Minutes(1),\n    Percentage = 5\n});\nLambdaDeploymentGroup deploymentGroup = new LambdaDeploymentGroup(this, \"BlueGreenDeployment\", new LambdaDeploymentGroupProps {\n    Application = application,\n    Alias = alias,\n    DeploymentConfig = config\n});",
          "version": "1"
        },
        "java": {
          "source": "LambdaApplication application;\nAlias alias;\nCustomLambdaDeploymentConfig config = CustomLambdaDeploymentConfig.Builder.create(this, \"CustomConfig\")\n        .type(CustomLambdaDeploymentConfigType.CANARY)\n        .interval(Duration.minutes(1))\n        .percentage(5)\n        .build();\nLambdaDeploymentGroup deploymentGroup = LambdaDeploymentGroup.Builder.create(this, \"BlueGreenDeployment\")\n        .application(application)\n        .alias(alias)\n        .deploymentConfig(config)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const config = new codedeploy.CustomLambdaDeploymentConfig(this, 'CustomConfig', {\n  type: codedeploy.CustomLambdaDeploymentConfigType.CANARY,\n  interval: Duration.minutes(1),\n  percentage: 5,\n});\n\ndeclare const application: codedeploy.LambdaApplication;\ndeclare const alias: lambda.Alias;\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  application,\n  alias,\n  deploymentConfig: config,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigProps",
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigType",
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigType#CANARY",
        "@aws-cdk/aws-codedeploy.ILambdaApplication",
        "@aws-cdk/aws-codedeploy.ILambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupProps",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const application: codedeploy.LambdaApplication;\ndeclare const alias: lambda.Alias;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst config = new codedeploy.CustomLambdaDeploymentConfig(this, 'CustomConfig', {\n  type: codedeploy.CustomLambdaDeploymentConfigType.CANARY,\n  interval: Duration.minutes(1),\n  percentage: 5,\n});\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  application,\n  alias,\n  deploymentConfig: config,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 24,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 4,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "54e8427a752d12b3ee8f90d563747cd7ecb79aadc50b0c52b2936f46b9be93c7"
    },
    "187f6e4aaae214cad92e17b9ec44a53914386eebe0d2ebaaa9a87cb6ebca760b": {
      "translations": {
        "python": {
          "source": "# application: codedeploy.LambdaApplication\n# alias: lambda.Alias\nconfig = codedeploy.CustomLambdaDeploymentConfig(self, \"CustomConfig\",\n    type=codedeploy.CustomLambdaDeploymentConfigType.CANARY,\n    interval=Duration.minutes(1),\n    percentage=5\n)\ndeployment_group = codedeploy.LambdaDeploymentGroup(self, \"BlueGreenDeployment\",\n    application=application,\n    alias=alias,\n    deployment_config=config\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaApplication application;\nAlias alias;\nCustomLambdaDeploymentConfig config = new CustomLambdaDeploymentConfig(this, \"CustomConfig\", new CustomLambdaDeploymentConfigProps {\n    Type = CustomLambdaDeploymentConfigType.CANARY,\n    Interval = Duration.Minutes(1),\n    Percentage = 5\n});\nLambdaDeploymentGroup deploymentGroup = new LambdaDeploymentGroup(this, \"BlueGreenDeployment\", new LambdaDeploymentGroupProps {\n    Application = application,\n    Alias = alias,\n    DeploymentConfig = config\n});",
          "version": "1"
        },
        "java": {
          "source": "LambdaApplication application;\nAlias alias;\nCustomLambdaDeploymentConfig config = CustomLambdaDeploymentConfig.Builder.create(this, \"CustomConfig\")\n        .type(CustomLambdaDeploymentConfigType.CANARY)\n        .interval(Duration.minutes(1))\n        .percentage(5)\n        .build();\nLambdaDeploymentGroup deploymentGroup = LambdaDeploymentGroup.Builder.create(this, \"BlueGreenDeployment\")\n        .application(application)\n        .alias(alias)\n        .deploymentConfig(config)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const config = new codedeploy.CustomLambdaDeploymentConfig(this, 'CustomConfig', {\n  type: codedeploy.CustomLambdaDeploymentConfigType.CANARY,\n  interval: Duration.minutes(1),\n  percentage: 5,\n});\n\ndeclare const application: codedeploy.LambdaApplication;\ndeclare const alias: lambda.Alias;\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  application,\n  alias,\n  deploymentConfig: config,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigProps",
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigType",
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigType#CANARY",
        "@aws-cdk/aws-codedeploy.ILambdaApplication",
        "@aws-cdk/aws-codedeploy.ILambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupProps",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const application: codedeploy.LambdaApplication;\ndeclare const alias: lambda.Alias;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst config = new codedeploy.CustomLambdaDeploymentConfig(this, 'CustomConfig', {\n  type: codedeploy.CustomLambdaDeploymentConfigType.CANARY,\n  interval: Duration.minutes(1),\n  percentage: 5,\n});\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  application,\n  alias,\n  deploymentConfig: config,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 24,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 4,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "54e8427a752d12b3ee8f90d563747cd7ecb79aadc50b0c52b2936f46b9be93c7"
    },
    "1598fa2ea2edf16ac4cff59bb2209346e57fa3e38e4b2eabd4961eb90f878ebc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\necs_application = codedeploy.EcsApplication(self, \"MyEcsApplication\",\n    application_name=\"applicationName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nEcsApplication ecsApplication = new EcsApplication(this, \"MyEcsApplication\", new EcsApplicationProps {\n    ApplicationName = \"applicationName\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nEcsApplication ecsApplication = EcsApplication.Builder.create(this, \"MyEcsApplication\")\n        .applicationName(\"applicationName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst ecsApplication = new codedeploy.EcsApplication(this, 'MyEcsApplication', /* all optional props */ {\n  applicationName: 'applicationName',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.EcsApplication"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.EcsApplication",
        "@aws-cdk/aws-codedeploy.EcsApplicationProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ecsApplication = new codedeploy.EcsApplication(this, 'MyEcsApplication', /* all optional props */ {\n  applicationName: 'applicationName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "db4ee89d8d89f1fb2bf7df207f1f2b0ebe0681419dda23bfc245f308517fa2af"
    },
    "6ba9bbd4257aed2790d032a92827033df48f5e600516258fc785d920a70de134": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\necs_application_props = codedeploy.EcsApplicationProps(\n    application_name=\"applicationName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nEcsApplicationProps ecsApplicationProps = new EcsApplicationProps {\n    ApplicationName = \"applicationName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nEcsApplicationProps ecsApplicationProps = EcsApplicationProps.builder()\n        .applicationName(\"applicationName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst ecsApplicationProps: codedeploy.EcsApplicationProps = {\n  applicationName: 'applicationName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.EcsApplicationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.EcsApplicationProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ecsApplicationProps: codedeploy.EcsApplicationProps = {\n  applicationName: 'applicationName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "f4b623a75ee97feccedb43b6d0c4ce861729aa7b7adf3dd1bfad1c26bb06e4a4"
    },
    "19dda8146bd780f8b9b40cec02e7d45ffbbbd908c483ffa2ec9a6e13fe563fdf": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\n# ecs_application: codedeploy.EcsApplication\n# ecs_deployment_config: codedeploy.IEcsDeploymentConfig\n\necs_deployment_group_attributes = codedeploy.EcsDeploymentGroupAttributes(\n    application=ecs_application,\n    deployment_group_name=\"deploymentGroupName\",\n\n    # the properties below are optional\n    deployment_config=ecs_deployment_config\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nEcsApplication ecsApplication;\nIEcsDeploymentConfig ecsDeploymentConfig;\n\nEcsDeploymentGroupAttributes ecsDeploymentGroupAttributes = new EcsDeploymentGroupAttributes {\n    Application = ecsApplication,\n    DeploymentGroupName = \"deploymentGroupName\",\n\n    // the properties below are optional\n    DeploymentConfig = ecsDeploymentConfig\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nEcsApplication ecsApplication;\nIEcsDeploymentConfig ecsDeploymentConfig;\n\nEcsDeploymentGroupAttributes ecsDeploymentGroupAttributes = EcsDeploymentGroupAttributes.builder()\n        .application(ecsApplication)\n        .deploymentGroupName(\"deploymentGroupName\")\n\n        // the properties below are optional\n        .deploymentConfig(ecsDeploymentConfig)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n\ndeclare const ecsApplication: codedeploy.EcsApplication;\ndeclare const ecsDeploymentConfig: codedeploy.IEcsDeploymentConfig;\nconst ecsDeploymentGroupAttributes: codedeploy.EcsDeploymentGroupAttributes = {\n  application: ecsApplication,\n  deploymentGroupName: 'deploymentGroupName',\n\n  // the properties below are optional\n  deploymentConfig: ecsDeploymentConfig,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.EcsDeploymentGroupAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.EcsDeploymentGroupAttributes",
        "@aws-cdk/aws-codedeploy.IEcsApplication",
        "@aws-cdk/aws-codedeploy.IEcsDeploymentConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n\ndeclare const ecsApplication: codedeploy.EcsApplication;\ndeclare const ecsDeploymentConfig: codedeploy.IEcsDeploymentConfig;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ecsDeploymentGroupAttributes: codedeploy.EcsDeploymentGroupAttributes = {\n  application: ecsApplication,\n  deploymentGroupName: 'deploymentGroupName',\n\n  // the properties below are optional\n  deploymentConfig: ecsDeploymentConfig,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "e6942e3fb1380202ed90c51748e8b61d419b89794177497466baa8bd20e8f01e"
    },
    "8df24555ff2c6dd97254baa02f1ec2f4baae476c51efbf17eb787dcf2c94c933": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_autoscaling as autoscaling\nimport aws_cdk.aws_cloudwatch as cloudwatch\n\n# application: codedeploy.ServerApplication\n# asg: autoscaling.AutoScalingGroup\n# alarm: cloudwatch.Alarm\n\ndeployment_group = codedeploy.ServerDeploymentGroup(self, \"CodeDeployDeploymentGroup\",\n    application=application,\n    deployment_group_name=\"MyDeploymentGroup\",\n    auto_scaling_groups=[asg],\n    # adds User Data that installs the CodeDeploy agent on your auto-scaling groups hosts\n    # default: true\n    install_agent=True,\n    # adds EC2 instances matching tags\n    ec2_instance_tags=codedeploy.InstanceTagSet({\n        # any instance with tags satisfying\n        # key1=v1 or key1=v2 or key2 (any value) or value v3 (any key)\n        # will match this group\n        \"key1\": [\"v1\", \"v2\"],\n        \"key2\": [],\n        \"\": [\"v3\"]\n    }),\n    # adds on-premise instances matching tags\n    on_premise_instance_tags=codedeploy.InstanceTagSet({\n        \"key1\": [\"v1\", \"v2\"]\n    }, {\n        \"key2\": [\"v3\"]\n    }),\n    # CloudWatch alarms\n    alarms=[alarm],\n    # whether to ignore failure to fetch the status of alarms from CloudWatch\n    # default: false\n    ignore_poll_alarms_failure=False,\n    # auto-rollback configuration\n    auto_rollback=codedeploy.AutoRollbackConfig(\n        failed_deployment=True,  # default: true\n        stopped_deployment=True,  # default: false\n        deployment_in_alarm=True\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.AutoScaling;\nusing Amazon.CDK.AWS.CloudWatch;\n\nServerApplication application;\nAutoScalingGroup asg;\nAlarm alarm;\n\nServerDeploymentGroup deploymentGroup = new ServerDeploymentGroup(this, \"CodeDeployDeploymentGroup\", new ServerDeploymentGroupProps {\n    Application = application,\n    DeploymentGroupName = \"MyDeploymentGroup\",\n    AutoScalingGroups = new [] { asg },\n    // adds User Data that installs the CodeDeploy agent on your auto-scaling groups hosts\n    // default: true\n    InstallAgent = true,\n    // adds EC2 instances matching tags\n    Ec2InstanceTags = new InstanceTagSet(new Dictionary<string, string[]> {\n        // any instance with tags satisfying\n        // key1=v1 or key1=v2 or key2 (any value) or value v3 (any key)\n        // will match this group\n        { \"key1\", new [] { \"v1\", \"v2\" } },\n        { \"key2\", new [] {  } },\n        { \"\", new [] { \"v3\" } }\n    }),\n    // adds on-premise instances matching tags\n    OnPremiseInstanceTags = new InstanceTagSet(new Dictionary<string, string[]> {\n        { \"key1\", new [] { \"v1\", \"v2\" } }\n    }, new Dictionary<string, string[]> {\n        { \"key2\", new [] { \"v3\" } }\n    }),\n    // CloudWatch alarms\n    Alarms = new [] { alarm },\n    // whether to ignore failure to fetch the status of alarms from CloudWatch\n    // default: false\n    IgnorePollAlarmsFailure = false,\n    // auto-rollback configuration\n    AutoRollback = new AutoRollbackConfig {\n        FailedDeployment = true,  // default: true\n        StoppedDeployment = true,  // default: false\n        DeploymentInAlarm = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.autoscaling.*;\nimport software.amazon.awscdk.services.cloudwatch.*;\n\nServerApplication application;\nAutoScalingGroup asg;\nAlarm alarm;\n\nServerDeploymentGroup deploymentGroup = ServerDeploymentGroup.Builder.create(this, \"CodeDeployDeploymentGroup\")\n        .application(application)\n        .deploymentGroupName(\"MyDeploymentGroup\")\n        .autoScalingGroups(List.of(asg))\n        // adds User Data that installs the CodeDeploy agent on your auto-scaling groups hosts\n        // default: true\n        .installAgent(true)\n        // adds EC2 instances matching tags\n        .ec2InstanceTags(new InstanceTagSet(Map.of(\n                // any instance with tags satisfying\n                // key1=v1 or key1=v2 or key2 (any value) or value v3 (any key)\n                // will match this group\n                \"key1\", List.of(\"v1\", \"v2\"),\n                \"key2\", List.of(),\n                \"\", List.of(\"v3\"))))\n        // adds on-premise instances matching tags\n        .onPremiseInstanceTags(new InstanceTagSet(Map.of(\n                \"key1\", List.of(\"v1\", \"v2\")), Map.of(\n                \"key2\", List.of(\"v3\"))))\n        // CloudWatch alarms\n        .alarms(List.of(alarm))\n        // whether to ignore failure to fetch the status of alarms from CloudWatch\n        // default: false\n        .ignorePollAlarmsFailure(false)\n        // auto-rollback configuration\n        .autoRollback(AutoRollbackConfig.builder()\n                .failedDeployment(true) // default: true\n                .stoppedDeployment(true) // default: false\n                .deploymentInAlarm(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const application: codedeploy.ServerApplication;\ndeclare const asg: autoscaling.AutoScalingGroup;\ndeclare const alarm: cloudwatch.Alarm;\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'CodeDeployDeploymentGroup', {\n  application,\n  deploymentGroupName: 'MyDeploymentGroup',\n  autoScalingGroups: [asg],\n  // adds User Data that installs the CodeDeploy agent on your auto-scaling groups hosts\n  // default: true\n  installAgent: true,\n  // adds EC2 instances matching tags\n  ec2InstanceTags: new codedeploy.InstanceTagSet(\n    {\n      // any instance with tags satisfying\n      // key1=v1 or key1=v2 or key2 (any value) or value v3 (any key)\n      // will match this group\n      'key1': ['v1', 'v2'],\n      'key2': [],\n      '': ['v3'],\n    },\n  ),\n  // adds on-premise instances matching tags\n  onPremiseInstanceTags: new codedeploy.InstanceTagSet(\n    // only instances with tags (key1=v1 or key1=v2) AND key2=v3 will match this set\n    {\n      'key1': ['v1', 'v2'],\n    },\n    {\n      'key2': ['v3'],\n    },\n  ),\n  // CloudWatch alarms\n  alarms: [alarm],\n  // whether to ignore failure to fetch the status of alarms from CloudWatch\n  // default: false\n  ignorePollAlarmsFailure: false,\n  // auto-rollback configuration\n  autoRollback: {\n    failedDeployment: true, // default: true\n    stoppedDeployment: true, // default: false\n    deploymentInAlarm: true, // default: true if you provided any alarms, false otherwise\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.InstanceTagSet"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.AutoRollbackConfig",
        "@aws-cdk/aws-codedeploy.IServerApplication",
        "@aws-cdk/aws-codedeploy.InstanceTagSet",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroup",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroupProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as autoscaling from '@aws-cdk/aws-autoscaling';\nimport * as cloudwatch from '@aws-cdk/aws-cloudwatch';\n\ndeclare const application: codedeploy.ServerApplication;\ndeclare const asg: autoscaling.AutoScalingGroup;\ndeclare const alarm: cloudwatch.Alarm;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'CodeDeployDeploymentGroup', {\n  application,\n  deploymentGroupName: 'MyDeploymentGroup',\n  autoScalingGroups: [asg],\n  // adds User Data that installs the CodeDeploy agent on your auto-scaling groups hosts\n  // default: true\n  installAgent: true,\n  // adds EC2 instances matching tags\n  ec2InstanceTags: new codedeploy.InstanceTagSet(\n    {\n      // any instance with tags satisfying\n      // key1=v1 or key1=v2 or key2 (any value) or value v3 (any key)\n      // will match this group\n      'key1': ['v1', 'v2'],\n      'key2': [],\n      '': ['v3'],\n    },\n  ),\n  // adds on-premise instances matching tags\n  onPremiseInstanceTags: new codedeploy.InstanceTagSet(\n    // only instances with tags (key1=v1 or key1=v2) AND key2=v3 will match this set\n    {\n      'key1': ['v1', 'v2'],\n    },\n    {\n      'key2': ['v3'],\n    },\n  ),\n  // CloudWatch alarms\n  alarms: [alarm],\n  // whether to ignore failure to fetch the status of alarms from CloudWatch\n  // default: false\n  ignorePollAlarmsFailure: false,\n  // auto-rollback configuration\n  autoRollback: {\n    failedDeployment: true, // default: true\n    stoppedDeployment: true, // default: false\n    deploymentInAlarm: true, // default: true if you provided any alarms, false otherwise\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 15,
        "75": 32,
        "91": 1,
        "104": 1,
        "106": 4,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 7,
        "193": 5,
        "194": 3,
        "197": 3,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 16,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "4b2956fd388c99821721ebf1ad71f79c53722a27070ad184192c7d24d8eef541"
    },
    "c0cd2f8704bf1b01d8fe3e735bb3d7eb63538ea1445c60b3e7f98774b8bb5f29": {
      "translations": {
        "python": {
          "source": "application = codedeploy.LambdaApplication(self, \"CodeDeployApplication\",\n    application_name=\"MyApplication\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaApplication application = new LambdaApplication(this, \"CodeDeployApplication\", new LambdaApplicationProps {\n    ApplicationName = \"MyApplication\"\n});",
          "version": "1"
        },
        "java": {
          "source": "LambdaApplication application = LambdaApplication.Builder.create(this, \"CodeDeployApplication\")\n        .applicationName(\"MyApplication\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const application = new codedeploy.LambdaApplication(this, 'CodeDeployApplication', {\n  applicationName: 'MyApplication', // optional property\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.LambdaApplication"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.LambdaApplication",
        "@aws-cdk/aws-codedeploy.LambdaApplicationProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst application = new codedeploy.LambdaApplication(this, 'CodeDeployApplication', {\n  applicationName: 'MyApplication', // optional property\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "534fb3dc87210efda2f5bfd15b601e60e1f2dede2703f114fd2828fe1439180d"
    },
    "dd45f5cd9546994d0af19ef0ba880e6e12be1f7733518629d17154d16a40f737": {
      "translations": {
        "python": {
          "source": "application = codedeploy.LambdaApplication(self, \"CodeDeployApplication\",\n    application_name=\"MyApplication\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaApplication application = new LambdaApplication(this, \"CodeDeployApplication\", new LambdaApplicationProps {\n    ApplicationName = \"MyApplication\"\n});",
          "version": "1"
        },
        "java": {
          "source": "LambdaApplication application = LambdaApplication.Builder.create(this, \"CodeDeployApplication\")\n        .applicationName(\"MyApplication\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const application = new codedeploy.LambdaApplication(this, 'CodeDeployApplication', {\n  applicationName: 'MyApplication', // optional property\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.LambdaApplicationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.LambdaApplication",
        "@aws-cdk/aws-codedeploy.LambdaApplicationProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst application = new codedeploy.LambdaApplication(this, 'CodeDeployApplication', {\n  applicationName: 'MyApplication', // optional property\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "534fb3dc87210efda2f5bfd15b601e60e1f2dede2703f114fd2828fe1439180d"
    },
    "d12e60c1f9f968a45313e45ab6b0c6bfb995c76d1fa36d47bb53338e4420b790": {
      "translations": {
        "python": {
          "source": "# my_application: codedeploy.LambdaApplication\n# func: lambda.Function\n\nversion = func.add_version(\"1\")\nversion1_alias = lambda_.Alias(self, \"alias\",\n    alias_name=\"prod\",\n    version=version\n)\n\ndeployment_group = codedeploy.LambdaDeploymentGroup(self, \"BlueGreenDeployment\",\n    application=my_application,  # optional property: one will be created for you if not provided\n    alias=version1_alias,\n    deployment_config=codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaApplication myApplication;\nFunction func;\n\nVersion version = func.AddVersion(\"1\");\nAlias version1Alias = new Alias(this, \"alias\", new AliasProps {\n    AliasName = \"prod\",\n    Version = version\n});\n\nLambdaDeploymentGroup deploymentGroup = new LambdaDeploymentGroup(this, \"BlueGreenDeployment\", new LambdaDeploymentGroupProps {\n    Application = myApplication,  // optional property: one will be created for you if not provided\n    Alias = version1Alias,\n    DeploymentConfig = LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE\n});",
          "version": "1"
        },
        "java": {
          "source": "LambdaApplication myApplication;\nFunction func;\n\nVersion version = func.addVersion(\"1\");\nAlias version1Alias = Alias.Builder.create(this, \"alias\")\n        .aliasName(\"prod\")\n        .version(version)\n        .build();\n\nLambdaDeploymentGroup deploymentGroup = LambdaDeploymentGroup.Builder.create(this, \"BlueGreenDeployment\")\n        .application(myApplication) // optional property: one will be created for you if not provided\n        .alias(version1Alias)\n        .deploymentConfig(LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myApplication: codedeploy.LambdaApplication;\ndeclare const func: lambda.Function;\nconst version = func.addVersion('1');\nconst version1Alias = new lambda.Alias(this, 'alias', {\n  aliasName: 'prod',\n  version,\n});\n\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  application: myApplication, // optional property: one will be created for you if not provided\n  alias: version1Alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.ILambdaApplication",
        "@aws-cdk/aws-codedeploy.ILambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig#LINEAR_10PERCENT_EVERY_1MINUTE",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupProps",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.Function#addVersion",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.Version",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myApplication: codedeploy.LambdaApplication;\ndeclare const func: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst version = func.addVersion('1');\nconst version1Alias = new lambda.Alias(this, 'alias', {\n  aliasName: 'prod',\n  version,\n});\n\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  application: myApplication, // optional property: one will be created for you if not provided\n  alias: version1Alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "810eab010540eb25c15461e327e1e3cb6b59d24d336d7964471e306c87b78a56"
    },
    "650a8217a4fe3b4bc6149c5a52189461312834eaaa3ff34a4001fcc2308bc16c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codedeploy as codedeploy\n\nlambda_deployment_config_import_props = codedeploy.LambdaDeploymentConfigImportProps(\n    deployment_config_name=\"deploymentConfigName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeDeploy;\n\nLambdaDeploymentConfigImportProps lambdaDeploymentConfigImportProps = new LambdaDeploymentConfigImportProps {\n    DeploymentConfigName = \"deploymentConfigName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codedeploy.*;\n\nLambdaDeploymentConfigImportProps lambdaDeploymentConfigImportProps = LambdaDeploymentConfigImportProps.builder()\n        .deploymentConfigName(\"deploymentConfigName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nconst lambdaDeploymentConfigImportProps: codedeploy.LambdaDeploymentConfigImportProps = {\n  deploymentConfigName: 'deploymentConfigName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.LambdaDeploymentConfigImportProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfigImportProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst lambdaDeploymentConfigImportProps: codedeploy.LambdaDeploymentConfigImportProps = {\n  deploymentConfigName: 'deploymentConfigName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "1d845ae54d2b10ff350aad04eb4940516471f19948d10f4cb3a6523314c3fb24"
    },
    "b555d011fac4485022ba28a16c6cbfeb1c58519fc61d203ae22b136290d9b527": {
      "translations": {
        "python": {
          "source": "# application: codedeploy.LambdaApplication\n# alias: lambda.Alias\nconfig = codedeploy.CustomLambdaDeploymentConfig(self, \"CustomConfig\",\n    type=codedeploy.CustomLambdaDeploymentConfigType.CANARY,\n    interval=Duration.minutes(1),\n    percentage=5\n)\ndeployment_group = codedeploy.LambdaDeploymentGroup(self, \"BlueGreenDeployment\",\n    application=application,\n    alias=alias,\n    deployment_config=config\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaApplication application;\nAlias alias;\nCustomLambdaDeploymentConfig config = new CustomLambdaDeploymentConfig(this, \"CustomConfig\", new CustomLambdaDeploymentConfigProps {\n    Type = CustomLambdaDeploymentConfigType.CANARY,\n    Interval = Duration.Minutes(1),\n    Percentage = 5\n});\nLambdaDeploymentGroup deploymentGroup = new LambdaDeploymentGroup(this, \"BlueGreenDeployment\", new LambdaDeploymentGroupProps {\n    Application = application,\n    Alias = alias,\n    DeploymentConfig = config\n});",
          "version": "1"
        },
        "java": {
          "source": "LambdaApplication application;\nAlias alias;\nCustomLambdaDeploymentConfig config = CustomLambdaDeploymentConfig.Builder.create(this, \"CustomConfig\")\n        .type(CustomLambdaDeploymentConfigType.CANARY)\n        .interval(Duration.minutes(1))\n        .percentage(5)\n        .build();\nLambdaDeploymentGroup deploymentGroup = LambdaDeploymentGroup.Builder.create(this, \"BlueGreenDeployment\")\n        .application(application)\n        .alias(alias)\n        .deploymentConfig(config)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const config = new codedeploy.CustomLambdaDeploymentConfig(this, 'CustomConfig', {\n  type: codedeploy.CustomLambdaDeploymentConfigType.CANARY,\n  interval: Duration.minutes(1),\n  percentage: 5,\n});\n\ndeclare const application: codedeploy.LambdaApplication;\ndeclare const alias: lambda.Alias;\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  application,\n  alias,\n  deploymentConfig: config,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigProps",
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigType",
        "@aws-cdk/aws-codedeploy.CustomLambdaDeploymentConfigType#CANARY",
        "@aws-cdk/aws-codedeploy.ILambdaApplication",
        "@aws-cdk/aws-codedeploy.ILambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupProps",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const application: codedeploy.LambdaApplication;\ndeclare const alias: lambda.Alias;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst config = new codedeploy.CustomLambdaDeploymentConfig(this, 'CustomConfig', {\n  type: codedeploy.CustomLambdaDeploymentConfigType.CANARY,\n  interval: Duration.minutes(1),\n  percentage: 5,\n});\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  application,\n  alias,\n  deploymentConfig: config,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 2,
        "75": 24,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 4,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "54e8427a752d12b3ee8f90d563747cd7ecb79aadc50b0c52b2936f46b9be93c7"
    },
    "b3e7ea81eaf40a3ddf779473fce878ca54749daee9ea9af2fe43f53161369d5a": {
      "translations": {
        "python": {
          "source": "# application: codedeploy.LambdaApplication\n\ndeployment_group = codedeploy.LambdaDeploymentGroup.from_lambda_deployment_group_attributes(self, \"ExistingCodeDeployDeploymentGroup\",\n    application=application,\n    deployment_group_name=\"MyExistingDeploymentGroup\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaApplication application;\n\nILambdaDeploymentGroup deploymentGroup = LambdaDeploymentGroup.FromLambdaDeploymentGroupAttributes(this, \"ExistingCodeDeployDeploymentGroup\", new LambdaDeploymentGroupAttributes {\n    Application = application,\n    DeploymentGroupName = \"MyExistingDeploymentGroup\"\n});",
          "version": "1"
        },
        "java": {
          "source": "LambdaApplication application;\n\nILambdaDeploymentGroup deploymentGroup = LambdaDeploymentGroup.fromLambdaDeploymentGroupAttributes(this, \"ExistingCodeDeployDeploymentGroup\", LambdaDeploymentGroupAttributes.builder()\n        .application(application)\n        .deploymentGroupName(\"MyExistingDeploymentGroup\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const application: codedeploy.LambdaApplication;\nconst deploymentGroup = codedeploy.LambdaDeploymentGroup.fromLambdaDeploymentGroupAttributes(this, 'ExistingCodeDeployDeploymentGroup', {\n  application,\n  deploymentGroupName: 'MyExistingDeploymentGroup',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.ILambdaApplication",
        "@aws-cdk/aws-codedeploy.ILambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup#fromLambdaDeploymentGroupAttributes",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupAttributes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const application: codedeploy.LambdaApplication;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst deploymentGroup = codedeploy.LambdaDeploymentGroup.fromLambdaDeploymentGroupAttributes(this, 'ExistingCodeDeployDeploymentGroup', {\n  application,\n  deploymentGroupName: 'MyExistingDeploymentGroup',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "6736baec5eafee30497ea3b60d8f8c9c303c5c1c74b3ace6529feff741fb1d80"
    },
    "ee8de33dc856bffc9a027c3e79944dafc97f9c1b39bdf133d406226f22e3576b": {
      "translations": {
        "python": {
          "source": "# my_application: codedeploy.LambdaApplication\n# func: lambda.Function\n\nversion = func.add_version(\"1\")\nversion1_alias = lambda_.Alias(self, \"alias\",\n    alias_name=\"prod\",\n    version=version\n)\n\ndeployment_group = codedeploy.LambdaDeploymentGroup(self, \"BlueGreenDeployment\",\n    application=my_application,  # optional property: one will be created for you if not provided\n    alias=version1_alias,\n    deployment_config=codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "LambdaApplication myApplication;\nFunction func;\n\nVersion version = func.AddVersion(\"1\");\nAlias version1Alias = new Alias(this, \"alias\", new AliasProps {\n    AliasName = \"prod\",\n    Version = version\n});\n\nLambdaDeploymentGroup deploymentGroup = new LambdaDeploymentGroup(this, \"BlueGreenDeployment\", new LambdaDeploymentGroupProps {\n    Application = myApplication,  // optional property: one will be created for you if not provided\n    Alias = version1Alias,\n    DeploymentConfig = LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE\n});",
          "version": "1"
        },
        "java": {
          "source": "LambdaApplication myApplication;\nFunction func;\n\nVersion version = func.addVersion(\"1\");\nAlias version1Alias = Alias.Builder.create(this, \"alias\")\n        .aliasName(\"prod\")\n        .version(version)\n        .build();\n\nLambdaDeploymentGroup deploymentGroup = LambdaDeploymentGroup.Builder.create(this, \"BlueGreenDeployment\")\n        .application(myApplication) // optional property: one will be created for you if not provided\n        .alias(version1Alias)\n        .deploymentConfig(LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const myApplication: codedeploy.LambdaApplication;\ndeclare const func: lambda.Function;\nconst version = func.addVersion('1');\nconst version1Alias = new lambda.Alias(this, 'alias', {\n  aliasName: 'prod',\n  version,\n});\n\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  application: myApplication, // optional property: one will be created for you if not provided\n  alias: version1Alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.ILambdaApplication",
        "@aws-cdk/aws-codedeploy.ILambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig#LINEAR_10PERCENT_EVERY_1MINUTE",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroup",
        "@aws-cdk/aws-codedeploy.LambdaDeploymentGroupProps",
        "@aws-cdk/aws-lambda.Alias",
        "@aws-cdk/aws-lambda.AliasProps",
        "@aws-cdk/aws-lambda.Function#addVersion",
        "@aws-cdk/aws-lambda.IVersion",
        "@aws-cdk/aws-lambda.Version",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const myApplication: codedeploy.LambdaApplication;\ndeclare const func: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst version = func.addVersion('1');\nconst version1Alias = new lambda.Alias(this, 'alias', {\n  aliasName: 'prod',\n  version,\n});\n\nconst deploymentGroup = new codedeploy.LambdaDeploymentGroup(this, 'BlueGreenDeployment', {\n  application: myApplication, // optional property: one will be created for you if not provided\n  alias: version1Alias,\n  deploymentConfig: codedeploy.LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "104": 2,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 2,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 4,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "810eab010540eb25c15461e327e1e3cb6b59d24d336d7964471e306c87b78a56"
    },
    "b21145ec9b438a134d6e901eb97c58ca18f626fe8203b9150ce7e633fc0d8015": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancing as elb\n\n# lb: elb.LoadBalancer\n\nlb.add_listener(\n    external_port=80\n)\n\ndeployment_group = codedeploy.ServerDeploymentGroup(self, \"DeploymentGroup\",\n    load_balancer=codedeploy.LoadBalancer.classic(lb)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancing;\n\nLoadBalancer lb;\n\nlb.AddListener(new LoadBalancerListener {\n    ExternalPort = 80\n});\n\nServerDeploymentGroup deploymentGroup = new ServerDeploymentGroup(this, \"DeploymentGroup\", new ServerDeploymentGroupProps {\n    LoadBalancer = LoadBalancer.Classic(lb)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancing.*;\n\nLoadBalancer lb;\n\nlb.addListener(LoadBalancerListener.builder()\n        .externalPort(80)\n        .build());\n\nServerDeploymentGroup deploymentGroup = ServerDeploymentGroup.Builder.create(this, \"DeploymentGroup\")\n        .loadBalancer(LoadBalancer.classic(lb))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const lb: elb.LoadBalancer;\nlb.addListener({\n  externalPort: 80,\n});\n\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'DeploymentGroup', {\n  loadBalancer: codedeploy.LoadBalancer.classic(lb),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.LoadBalancer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.LoadBalancer",
        "@aws-cdk/aws-codedeploy.LoadBalancer#classic",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroup",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroupProps",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const lb: elb.LoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nlb.addListener({\n  externalPort: 80,\n});\n\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'DeploymentGroup', {\n  loadBalancer: codedeploy.LoadBalancer.classic(lb),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "5d4258b1f12d045b7caf513f7849e3b60451e940235259983b2ba2b2c2622643"
    },
    "5c90aebf726e711e0cba62f692400334ca29153199ab686bf9705cb45ca9afd6": {
      "translations": {
        "python": {
          "source": "deployment_config = codedeploy.ServerDeploymentConfig(self, \"DeploymentConfiguration\",\n    deployment_config_name=\"MyDeploymentConfiguration\",  # optional property\n    # one of these is required, but both cannot be specified at the same time\n    minimum_healthy_hosts=codedeploy.MinimumHealthyHosts.count(2)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ServerDeploymentConfig deploymentConfig = new ServerDeploymentConfig(this, \"DeploymentConfiguration\", new ServerDeploymentConfigProps {\n    DeploymentConfigName = \"MyDeploymentConfiguration\",  // optional property\n    // one of these is required, but both cannot be specified at the same time\n    MinimumHealthyHosts = MinimumHealthyHosts.Count(2)\n});",
          "version": "1"
        },
        "java": {
          "source": "ServerDeploymentConfig deploymentConfig = ServerDeploymentConfig.Builder.create(this, \"DeploymentConfiguration\")\n        .deploymentConfigName(\"MyDeploymentConfiguration\") // optional property\n        // one of these is required, but both cannot be specified at the same time\n        .minimumHealthyHosts(MinimumHealthyHosts.count(2))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const deploymentConfig = new codedeploy.ServerDeploymentConfig(this, 'DeploymentConfiguration', {\n  deploymentConfigName: 'MyDeploymentConfiguration', // optional property\n  // one of these is required, but both cannot be specified at the same time\n  minimumHealthyHosts: codedeploy.MinimumHealthyHosts.count(2),\n  // minimumHealthyHosts: codedeploy.MinimumHealthyHosts.percentage(75),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.MinimumHealthyHosts"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.MinimumHealthyHosts",
        "@aws-cdk/aws-codedeploy.MinimumHealthyHosts#count",
        "@aws-cdk/aws-codedeploy.ServerDeploymentConfig",
        "@aws-cdk/aws-codedeploy.ServerDeploymentConfigProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst deploymentConfig = new codedeploy.ServerDeploymentConfig(this, 'DeploymentConfiguration', {\n  deploymentConfigName: 'MyDeploymentConfiguration', // optional property\n  // one of these is required, but both cannot be specified at the same time\n  minimumHealthyHosts: codedeploy.MinimumHealthyHosts.count(2),\n  // minimumHealthyHosts: codedeploy.MinimumHealthyHosts.percentage(75),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "033e628874506ae3477f142f7ce63ab725aae572a1217d542e8c5b00182d6912"
    },
    "377b407d91ea3e152f2e959521f540b1c59e02ff127ee7e9659aa94c4eedb91b": {
      "translations": {
        "python": {
          "source": "application = codedeploy.ServerApplication(self, \"CodeDeployApplication\",\n    application_name=\"MyApplication\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ServerApplication application = new ServerApplication(this, \"CodeDeployApplication\", new ServerApplicationProps {\n    ApplicationName = \"MyApplication\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ServerApplication application = ServerApplication.Builder.create(this, \"CodeDeployApplication\")\n        .applicationName(\"MyApplication\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const application = new codedeploy.ServerApplication(this, 'CodeDeployApplication', {\n  applicationName: 'MyApplication', // optional property\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.ServerApplication"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.ServerApplication",
        "@aws-cdk/aws-codedeploy.ServerApplicationProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst application = new codedeploy.ServerApplication(this, 'CodeDeployApplication', {\n  applicationName: 'MyApplication', // optional property\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "3078f11f6bb14677e31fe7ecae2c4a6a1c3cdbe279a912f8fc13a6981d224f00"
    },
    "08e9415d8aaee3055ad6e0e2fd63f94ee3a1e9218be8691640b3d70543cdb723": {
      "translations": {
        "python": {
          "source": "application = codedeploy.ServerApplication(self, \"CodeDeployApplication\",\n    application_name=\"MyApplication\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ServerApplication application = new ServerApplication(this, \"CodeDeployApplication\", new ServerApplicationProps {\n    ApplicationName = \"MyApplication\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ServerApplication application = ServerApplication.Builder.create(this, \"CodeDeployApplication\")\n        .applicationName(\"MyApplication\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const application = new codedeploy.ServerApplication(this, 'CodeDeployApplication', {\n  applicationName: 'MyApplication', // optional property\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.ServerApplicationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.ServerApplication",
        "@aws-cdk/aws-codedeploy.ServerApplicationProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst application = new codedeploy.ServerApplication(this, 'CodeDeployApplication', {\n  applicationName: 'MyApplication', // optional property\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "3078f11f6bb14677e31fe7ecae2c4a6a1c3cdbe279a912f8fc13a6981d224f00"
    },
    "add9f51c6c19e0d26181bfa94e44cd9072369d0e54a83f9f6608b5e629e0a5d0": {
      "translations": {
        "python": {
          "source": "deployment_group = codedeploy.ServerDeploymentGroup(self, \"CodeDeployDeploymentGroup\",\n    deployment_config=codedeploy.ServerDeploymentConfig.ALL_AT_ONCE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ServerDeploymentGroup deploymentGroup = new ServerDeploymentGroup(this, \"CodeDeployDeploymentGroup\", new ServerDeploymentGroupProps {\n    DeploymentConfig = ServerDeploymentConfig.ALL_AT_ONCE\n});",
          "version": "1"
        },
        "java": {
          "source": "ServerDeploymentGroup deploymentGroup = ServerDeploymentGroup.Builder.create(this, \"CodeDeployDeploymentGroup\")\n        .deploymentConfig(ServerDeploymentConfig.ALL_AT_ONCE)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'CodeDeployDeploymentGroup', {\n  deploymentConfig: codedeploy.ServerDeploymentConfig.ALL_AT_ONCE,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.ServerDeploymentConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.IServerDeploymentConfig",
        "@aws-cdk/aws-codedeploy.ServerDeploymentConfig",
        "@aws-cdk/aws-codedeploy.ServerDeploymentConfig#ALL_AT_ONCE",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroup",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroupProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'CodeDeployDeploymentGroup', {\n  deploymentConfig: codedeploy.ServerDeploymentConfig.ALL_AT_ONCE,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "930e322a06a28f8a6bc69acf191144a58f33e4e029cca424bdac5a287d70ef3b"
    },
    "7e6f6ce1e8945856cb50bbede8aad58ecf16cdce4cabd3472445e04e31d7d1cf": {
      "translations": {
        "python": {
          "source": "deployment_config = codedeploy.ServerDeploymentConfig(self, \"DeploymentConfiguration\",\n    deployment_config_name=\"MyDeploymentConfiguration\",  # optional property\n    # one of these is required, but both cannot be specified at the same time\n    minimum_healthy_hosts=codedeploy.MinimumHealthyHosts.count(2)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ServerDeploymentConfig deploymentConfig = new ServerDeploymentConfig(this, \"DeploymentConfiguration\", new ServerDeploymentConfigProps {\n    DeploymentConfigName = \"MyDeploymentConfiguration\",  // optional property\n    // one of these is required, but both cannot be specified at the same time\n    MinimumHealthyHosts = MinimumHealthyHosts.Count(2)\n});",
          "version": "1"
        },
        "java": {
          "source": "ServerDeploymentConfig deploymentConfig = ServerDeploymentConfig.Builder.create(this, \"DeploymentConfiguration\")\n        .deploymentConfigName(\"MyDeploymentConfiguration\") // optional property\n        // one of these is required, but both cannot be specified at the same time\n        .minimumHealthyHosts(MinimumHealthyHosts.count(2))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const deploymentConfig = new codedeploy.ServerDeploymentConfig(this, 'DeploymentConfiguration', {\n  deploymentConfigName: 'MyDeploymentConfiguration', // optional property\n  // one of these is required, but both cannot be specified at the same time\n  minimumHealthyHosts: codedeploy.MinimumHealthyHosts.count(2),\n  // minimumHealthyHosts: codedeploy.MinimumHealthyHosts.percentage(75),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.ServerDeploymentConfigProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.MinimumHealthyHosts",
        "@aws-cdk/aws-codedeploy.MinimumHealthyHosts#count",
        "@aws-cdk/aws-codedeploy.ServerDeploymentConfig",
        "@aws-cdk/aws-codedeploy.ServerDeploymentConfigProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst deploymentConfig = new codedeploy.ServerDeploymentConfig(this, 'DeploymentConfiguration', {\n  deploymentConfigName: 'MyDeploymentConfiguration', // optional property\n  // one of these is required, but both cannot be specified at the same time\n  minimumHealthyHosts: codedeploy.MinimumHealthyHosts.count(2),\n  // minimumHealthyHosts: codedeploy.MinimumHealthyHosts.percentage(75),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 8,
        "104": 1,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 2
      },
      "fqnsFingerprint": "033e628874506ae3477f142f7ce63ab725aae572a1217d542e8c5b00182d6912"
    },
    "0bbf7d7958b2b1aaf35809beba1c533de195ae5f9c39fc0ccfed4036337e81c6": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancing as elb\n\n# lb: elb.LoadBalancer\n\nlb.add_listener(\n    external_port=80\n)\n\ndeployment_group = codedeploy.ServerDeploymentGroup(self, \"DeploymentGroup\",\n    load_balancer=codedeploy.LoadBalancer.classic(lb)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancing;\n\nLoadBalancer lb;\n\nlb.AddListener(new LoadBalancerListener {\n    ExternalPort = 80\n});\n\nServerDeploymentGroup deploymentGroup = new ServerDeploymentGroup(this, \"DeploymentGroup\", new ServerDeploymentGroupProps {\n    LoadBalancer = LoadBalancer.Classic(lb)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancing.*;\n\nLoadBalancer lb;\n\nlb.addListener(LoadBalancerListener.builder()\n        .externalPort(80)\n        .build());\n\nServerDeploymentGroup deploymentGroup = ServerDeploymentGroup.Builder.create(this, \"DeploymentGroup\")\n        .loadBalancer(LoadBalancer.classic(lb))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const lb: elb.LoadBalancer;\nlb.addListener({\n  externalPort: 80,\n});\n\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'DeploymentGroup', {\n  loadBalancer: codedeploy.LoadBalancer.classic(lb),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.ServerDeploymentGroup"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.LoadBalancer",
        "@aws-cdk/aws-codedeploy.LoadBalancer#classic",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroup",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroupProps",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancing.LoadBalancerListener",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elb from '@aws-cdk/aws-elasticloadbalancing';\n\ndeclare const lb: elb.LoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nlb.addListener({\n  externalPort: 80,\n});\n\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'DeploymentGroup', {\n  loadBalancer: codedeploy.LoadBalancer.classic(lb),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 4,
        "196": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "5d4258b1f12d045b7caf513f7849e3b60451e940235259983b2ba2b2c2622643"
    },
    "3b74f5fb129d23705e99d9b20055e74e14939bb794e34f731d18770759d7f6dd": {
      "translations": {
        "python": {
          "source": "# application: codedeploy.ServerApplication\n\ndeployment_group = codedeploy.ServerDeploymentGroup.from_server_deployment_group_attributes(self, \"ExistingCodeDeployDeploymentGroup\",\n    application=application,\n    deployment_group_name=\"MyExistingDeploymentGroup\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ServerApplication application;\n\nIServerDeploymentGroup deploymentGroup = ServerDeploymentGroup.FromServerDeploymentGroupAttributes(this, \"ExistingCodeDeployDeploymentGroup\", new ServerDeploymentGroupAttributes {\n    Application = application,\n    DeploymentGroupName = \"MyExistingDeploymentGroup\"\n});",
          "version": "1"
        },
        "java": {
          "source": "ServerApplication application;\n\nIServerDeploymentGroup deploymentGroup = ServerDeploymentGroup.fromServerDeploymentGroupAttributes(this, \"ExistingCodeDeployDeploymentGroup\", ServerDeploymentGroupAttributes.builder()\n        .application(application)\n        .deploymentGroupName(\"MyExistingDeploymentGroup\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const application: codedeploy.ServerApplication;\nconst deploymentGroup = codedeploy.ServerDeploymentGroup.fromServerDeploymentGroupAttributes(\n  this,\n  'ExistingCodeDeployDeploymentGroup', {\n    application,\n    deploymentGroupName: 'MyExistingDeploymentGroup',\n  },\n);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.ServerDeploymentGroupAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.IServerApplication",
        "@aws-cdk/aws-codedeploy.IServerDeploymentGroup",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroup",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroup#fromServerDeploymentGroupAttributes",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroupAttributes",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const application: codedeploy.ServerApplication;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst deploymentGroup = codedeploy.ServerDeploymentGroup.fromServerDeploymentGroupAttributes(\n  this,\n  'ExistingCodeDeployDeploymentGroup', {\n    application,\n    deploymentGroupName: 'MyExistingDeploymentGroup',\n  },\n);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "9c0e38bcdb0ba14a4fbaf7ae3caa5496d3c0db1b143b2050856d017343230cec"
    },
    "d4863e404774a5243a1c34153d3f3f3403762db25f3dad4cd041c8d46b47b662": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n# alb: elbv2.ApplicationLoadBalancer\n\nlistener = alb.add_listener(\"Listener\", port=80)\ntarget_group = listener.add_targets(\"Fleet\", port=80)\n\ndeployment_group = codedeploy.ServerDeploymentGroup(self, \"DeploymentGroup\",\n    load_balancer=codedeploy.LoadBalancer.application(target_group)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ElasticLoadBalancingV2;\n\nApplicationLoadBalancer alb;\n\nApplicationListener listener = alb.AddListener(\"Listener\", new BaseApplicationListenerProps { Port = 80 });\nApplicationTargetGroup targetGroup = listener.AddTargets(\"Fleet\", new AddApplicationTargetsProps { Port = 80 });\n\nServerDeploymentGroup deploymentGroup = new ServerDeploymentGroup(this, \"DeploymentGroup\", new ServerDeploymentGroupProps {\n    LoadBalancer = LoadBalancer.Application(targetGroup)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.elasticloadbalancingv2.*;\n\nApplicationLoadBalancer alb;\n\nApplicationListener listener = alb.addListener(\"Listener\", BaseApplicationListenerProps.builder().port(80).build());\nApplicationTargetGroup targetGroup = listener.addTargets(\"Fleet\", AddApplicationTargetsProps.builder().port(80).build());\n\nServerDeploymentGroup deploymentGroup = ServerDeploymentGroup.Builder.create(this, \"DeploymentGroup\")\n        .loadBalancer(LoadBalancer.application(targetGroup))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\ndeclare const alb: elbv2.ApplicationLoadBalancer;\nconst listener = alb.addListener('Listener', { port: 80 });\nconst targetGroup = listener.addTargets('Fleet', { port: 80 });\n\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'DeploymentGroup', {\n  loadBalancer: codedeploy.LoadBalancer.application(targetGroup),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-codedeploy.ServerDeploymentGroupProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codedeploy.LoadBalancer",
        "@aws-cdk/aws-codedeploy.LoadBalancer#application",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroup",
        "@aws-cdk/aws-codedeploy.ServerDeploymentGroupProps",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationTargetGroup",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationTargetGroup",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\n\ndeclare const alb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as codedeploy from '@aws-cdk/aws-codedeploy';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst listener = alb.addListener('Listener', { port: 80 });\nconst targetGroup = listener.addTargets('Fleet', { port: 80 });\n\nconst deploymentGroup = new codedeploy.ServerDeploymentGroup(this, 'DeploymentGroup', {\n  loadBalancer: codedeploy.LoadBalancer.application(targetGroup),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 4,
        "75": 20,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 5,
        "196": 3,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f16f530248ea7edc1d8745f213aaf2b6ea42968f4fe1bb1a6a104c6394072c69"
    }
  }
}
