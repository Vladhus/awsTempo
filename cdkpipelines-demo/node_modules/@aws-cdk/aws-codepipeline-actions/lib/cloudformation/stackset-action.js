"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudFormationDeployStackSetAction = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const codepipeline = require("@aws-cdk/aws-codepipeline");
const action_1 = require("../action");
const common_1 = require("../common");
const singleton_policy_1 = require("./private/singleton-policy");
const stackset_types_1 = require("./stackset-types");
/**
 * CodePipeline action to deploy a stackset.
 *
 * CodePipeline offers the ability to perform AWS CloudFormation StackSets
 * operations as part of your CI/CD process. You use a stack set to create
 * stacks in AWS accounts across AWS Regions by using a single AWS
 * CloudFormation template. All the resources included in each stack are defined
 * by the stack setâ€™s AWS CloudFormation template. When you create the stack
 * set, you specify the template to use, as well as any parameters and
 * capabilities that the template requires.
 *
 * For more information about concepts for AWS CloudFormation StackSets, see
 * [StackSets
 * concepts](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html)
 * in the AWS CloudFormation User Guide.
 *
 * If you use this action to make an update that includes adding stack
 * instances, the new instances are deployed first and the update is completed
 * last. The new instances first receive the old version, and then the update is
 * applied to all instances.
 *
 * As a best practice, you should construct your pipeline so that the stack set
 * is created and initially deploys to a subset or a single instance. After you
 * test your deployment and view the generated stack set, then add the
 * CloudFormationStackInstances action so that the remaining instances are
 * created and updated.
 */
class CloudFormationDeployStackSetAction extends action_1.Action {
    constructor(props) {
        var _b, _c, _d, _e, _f, _g;
        super({
            ...props,
            region: props.stackSetRegion,
            provider: 'CloudFormationStackSet',
            category: codepipeline.ActionCategory.DEPLOY,
            artifactBounds: {
                minInputs: 1,
                maxInputs: 3,
                minOutputs: 0,
                maxOutputs: 0,
            },
            inputs: [
                ...(_b = props.template._artifactsReferenced) !== null && _b !== void 0 ? _b : [],
                ...(_d = (_c = props.parameters) === null || _c === void 0 ? void 0 : _c._artifactsReferenced) !== null && _d !== void 0 ? _d : [],
                ...(_f = (_e = props.stackInstances) === null || _e === void 0 ? void 0 : _e._artifactsReferenced) !== null && _f !== void 0 ? _f : [],
            ],
        });
        jsiiDeprecationWarnings._aws_cdk_aws_codepipeline_actions_CloudFormationDeployStackSetActionProps(props);
        this.props = props;
        this.deploymentModel = (_g = props.deploymentModel) !== null && _g !== void 0 ? _g : stackset_types_1.StackSetDeploymentModel.selfManaged();
        common_1.validatePercentage('failureTolerancePercentage', props.failureTolerancePercentage);
        common_1.validatePercentage('maxAccountConcurrencyPercentage', props.maxAccountConcurrencyPercentage);
    }
    bound(scope, _stage, options) {
        var _b, _c, _d, _e;
        const singletonPolicy = singleton_policy_1.SingletonPolicy.forRole(options.role);
        singletonPolicy.grantCreateUpdateStackSet(this.props);
        const instancesResult = (_b = this.props.stackInstances) === null || _b === void 0 ? void 0 : _b._bind(scope);
        const permissionModelBind = (_c = this.deploymentModel) === null || _c === void 0 ? void 0 : _c._bind(scope);
        for (const role of (_d = permissionModelBind === null || permissionModelBind === void 0 ? void 0 : permissionModelBind.passedRoles) !== null && _d !== void 0 ? _d : []) {
            singletonPolicy.grantPassRole(role);
        }
        if ((this.actionProperties.inputs || []).length > 0) {
            options.bucket.grantRead(singletonPolicy);
        }
        return {
            configuration: {
                StackSetName: this.props.stackSetName,
                Description: this.props.description,
                TemplatePath: this.props.template._render(),
                Parameters: (_e = this.props.parameters) === null || _e === void 0 ? void 0 : _e._render(),
                Capabilities: singleton_policy_1.parseCapabilities(this.props.cfnCapabilities),
                FailureTolerancePercentage: this.props.failureTolerancePercentage,
                MaxConcurrentPercentage: this.props.maxAccountConcurrencyPercentage,
                ...instancesResult === null || instancesResult === void 0 ? void 0 : instancesResult.stackSetConfiguration,
                ...permissionModelBind === null || permissionModelBind === void 0 ? void 0 : permissionModelBind.stackSetConfiguration,
            },
        };
    }
}
exports.CloudFormationDeployStackSetAction = CloudFormationDeployStackSetAction;
_a = JSII_RTTI_SYMBOL_1;
CloudFormationDeployStackSetAction[_a] = { fqn: "@aws-cdk/aws-codepipeline-actions.CloudFormationDeployStackSetAction", version: "1.148.0" };
//# sourceMappingURL=data:application/json;base64,