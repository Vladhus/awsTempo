{
  "version": "2",
  "toolVersion": "1.54.0",
  "snippets": {
    "529a456a7b2a565ce3d5a0f99e1c854482e901d3eaf49455006ab7c58aa6bcbd": {
      "translations": {
        "python": {
          "source": "# The stacks for our app are minimally defined here.  The internals of these\n# stacks aren't important, except that DatabaseStack exposes an attribute\n# \"table\" for a database table it defines, and ComputeStack accepts a reference\n# to this table in its properties.\n#\nclass DatabaseStack(Stack):\n\n    def __init__(self, scope, id):\n        super().__init__(scope, id)\n        self.table = dynamodb.Table(self, \"Table\",\n            partition_key=dynamodb.Attribute(name=\"id\", type=dynamodb.AttributeType.STRING)\n        )\n\nclass ComputeStack(Stack):\n    def __init__(self, scope, id, *, table):\n        super().__init__(scope, id)\n\n#\n# Stack to hold the pipeline\n#\nclass MyPipelineStack(Stack):\n    def __init__(self, scope, id, *, description=None, env=None, stackName=None, tags=None, synthesizer=None, terminationProtection=None, analyticsReporting=None):\n        super().__init__(scope, id, description=description, env=env, stackName=stackName, tags=tags, synthesizer=synthesizer, terminationProtection=terminationProtection, analyticsReporting=analyticsReporting)\n\n        pipeline = pipelines.CodePipeline(self, \"Pipeline\",\n            synth=pipelines.ShellStep(\"Synth\",\n                # Use a connection created using the AWS console to authenticate to GitHub\n                # Other sources are available.\n                input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n                    connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n                ),\n                commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"\n                ]\n            )\n        )\n\n        # 'MyApplication' is defined below. Call `addStage` as many times as\n        # necessary with any account and region (may be different from the\n        # pipeline's).\n        pipeline.add_stage(MyApplication(self, \"Prod\",\n            env=cdk.Environment(\n                account=\"123456789012\",\n                region=\"eu-west-1\"\n            )\n        ))\n\n#\n# Your application\n#\n# May consist of one or more Stacks (here, two)\n#\n# By declaring our DatabaseStack and our ComputeStack inside a Stage,\n# we make sure they are deployed together, or not at all.\n#\nclass MyApplication(Stage):\n    def __init__(self, scope, id, *, env=None, outdir=None):\n        super().__init__(scope, id, env=env, outdir=outdir)\n\n        db_stack = DatabaseStack(self, \"Database\")\n        ComputeStack(self, \"Compute\",\n            table=db_stack.table\n        )\n\n# In your main file\nMyPipelineStack(self, \"PipelineStack\",\n    env=cdk.Environment(\n        account=\"123456789012\",\n        region=\"eu-west-1\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "/** The stacks for our app are minimally defined here.  The internals of these\n  * stacks aren't important, except that DatabaseStack exposes an attribute\n  * \"table\" for a database table it defines, and ComputeStack accepts a reference\n  * to this table in its properties.\n  */\nclass DatabaseStack : Stack\n{\n    public Table Table { get; }\n\n    public DatabaseStack(Construct scope, string id) : base(scope, id)\n    {\n        Table = new Table(this, \"Table\", new TableProps {\n            PartitionKey = new Attribute { Name = \"id\", Type = AttributeType.STRING }\n        });\n    }\n}\n\nclass ComputeProps\n{\n    public Table Table { get; set; }\n}\n\nclass ComputeStack : Stack\n{\n    public ComputeStack(Construct scope, string id, ComputeProps props) : base(scope, id)\n    {\n    }\n}\n\n/**\n * Stack to hold the pipeline\n */\nclass MyPipelineStack : Stack\n{\n    public MyPipelineStack(Construct scope, string id, StackProps? props=null) : base(scope, id, props)\n    {\n\n        CodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n            Synth = new ShellStep(\"Synth\", new ShellStepProps {\n                // Use a connection created using the AWS console to authenticate to GitHub\n                // Other sources are available.\n                Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n                    ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n                }),\n                Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n            })\n        });\n\n        // 'MyApplication' is defined below. Call `addStage` as many times as\n        // necessary with any account and region (may be different from the\n        // pipeline's).\n        pipeline.AddStage(new MyApplication(this, \"Prod\", new StageProps {\n            Env = new Environment {\n                Account = \"123456789012\",\n                Region = \"eu-west-1\"\n            }\n        }));\n    }\n}\n\n/**\n * Your application\n *\n * May consist of one or more Stacks (here, two)\n *\n * By declaring our DatabaseStack and our ComputeStack inside a Stage,\n * we make sure they are deployed together, or not at all.\n */\nclass MyApplication : Stage\n{\n    public MyApplication(Construct scope, string id, StageProps? props=null) : base(scope, id, props)\n    {\n\n        DatabaseStack dbStack = new DatabaseStack(this, \"Database\");\n        new ComputeStack(this, \"Compute\", new ComputeProps {\n            Table = dbStack.Table\n        });\n    }\n}\n\n// In your main file\n// In your main file\nnew MyPipelineStack(this, \"PipelineStack\", new StackProps {\n    Env = new Environment {\n        Account = \"123456789012\",\n        Region = \"eu-west-1\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "/** The stacks for our app are minimally defined here.  The internals of these\n  * stacks aren't important, except that DatabaseStack exposes an attribute\n  * \"table\" for a database table it defines, and ComputeStack accepts a reference\n  * to this table in its properties.\n  */\npublic class DatabaseStack extends Stack {\n    public final Table table;\n\n    public DatabaseStack(Construct scope, String id) {\n        super(scope, id);\n        this.table = Table.Builder.create(this, \"Table\")\n                .partitionKey(Attribute.builder().name(\"id\").type(AttributeType.STRING).build())\n                .build();\n    }\n}\n\npublic class ComputeProps {\n    private Table table;\n    public Table getTable() {\n        return this.table;\n    }\n    public ComputeProps table(Table table) {\n        this.table = table;\n        return this;\n    }\n}\n\npublic class ComputeStack extends Stack {\n    public ComputeStack(Construct scope, String id, ComputeProps props) {\n        super(scope, id);\n    }\n}\n\n/**\n * Stack to hold the pipeline\n */\npublic class MyPipelineStack extends Stack {\n    public MyPipelineStack(Construct scope, String id) {\n        this(scope, id, null);\n    }\n\n    public MyPipelineStack(Construct scope, String id, StackProps props) {\n        super(scope, id, props);\n\n        CodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n                .synth(ShellStep.Builder.create(\"Synth\")\n                        // Use a connection created using the AWS console to authenticate to GitHub\n                        // Other sources are available.\n                        .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                                .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                                .build()))\n                        .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                        .build())\n                .build();\n\n        // 'MyApplication' is defined below. Call `addStage` as many times as\n        // necessary with any account and region (may be different from the\n        // pipeline's).\n        pipeline.addStage(MyApplication.Builder.create(this, \"Prod\")\n                .env(Environment.builder()\n                        .account(\"123456789012\")\n                        .region(\"eu-west-1\")\n                        .build())\n                .build());\n    }\n}\n\n/**\n * Your application\n *\n * May consist of one or more Stacks (here, two)\n *\n * By declaring our DatabaseStack and our ComputeStack inside a Stage,\n * we make sure they are deployed together, or not at all.\n */\npublic class MyApplication extends Stage {\n    public MyApplication(Construct scope, String id) {\n        this(scope, id, null);\n    }\n\n    public MyApplication(Construct scope, String id, StageProps props) {\n        super(scope, id, props);\n\n        DatabaseStack dbStack = new DatabaseStack(this, \"Database\");\n        new ComputeStack(this, \"Compute\", new ComputeProps()\n                .table(dbStack.getTable())\n                );\n    }\n}\n\n// In your main file\n// In your main file\nMyPipelineStack.Builder.create(this, \"PipelineStack\")\n        .env(Environment.builder()\n                .account(\"123456789012\")\n                .region(\"eu-west-1\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "/** The stacks for our app are minimally defined here.  The internals of these\n  * stacks aren't important, except that DatabaseStack exposes an attribute\n  * \"table\" for a database table it defines, and ComputeStack accepts a reference\n  * to this table in its properties.\n  */\nclass DatabaseStack extends Stack {\n  public readonly table: dynamodb.Table;\n\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    this.table = new dynamodb.Table(this, 'Table', {\n      partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING }\n    });\n  }\n}\n\ninterface ComputeProps {\n  readonly table: dynamodb.Table;\n}\n\nclass ComputeStack extends Stack {\n  constructor(scope: Construct, id: string, props: ComputeProps) {\n    super(scope, id);\n  }\n}\n\n/**\n * Stack to hold the pipeline\n */\nclass MyPipelineStack extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    const pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n      synth: new pipelines.ShellStep('Synth', {\n        // Use a connection created using the AWS console to authenticate to GitHub\n        // Other sources are available.\n        input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n          connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n        }),\n        commands: [\n          'npm ci',\n          'npm run build',\n          'npx cdk synth',\n        ],\n      }),\n    });\n\n    // 'MyApplication' is defined below. Call `addStage` as many times as\n    // necessary with any account and region (may be different from the\n    // pipeline's).\n    pipeline.addStage(new MyApplication(this, 'Prod', {\n      env: {\n        account: '123456789012',\n        region: 'eu-west-1',\n      },\n    }));\n  }\n}\n\n/**\n * Your application\n *\n * May consist of one or more Stacks (here, two)\n *\n * By declaring our DatabaseStack and our ComputeStack inside a Stage,\n * we make sure they are deployed together, or not at all.\n */\nclass MyApplication extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n\n    const dbStack = new DatabaseStack(this, 'Database');\n    new ComputeStack(this, 'Compute', {\n      table: dbStack.table,\n    });\n  }\n}\n\n// In your main file\nnew MyPipelineStack(this, 'PipelineStack', {\n  env: {\n    account: '123456789012',\n    region: 'eu-west-1',\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 58
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.TableProps",
        "@aws-cdk/core.Environment",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps",
        "@aws-cdk/core.Stage",
        "@aws-cdk/core.StageProps",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.PipelineBase#addStage",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n/** The stacks for our app are minimally defined here.  The internals of these\n  * stacks aren't important, except that DatabaseStack exposes an attribute\n  * \"table\" for a database table it defines, and ComputeStack accepts a reference\n  * to this table in its properties.\n  */\nclass DatabaseStack extends Stack {\n  public readonly table: dynamodb.Table;\n\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    this.table = new dynamodb.Table(this, 'Table', {\n      partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING }\n    });\n  }\n}\n\ninterface ComputeProps {\n  readonly table: dynamodb.Table;\n}\n\nclass ComputeStack extends Stack {\n  constructor(scope: Construct, id: string, props: ComputeProps) {\n    super(scope, id);\n  }\n}\n\n/**\n * Stack to hold the pipeline\n */\nclass MyPipelineStack extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n\n    const pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n      synth: new pipelines.ShellStep('Synth', {\n        // Use a connection created using the AWS console to authenticate to GitHub\n        // Other sources are available.\n        input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n          connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n        }),\n        commands: [\n          'npm ci',\n          'npm run build',\n          'npx cdk synth',\n        ],\n      }),\n    });\n\n    // 'MyApplication' is defined below. Call `addStage` as many times as\n    // necessary with any account and region (may be different from the\n    // pipeline's).\n    pipeline.addStage(new MyApplication(this, 'Prod', {\n      env: {\n        account: '123456789012',\n        region: 'eu-west-1',\n      },\n    }));\n  }\n}\n\n/**\n * Your application\n *\n * May consist of one or more Stacks (here, two)\n *\n * By declaring our DatabaseStack and our ComputeStack inside a Stage,\n * we make sure they are deployed together, or not at all.\n */\nclass MyApplication extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n\n    const dbStack = new DatabaseStack(this, 'Database');\n    new ComputeStack(this, 'Compute', {\n      table: dbStack.table,\n    });\n  }\n}\n\n// In your main file\nnew MyPipelineStack(this, 'PipelineStack', {\n  env: {\n    account: '123456789012',\n    region: 'eu-west-1',\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 18,
        "57": 2,
        "62": 1,
        "75": 80,
        "102": 4,
        "104": 7,
        "119": 1,
        "138": 2,
        "143": 4,
        "153": 2,
        "156": 11,
        "158": 1,
        "159": 1,
        "162": 4,
        "169": 9,
        "192": 1,
        "193": 10,
        "194": 10,
        "196": 6,
        "197": 7,
        "209": 1,
        "216": 4,
        "223": 4,
        "225": 2,
        "226": 8,
        "242": 2,
        "243": 2,
        "245": 4,
        "246": 1,
        "279": 4,
        "281": 14
      },
      "fqnsFingerprint": "e000f30aedcecdc50927c1b3f404005ddfefbba01ab4ae975095eb73d545338c"
    },
    "8751ed6f9ecd57c45db03fb74e8ce5f8cd5faf94366b3ccc6fe2ba6a38a357d3": {
      "translations": {
        "python": {
          "source": "# Modern API\nmodern_pipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    self_mutation=False,\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"\n        ]\n    )\n)\n\n# Original API\ncloud_assembly_artifact = codepipeline.Artifact()\noriginal_pipeline = pipelines.CdkPipeline(self, \"Pipeline\",\n    self_mutating=False,\n    cloud_assembly_artifact=cloud_assembly_artifact\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Modern API\nCodePipeline modernPipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    SelfMutation = false,\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    })\n});\n\n// Original API\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline originalPipeline = new CdkPipeline(this, \"Pipeline\", new CdkPipelineProps {\n    SelfMutating = false,\n    CloudAssemblyArtifact = cloudAssemblyArtifact\n});",
          "version": "1"
        },
        "java": {
          "source": "// Modern API\nCodePipeline modernPipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .selfMutation(false)\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n        .build();\n\n// Original API\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline originalPipeline = CdkPipeline.Builder.create(this, \"Pipeline\")\n        .selfMutating(false)\n        .cloudAssemblyArtifact(cloudAssemblyArtifact)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Modern API\nconst modernPipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  selfMutation: false,\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n});\n\n// Original API\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst originalPipeline = new pipelines.CdkPipeline(this, 'Pipeline', {\n  selfMutating: false,\n  cloudAssemblyArtifact,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 191
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/pipelines.CdkPipeline",
        "@aws-cdk/pipelines.CdkPipelineProps",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Modern API\nconst modernPipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  selfMutation: false,\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n});\n\n// Original API\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst originalPipeline = new pipelines.CdkPipeline(this, 'Pipeline', {\n  selfMutating: false,\n  cloudAssemblyArtifact,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 21,
        "91": 2,
        "104": 2,
        "192": 1,
        "193": 4,
        "194": 6,
        "196": 1,
        "197": 4,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1
      },
      "fqnsFingerprint": "d79775655e9f08c85c665dd41801cd3c7a6d004232138cff23b8cca2cdff93f1"
    },
    "41d75dbb7c2330dae78bb4202a2e7ebb8c71e5ce9f3c8a4c03c007e6b111a1ae": {
      "translations": {
        "python": {
          "source": "# source: pipelines.IFileSetProducer\n# the repository source\n\npipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    synth=pipelines.ShellStep(\"Synth\",\n        input=source,\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IFileSetProducer source;\n// the repository source\n\nCodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = source,\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "IFileSetProducer source;\n// the repository source\n\nCodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(source)\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const source: pipelines.IFileSetProducer; // the repository source\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: source,\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 235
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const source: pipelines.IFileSetProducer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n // the repository source\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: source,\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5cae71c1548cb01b64d18320a7fa0c2fb6848f8a716517ee02fcd0f14ae12acb"
    },
    "b58be87114424e996f1c40541f46cd4c2488a9a4204829d0e1f7d70398e76b4f": {
      "translations": {
        "python": {
          "source": "# source: pipelines.IFileSetProducer\n# the repository source\n\npipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    synth=pipelines.ShellStep(\"Synth\",\n        input=source,\n        commands=[\"cd mysubdir\", \"npm ci\", \"npm run build\", \"npx cdk synth\"\n        ],\n        primary_output_directory=\"mysubdir/cdk.out\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IFileSetProducer source;\n// the repository source\n\nCodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = source,\n        Commands = new [] { \"cd mysubdir\", \"npm ci\", \"npm run build\", \"npx cdk synth\" },\n        PrimaryOutputDirectory = \"mysubdir/cdk.out\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "IFileSetProducer source;\n// the repository source\n\nCodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(source)\n                .commands(List.of(\"cd mysubdir\", \"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .primaryOutputDirectory(\"mysubdir/cdk.out\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const source: pipelines.IFileSetProducer; // the repository source\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: source,\n    commands: [\n      'cd mysubdir',\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n    primaryOutputDirectory: 'mysubdir/cdk.out',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 255
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const source: pipelines.IFileSetProducer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n // the repository source\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: source,\n    commands: [\n      'cd mysubdir',\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n    primaryOutputDirectory: 'mysubdir/cdk.out',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 13,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "5cae71c1548cb01b64d18320a7fa0c2fb6848f8a716517ee02fcd0f14ae12acb"
    },
    "2d8d84ab0ecc886cd7948bdc1c30837c5b7f5f63d3f56178e9fcafb8d94956af": {
      "translations": {
        "python": {
          "source": "# source: pipelines.IFileSetProducer\n# the repository source\n\npipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    synth=pipelines.ShellStep(\"Synth\",\n        input=source,\n        commands=[\"yarn install --frozen-lockfile\", \"yarn build\", \"npx cdk synth\"\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IFileSetProducer source;\n// the repository source\n\nCodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = source,\n        Commands = new [] { \"yarn install --frozen-lockfile\", \"yarn build\", \"npx cdk synth\" }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "IFileSetProducer source;\n// the repository source\n\nCodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(source)\n                .commands(List.of(\"yarn install --frozen-lockfile\", \"yarn build\", \"npx cdk synth\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const source: pipelines.IFileSetProducer; // the repository source\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: source,\n    commands: [\n      'yarn install --frozen-lockfile',\n      'yarn build',\n      'npx cdk synth',\n    ],\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 287
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const source: pipelines.IFileSetProducer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n // the repository source\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: source,\n    commands: [\n      'yarn install --frozen-lockfile',\n      'yarn build',\n      'npx cdk synth',\n    ],\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5cae71c1548cb01b64d18320a7fa0c2fb6848f8a716517ee02fcd0f14ae12acb"
    },
    "fab016fdb2243ef5061ec62e835bc71d2cdc512b29f2fcdfcb44ceeffcee52f7": {
      "translations": {
        "python": {
          "source": "# source: pipelines.IFileSetProducer\n# the repository source\n\npipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    synth=pipelines.ShellStep(\"Synth\",\n        input=source,\n        commands=[\"pip install -r requirements.txt\", \"npm install -g aws-cdk\", \"cdk synth\"\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IFileSetProducer source;\n// the repository source\n\nCodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = source,\n        Commands = new [] { \"pip install -r requirements.txt\", \"npm install -g aws-cdk\", \"cdk synth\" }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "IFileSetProducer source;\n// the repository source\n\nCodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(source)\n                .commands(List.of(\"pip install -r requirements.txt\", \"npm install -g aws-cdk\", \"cdk synth\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const source: pipelines.IFileSetProducer; // the repository source\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: source,\n    commands: [\n      'pip install -r requirements.txt',\n      'npm install -g aws-cdk',\n      'cdk synth',\n    ],\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 305
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const source: pipelines.IFileSetProducer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n // the repository source\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: source,\n    commands: [\n      'pip install -r requirements.txt',\n      'npm install -g aws-cdk',\n      'cdk synth',\n    ],\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5cae71c1548cb01b64d18320a7fa0c2fb6848f8a716517ee02fcd0f14ae12acb"
    },
    "3882c0724253a7040a1bcaa8142234c0ea6b390270ad29cc7923fc317c9b39fa": {
      "translations": {
        "python": {
          "source": "# source: pipelines.IFileSetProducer\n# the repository source\n\npipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    synth=pipelines.ShellStep(\"Synth\",\n        input=source,\n        commands=[\"npm install -g aws-cdk\", \"cdk synth\"\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IFileSetProducer source;\n// the repository source\n\nCodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = source,\n        Commands = new [] { \"npm install -g aws-cdk\", \"cdk synth\" }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "IFileSetProducer source;\n// the repository source\n\nCodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(source)\n                .commands(List.of(\"npm install -g aws-cdk\", \"cdk synth\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const source: pipelines.IFileSetProducer; // the repository source\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: source,\n    commands: [\n      'npm install -g aws-cdk',\n      'cdk synth',\n    ],\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 325
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const source: pipelines.IFileSetProducer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n // the repository source\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: source,\n    commands: [\n      'npm install -g aws-cdk',\n      'cdk synth',\n    ],\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5cae71c1548cb01b64d18320a7fa0c2fb6848f8a716517ee02fcd0f14ae12acb"
    },
    "e7585c4aa923d3ff4be24d15b8a8b9e3c2294bb9aafaafe5f32fc2bbe3587488": {
      "translations": {
        "python": {
          "source": "# source: pipelines.IFileSetProducer\n\n\npipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    synth=pipelines.ShellStep(\"Synth\",\n        input=source,\n        commands=[\"./build.sh\"\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IFileSetProducer source;\n\n\nCodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = source,\n        Commands = new [] { \"./build.sh\" }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "IFileSetProducer source;\n\n\nCodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(source)\n                .commands(List.of(\"./build.sh\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const source: pipelines.IFileSetProducer;\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: source,\n    commands: [\n      // Abstract over doing the build\n      './build.sh',\n    ],\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 357
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const source: pipelines.IFileSetProducer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: source,\n    commands: [\n      // Abstract over doing the build\n      './build.sh',\n    ],\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "5cae71c1548cb01b64d18320a7fa0c2fb6848f8a716517ee02fcd0f14ae12acb"
    },
    "d3b8563abfe3aab3fb978edfd72117a0e1450b7cca11a7a360d9f287c60c7de2": {
      "translations": {
        "python": {
          "source": "pipelines.CodePipelineSource.connection(\"org/repo\", \"branch\",\n    connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipelineSource.Connection(\"org/repo\", \"branch\", new ConnectionSourceOptions {\n    ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipelineSource.connection(\"org/repo\", \"branch\", ConnectionSourceOptions.builder()\n        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "pipelines.CodePipelineSource.connection('org/repo', 'branch', {\n  connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 387
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\npipelines.CodePipelineSource.connection('org/repo', 'branch', {\n  connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 4,
        "193": 1,
        "194": 2,
        "196": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "3c53be22bc30434acd463418c389949f4d05d82b54b0f0e284b6562d881ea9ee"
    },
    "5f90b9439947dd9456719f24981c8d827eec0d2ca664c70d92e56499bf503ce0": {
      "translations": {
        "python": {
          "source": "pipelines.CodePipelineSource.git_hub(\"org/repo\", \"branch\",\n    # This is optional\n    authentication=cdk.SecretValue.secrets_manager(\"my-token\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipelineSource.GitHub(\"org/repo\", \"branch\", new GitHubSourceOptions {\n    // This is optional\n    Authentication = SecretValue.SecretsManager(\"my-token\")\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipelineSource.gitHub(\"org/repo\", \"branch\", GitHubSourceOptions.builder()\n        // This is optional\n        .authentication(SecretValue.secretsManager(\"my-token\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "pipelines.CodePipelineSource.gitHub('org/repo', 'branch', {\n  // This is optional\n  authentication: cdk.SecretValue.secretsManager('my-token'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 401
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#gitHub",
        "@aws-cdk/pipelines.GitHubSourceOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\npipelines.CodePipelineSource.gitHub('org/repo', 'branch', {\n  // This is optional\n  authentication: cdk.SecretValue.secretsManager('my-token'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "193": 1,
        "194": 4,
        "196": 2,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "05201324a1c0912cb47bef756e3c2121353d9d61644bc8ff7dcff45a894df21c"
    },
    "f68309a87146a0ee89ddf31f30655ca5bd66aa7e52aa0d2635f66382c3292ab0": {
      "translations": {
        "python": {
          "source": "repository = codecommit.Repository.from_repository_name(self, \"Repository\", \"my-repository\")\npipelines.CodePipelineSource.code_commit(repository, \"main\")",
          "version": "2"
        },
        "csharp": {
          "source": "IRepository repository = Repository.FromRepositoryName(this, \"Repository\", \"my-repository\");\nCodePipelineSource.CodeCommit(repository, \"main\");",
          "version": "1"
        },
        "java": {
          "source": "IRepository repository = Repository.fromRepositoryName(this, \"Repository\", \"my-repository\");\nCodePipelineSource.codeCommit(repository, \"main\");",
          "version": "1"
        },
        "$": {
          "source": "const repository = codecommit.Repository.fromRepositoryName(this, 'Repository', 'my-repository');\npipelines.CodePipelineSource.codeCommit(repository, 'main');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 414
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/aws-codecommit.Repository",
        "@aws-cdk/aws-codecommit.Repository#fromRepositoryName",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#codeCommit",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst repository = codecommit.Repository.fromRepositoryName(this, 'Repository', 'my-repository');\npipelines.CodePipelineSource.codeCommit(repository, 'main');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "104": 1,
        "194": 4,
        "196": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "df55d00dd3d6cdefeeefc556e8471448866d8a85c82a453f8f7f275cc5e98d8a"
    },
    "bef0af8a441f3dd50148773c0578b3a742443237273e4ce8636581545f968d74": {
      "translations": {
        "python": {
          "source": "bucket = s3.Bucket.from_bucket_name(self, \"Bucket\", \"my-bucket\")\npipelines.CodePipelineSource.s3(bucket, \"my/source.zip\")",
          "version": "2"
        },
        "csharp": {
          "source": "IBucket bucket = Bucket.FromBucketName(this, \"Bucket\", \"my-bucket\");\nCodePipelineSource.S3(bucket, \"my/source.zip\");",
          "version": "1"
        },
        "java": {
          "source": "IBucket bucket = Bucket.fromBucketName(this, \"Bucket\", \"my-bucket\");\nCodePipelineSource.s3(bucket, \"my/source.zip\");",
          "version": "1"
        },
        "$": {
          "source": "const bucket = s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket');\npipelines.CodePipelineSource.s3(bucket, 'my/source.zip');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 424
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#s3",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst bucket = s3.Bucket.fromBucketName(this, 'Bucket', 'my-bucket');\npipelines.CodePipelineSource.s3(bucket, 'my/source.zip');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "104": 1,
        "194": 4,
        "196": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "1c04c237082fa5bf54d5b87fef6a57a46ecd9c960047e3d7f8f45a9146ae5314"
    },
    "4ee024a2c8c3ce92d603343d8b5679d4868518faaa80908327edd1eced968b74": {
      "translations": {
        "python": {
          "source": "repository = ecr.Repository(self, \"Repository\")\npipelines.CodePipelineSource.ecr(repository)",
          "version": "2"
        },
        "csharp": {
          "source": "Repository repository = new Repository(this, \"Repository\");\nCodePipelineSource.Ecr(repository);",
          "version": "1"
        },
        "java": {
          "source": "Repository repository = new Repository(this, \"Repository\");\nCodePipelineSource.ecr(repository);",
          "version": "1"
        },
        "$": {
          "source": "const repository = new ecr.Repository(this, 'Repository');\npipelines.CodePipelineSource.ecr(repository);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 434
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-ecr.Repository",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#ecr",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst repository = new ecr.Repository(this, 'Repository');\npipelines.CodePipelineSource.ecr(repository);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "104": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "050ce46b645ec8aacffd9f387650dcfdb0d8351b5f9fab04d9928e986d86430f"
    },
    "22073f8ae7529611a32121892b26f56ef8de97ccecc5f627de9d7f02efb430ef": {
      "translations": {
        "python": {
          "source": "prebuild = pipelines.ShellStep(\"Prebuild\",\n    input=pipelines.CodePipelineSource.git_hub(\"myorg/repo1\", \"main\"),\n    primary_output_directory=\"./build\",\n    commands=[\"./build.sh\"]\n)\n\npipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.git_hub(\"myorg/repo2\", \"main\"),\n        additional_inputs={\n            \"subdir\": pipelines.CodePipelineSource.git_hub(\"myorg/repo3\", \"main\"),\n            \"../siblingdir\": prebuild\n        },\n\n        commands=[\"./build.sh\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ShellStep prebuild = new ShellStep(\"Prebuild\", new ShellStepProps {\n    Input = CodePipelineSource.GitHub(\"myorg/repo1\", \"main\"),\n    PrimaryOutputDirectory = \"./build\",\n    Commands = new [] { \"./build.sh\" }\n});\n\nCodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.GitHub(\"myorg/repo2\", \"main\"),\n        AdditionalInputs = new Dictionary<string, IFileSetProducer> {\n            { \"subdir\", CodePipelineSource.GitHub(\"myorg/repo3\", \"main\") },\n            { \"../siblingdir\", prebuild }\n        },\n\n        Commands = new [] { \"./build.sh\" }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "ShellStep prebuild = ShellStep.Builder.create(\"Prebuild\")\n        .input(CodePipelineSource.gitHub(\"myorg/repo1\", \"main\"))\n        .primaryOutputDirectory(\"./build\")\n        .commands(List.of(\"./build.sh\"))\n        .build();\n\nCodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.gitHub(\"myorg/repo2\", \"main\"))\n                .additionalInputs(Map.of(\n                        \"subdir\", CodePipelineSource.gitHub(\"myorg/repo3\", \"main\"),\n                        \"../siblingdir\", prebuild))\n\n                .commands(List.of(\"./build.sh\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const prebuild = new pipelines.ShellStep('Prebuild', {\n  input: pipelines.CodePipelineSource.gitHub('myorg/repo1', 'main'),\n  primaryOutputDirectory: './build',\n  commands: ['./build.sh'],\n});\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.gitHub('myorg/repo2', 'main'),\n    additionalInputs: {\n      'subdir': pipelines.CodePipelineSource.gitHub('myorg/repo3', 'main'),\n      '../siblingdir': prebuild,\n    },\n\n    commands: ['./build.sh'],\n  })\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 446
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#gitHub",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst prebuild = new pipelines.ShellStep('Prebuild', {\n  input: pipelines.CodePipelineSource.gitHub('myorg/repo1', 'main'),\n  primaryOutputDirectory: './build',\n  commands: ['./build.sh'],\n});\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.gitHub('myorg/repo2', 'main'),\n    additionalInputs: {\n      'subdir': pipelines.CodePipelineSource.gitHub('myorg/repo3', 'main'),\n      '../siblingdir': prebuild,\n    },\n\n    commands: ['./build.sh'],\n  })\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 25,
        "104": 1,
        "192": 2,
        "193": 4,
        "194": 9,
        "196": 3,
        "197": 3,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 9
      },
      "fqnsFingerprint": "373afc8f772a2d86219629f2338bf9e155eeeb599ea67c725156f31336585da0"
    },
    "3dd499e1ca9568362ccf61cd8107eeb266f9574fcad3415f2a49a98e90d03ec4": {
      "translations": {
        "python": {
          "source": "# pipeline: pipelines.CodePipeline\n\n# Do this as many times as necessary with any account and region\n# Account and region may different from the pipeline's.\npipeline.add_stage(MyApplicationStage(self, \"Prod\",\n    env=cdk.Environment(\n        account=\"123456789012\",\n        region=\"eu-west-1\"\n    )\n))",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline;\n\n// Do this as many times as necessary with any account and region\n// Account and region may different from the pipeline's.\npipeline.AddStage(new MyApplicationStage(this, \"Prod\", new StageProps {\n    Env = new Environment {\n        Account = \"123456789012\",\n        Region = \"eu-west-1\"\n    }\n}));",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline;\n\n// Do this as many times as necessary with any account and region\n// Account and region may different from the pipeline's.\npipeline.addStage(MyApplicationStage.Builder.create(this, \"Prod\")\n        .env(Environment.builder()\n                .account(\"123456789012\")\n                .region(\"eu-west-1\")\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: pipelines.CodePipeline;\n// Do this as many times as necessary with any account and region\n// Account and region may different from the pipeline's.\npipeline.addStage(new MyApplicationStage(this, 'Prod', {\n  env: {\n    account: '123456789012',\n    region: 'eu-west-1',\n  }\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 472
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Environment",
        "@aws-cdk/core.Stage",
        "@aws-cdk/core.StageProps",
        "@aws-cdk/pipelines.PipelineBase#addStage",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: pipelines.CodePipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n// Do this as many times as necessary with any account and region\n// Account and region may different from the pipeline's.\npipeline.addStage(new MyApplicationStage(this, 'Prod', {\n  env: {\n    account: '123456789012',\n    region: 'eu-west-1',\n  }\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 1,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "83b34c7f1eeb12bad01da8fdf5ea354cabc68ae88c53eac56d3160af3461d0c3"
    },
    "386c71cf2d107a56e8de90244df3a3b933f0bef51872ba28015154192a7be53c": {
      "translations": {
        "python": {
          "source": "# pipeline: pipelines.CodePipeline\n\neurope_wave = pipeline.add_wave(\"Europe\")\neurope_wave.add_stage(MyApplicationStage(self, \"Ireland\",\n    env=cdk.Environment(region=\"eu-west-1\")\n))\neurope_wave.add_stage(MyApplicationStage(self, \"Germany\",\n    env=cdk.Environment(region=\"eu-central-1\")\n))",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline;\n\nWave europeWave = pipeline.AddWave(\"Europe\");\neuropeWave.AddStage(new MyApplicationStage(this, \"Ireland\", new StageProps {\n    Env = new Environment { Region = \"eu-west-1\" }\n}));\neuropeWave.AddStage(new MyApplicationStage(this, \"Germany\", new StageProps {\n    Env = new Environment { Region = \"eu-central-1\" }\n}));",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline;\n\nWave europeWave = pipeline.addWave(\"Europe\");\neuropeWave.addStage(MyApplicationStage.Builder.create(this, \"Ireland\")\n        .env(Environment.builder().region(\"eu-west-1\").build())\n        .build());\neuropeWave.addStage(MyApplicationStage.Builder.create(this, \"Germany\")\n        .env(Environment.builder().region(\"eu-central-1\").build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: pipelines.CodePipeline;\nconst europeWave = pipeline.addWave('Europe');\neuropeWave.addStage(new MyApplicationStage(this, 'Ireland', {\n  env: { region: 'eu-west-1' }\n}));\neuropeWave.addStage(new MyApplicationStage(this, 'Germany', {\n  env: { region: 'eu-central-1' }\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 505
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Environment",
        "@aws-cdk/core.Stage",
        "@aws-cdk/core.StageProps",
        "@aws-cdk/pipelines.PipelineBase#addWave",
        "@aws-cdk/pipelines.Wave",
        "@aws-cdk/pipelines.Wave#addStage",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: pipelines.CodePipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst europeWave = pipeline.addWave('Europe');\neuropeWave.addStage(new MyApplicationStage(this, 'Ireland', {\n  env: { region: 'eu-west-1' }\n}));\neuropeWave.addStage(new MyApplicationStage(this, 'Germany', {\n  env: { region: 'eu-central-1' }\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 16,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 3,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "7c1328c90763eb82ab741fff763db8d3cecc0fd8ddfee72a32831a3b68ddc5f1"
    },
    "878dc13a2170ccfd0c4c6d71f3b48b6f137a691a85736cc11afa5802c23e5533": {
      "translations": {
        "python": {
          "source": "pipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    # Encrypt artifacts, required for cross-account deployments\n    cross_account_keys=True,\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    // Encrypt artifacts, required for cross-account deployments\n    CrossAccountKeys = true,\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        // Encrypt artifacts, required for cross-account deployments\n        .crossAccountKeys(true)\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  // Encrypt artifacts, required for cross-account deployments\n  crossAccountKeys: true,\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 530
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  // Encrypt artifacts, required for cross-account deployments\n  crossAccountKeys: true,\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 13,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "05f3c5c83c574338bd55ae7128b114582eb8da438f550ae5890faaa601182410"
    },
    "5c971b3d2edaa64b4a5799c6a1efad53219a293f4451d4fe3842b0261dafa265": {
      "translations": {
        "python": {
          "source": "# pipeline: pipelines.CodePipeline\n\npreprod = MyApplicationStage(self, \"PreProd\")\nprod = MyApplicationStage(self, \"Prod\")\n\npipeline.add_stage(preprod,\n    post=[\n        pipelines.ShellStep(\"Validate Endpoint\",\n            commands=[\"curl -Ssf https://my.webservice.com/\"]\n        )\n    ]\n)\npipeline.add_stage(prod,\n    pre=[\n        pipelines.ManualApprovalStep(\"PromoteToProd\")\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline;\n\nMyApplicationStage preprod = new MyApplicationStage(this, \"PreProd\");\nMyApplicationStage prod = new MyApplicationStage(this, \"Prod\");\n\npipeline.AddStage(preprod, new AddStageOpts {\n    Post = new [] {\n        new ShellStep(\"Validate Endpoint\", new ShellStepProps {\n            Commands = new [] { \"curl -Ssf https://my.webservice.com/\" }\n        }) }\n});\npipeline.AddStage(prod, new AddStageOpts {\n    Pre = new [] {\n        new ManualApprovalStep(\"PromoteToProd\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline;\n\nMyApplicationStage preprod = new MyApplicationStage(this, \"PreProd\");\nMyApplicationStage prod = new MyApplicationStage(this, \"Prod\");\n\npipeline.addStage(preprod, AddStageOpts.builder()\n        .post(List.of(\n            ShellStep.Builder.create(\"Validate Endpoint\")\n                    .commands(List.of(\"curl -Ssf https://my.webservice.com/\"))\n                    .build()))\n        .build());\npipeline.addStage(prod, AddStageOpts.builder()\n        .pre(List.of(\n            new ManualApprovalStep(\"PromoteToProd\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: pipelines.CodePipeline;\nconst preprod = new MyApplicationStage(this, 'PreProd');\nconst prod = new MyApplicationStage(this, 'Prod');\n\npipeline.addStage(preprod, {\n  post: [\n    new pipelines.ShellStep('Validate Endpoint', {\n      commands: ['curl -Ssf https://my.webservice.com/'],\n    }),\n  ],\n});\npipeline.addStage(prod, {\n  pre: [\n    new pipelines.ManualApprovalStep('PromoteToProd'),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 559
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Stage",
        "@aws-cdk/pipelines.AddStageOpts",
        "@aws-cdk/pipelines.ManualApprovalStep",
        "@aws-cdk/pipelines.PipelineBase#addStage",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: pipelines.CodePipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst preprod = new MyApplicationStage(this, 'PreProd');\nconst prod = new MyApplicationStage(this, 'Prod');\n\npipeline.addStage(preprod, {\n  post: [\n    new pipelines.ShellStep('Validate Endpoint', {\n      commands: ['curl -Ssf https://my.webservice.com/'],\n    }),\n  ],\n});\npipeline.addStage(prod, {\n  pre: [\n    new pipelines.ManualApprovalStep('PromoteToProd'),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 3,
        "194": 4,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b03a04713cd09c8fc498feefb1fa4401048b9b3b66f4b181460e2273e165f765"
    },
    "23243ceba8c94c654442e2415ab1158f079c425687a2476ec6eab28d71f15f7e": {
      "translations": {
        "python": {
          "source": "# pipeline: pipelines.CodePipeline\nclass MyStacksStage(Stage):\n\n    def __init__(self, scope, id, *, env=None, outdir=None):\n        super().__init__(scope, id, env=env, outdir=outdir)\n        self.stack1 = Stack(self, \"stack1\")\n        self.stack2 = Stack(self, \"stack2\")\nprod = MyStacksStage(self, \"Prod\")\n\npipeline.add_stage(prod,\n    stack_steps=[pipelines.StackSteps(\n        stack=prod.stack1,\n        pre=[pipelines.ManualApprovalStep(\"Pre-Stack Check\")],  # Executed before stack is prepared\n        change_set=[pipelines.ManualApprovalStep(\"ChangeSet Approval\")],  # Executed after stack is prepared but before the stack is deployed\n        post=[pipelines.ManualApprovalStep(\"Post-Deploy Check\")]\n    ), pipelines.StackSteps(\n        stack=prod.stack2,\n        post=[pipelines.ManualApprovalStep(\"Post-Deploy Check\")]\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline;\nclass MyStacksStage : Stage\n{\n    public Stack Stack1 { get; }\n    public Stack Stack2 { get; }\n\n    public MyStacksStage(Construct scope, string id, StageProps? props=null) : base(scope, id, props)\n    {\n        Stack1 = new Stack(this, \"stack1\");\n        Stack2 = new Stack(this, \"stack2\");\n    }\n}\nMyStacksStage prod = new MyStacksStage(this, \"Prod\");\n\npipeline.AddStage(prod, new AddStageOpts {\n    StackSteps = new [] { new StackSteps {\n        Stack = prod.Stack1,\n        Pre = new [] { new ManualApprovalStep(\"Pre-Stack Check\") },  // Executed before stack is prepared\n        ChangeSet = new [] { new ManualApprovalStep(\"ChangeSet Approval\") },  // Executed after stack is prepared but before the stack is deployed\n        Post = new [] { new ManualApprovalStep(\"Post-Deploy Check\") }\n    }, new StackSteps {\n        Stack = prod.Stack2,\n        Post = new [] { new ManualApprovalStep(\"Post-Deploy Check\") }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline;\npublic class MyStacksStage extends Stage {\n    public final Stack stack1;\n    public final Stack stack2;\n\n    public MyStacksStage(Construct scope, String id) {\n        this(scope, id, null);\n    }\n\n    public MyStacksStage(Construct scope, String id, StageProps props) {\n        super(scope, id, props);\n        this.stack1 = new Stack(this, \"stack1\");\n        this.stack2 = new Stack(this, \"stack2\");\n    }\n}\nMyStacksStage prod = new MyStacksStage(this, \"Prod\");\n\npipeline.addStage(prod, AddStageOpts.builder()\n        .stackSteps(List.of(StackSteps.builder()\n                .stack(prod.getStack1())\n                .pre(List.of(new ManualApprovalStep(\"Pre-Stack Check\"))) // Executed before stack is prepared\n                .changeSet(List.of(new ManualApprovalStep(\"ChangeSet Approval\"))) // Executed after stack is prepared but before the stack is deployed\n                .post(List.of(new ManualApprovalStep(\"Post-Deploy Check\")))\n                .build(), StackSteps.builder()\n                .stack(prod.getStack2())\n                .post(List.of(new ManualApprovalStep(\"Post-Deploy Check\")))\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "class MyStacksStage extends Stage {\n  public readonly stack1: Stack;\n  public readonly stack2: Stack;\n\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n    this.stack1 = new Stack(this, 'stack1');\n    this.stack2 = new Stack(this, 'stack2');\n  }\n}\n\ndeclare const pipeline: pipelines.CodePipeline;\nconst prod = new MyStacksStage(this, 'Prod');\n\npipeline.addStage(prod, {\n  stackSteps: [{\n    stack: prod.stack1,\n    pre: [new pipelines.ManualApprovalStep('Pre-Stack Check')], // Executed before stack is prepared\n    changeSet: [new pipelines.ManualApprovalStep('ChangeSet Approval')], // Executed after stack is prepared but before the stack is deployed\n    post: [new pipelines.ManualApprovalStep('Post-Deploy Check')], // Executed after stack is deployed\n  }, {\n    stack: prod.stack2,\n    post: [new pipelines.ManualApprovalStep('Post-Deploy Check')], // Executed after stack is deployed\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 580
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage",
        "@aws-cdk/core.StageProps",
        "@aws-cdk/pipelines.AddStageOpts",
        "@aws-cdk/pipelines.ManualApprovalStep",
        "@aws-cdk/pipelines.PipelineBase#addStage",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const pipeline: pipelines.CodePipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nclass MyStacksStage extends Stage {\n  public readonly stack1: Stack;\n  public readonly stack2: Stack;\n\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n    this.stack1 = new Stack(this, 'stack1');\n    this.stack2 = new Stack(this, 'stack2');\n  }\n}\nconst prod = new MyStacksStage(this, 'Prod');\n\npipeline.addStage(prod, {\n  stackSteps: [{\n    stack: prod.stack1,\n    pre: [new pipelines.ManualApprovalStep('Pre-Stack Check')], // Executed before stack is prepared\n    changeSet: [new pipelines.ManualApprovalStep('ChangeSet Approval')], // Executed after stack is prepared but before the stack is deployed\n    post: [new pipelines.ManualApprovalStep('Post-Deploy Check')], // Executed after stack is deployed\n  }, {\n    stack: prod.stack2,\n    post: [new pipelines.ManualApprovalStep('Post-Deploy Check')], // Executed after stack is deployed\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "57": 1,
        "62": 2,
        "75": 45,
        "102": 1,
        "104": 5,
        "119": 2,
        "130": 1,
        "138": 2,
        "143": 1,
        "153": 1,
        "156": 3,
        "159": 2,
        "162": 1,
        "169": 5,
        "192": 5,
        "193": 3,
        "194": 9,
        "196": 2,
        "197": 7,
        "209": 2,
        "216": 1,
        "223": 1,
        "225": 2,
        "226": 4,
        "242": 2,
        "243": 2,
        "245": 1,
        "279": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "ef99ffa20660348f5aaf880f7d5a1f7ac56d9cc0bb4eaf26723fe4e81deb36e5"
    },
    "aedd95acde5f1a18313df1247b019932bbe3770c1d355c104882029fa60ad721": {
      "translations": {
        "python": {
          "source": "first_step = pipelines.ManualApprovalStep(\"A\")\nsecond_step = pipelines.ManualApprovalStep(\"B\")\nsecond_step.add_step_dependency(first_step)",
          "version": "2"
        },
        "csharp": {
          "source": "ManualApprovalStep firstStep = new ManualApprovalStep(\"A\");\nManualApprovalStep secondStep = new ManualApprovalStep(\"B\");\nsecondStep.AddStepDependency(firstStep);",
          "version": "1"
        },
        "java": {
          "source": "ManualApprovalStep firstStep = new ManualApprovalStep(\"A\");\nManualApprovalStep secondStep = new ManualApprovalStep(\"B\");\nsecondStep.addStepDependency(firstStep);",
          "version": "1"
        },
        "$": {
          "source": "const firstStep = new pipelines.ManualApprovalStep('A');\nconst secondStep = new pipelines.ManualApprovalStep('B');\nsecondStep.addStepDependency(firstStep);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 611
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.ManualApprovalStep",
        "@aws-cdk/pipelines.Step",
        "@aws-cdk/pipelines.Step#addStepDependency"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst firstStep = new pipelines.ManualApprovalStep('A');\nconst secondStep = new pipelines.ManualApprovalStep('B');\nsecondStep.addStepDependency(firstStep);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "0d0cdd5da07c07b09986d3c4d1e46762ed94bcb637d6f345ce2189a00fb2ca6e"
    },
    "1128f8304beadfcfdd8ae052b6f59f81b547a0f7a0e671b7fff24f97660674e7": {
      "translations": {
        "python": {
          "source": "# Step A will depend on step B and step B will depend on step C\nordered_steps = pipelines.Step.sequence([\n    pipelines.ManualApprovalStep(\"A\"),\n    pipelines.ManualApprovalStep(\"B\"),\n    pipelines.ManualApprovalStep(\"C\")\n])",
          "version": "2"
        },
        "csharp": {
          "source": "// Step A will depend on step B and step B will depend on step C\nStep[] orderedSteps = Step.Sequence(new [] {\n    new ManualApprovalStep(\"A\"),\n    new ManualApprovalStep(\"B\"),\n    new ManualApprovalStep(\"C\") });",
          "version": "1"
        },
        "java": {
          "source": "// Step A will depend on step B and step B will depend on step C\nStep[] orderedSteps = Step.sequence(List.of(\n    new ManualApprovalStep(\"A\"),\n    new ManualApprovalStep(\"B\"),\n    new ManualApprovalStep(\"C\")));",
          "version": "1"
        },
        "$": {
          "source": "// Step A will depend on step B and step B will depend on step C\nconst orderedSteps = pipelines.Step.sequence([\n  new pipelines.ManualApprovalStep('A'),\n  new pipelines.ManualApprovalStep('B'),\n  new pipelines.ManualApprovalStep('C'),\n]);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 620
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.ManualApprovalStep",
        "@aws-cdk/pipelines.Step",
        "@aws-cdk/pipelines.Step#sequence"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Step A will depend on step B and step B will depend on step C\nconst orderedSteps = pipelines.Step.sequence([\n  new pipelines.ManualApprovalStep('A'),\n  new pipelines.ManualApprovalStep('B'),\n  new pipelines.ManualApprovalStep('C'),\n]);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "192": 1,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "095f3547b92a11c19e9438cd9c619d798fbfae3ed573218ac093a49da966fb3b"
    },
    "6b16e512db10432197e0af074f10cba385504414dee4766346b055560eca4223": {
      "translations": {
        "python": {
          "source": "# pipeline: pipelines.CodePipeline\nclass MyOutputStage(Stage):\n\n    def __init__(self, scope, id, *, env=None, outdir=None):\n        super().__init__(scope, id, env=env, outdir=outdir)\n        self.load_balancer_address = CfnOutput(self, \"Output\", value=\"value\")\n\nlb_app = MyOutputStage(self, \"MyApp\")\npipeline.add_stage(lb_app,\n    post=[\n        pipelines.ShellStep(\"HitEndpoint\",\n            env_from_cfn_outputs={\n                # Make the load balancer address available as $URL inside the commands\n                \"URL\": lb_app.load_balancer_address\n            },\n            commands=[\"curl -Ssf $URL\"]\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline;\nclass MyOutputStage : Stage\n{\n    public CfnOutput LoadBalancerAddress { get; }\n\n    public MyOutputStage(Construct scope, string id, StageProps? props=null) : base(scope, id, props)\n    {\n        LoadBalancerAddress = new CfnOutput(this, \"Output\", new CfnOutputProps { Value = \"value\" });\n    }\n}\n\nMyOutputStage lbApp = new MyOutputStage(this, \"MyApp\");\npipeline.AddStage(lbApp, new AddStageOpts {\n    Post = new [] {\n        new ShellStep(\"HitEndpoint\", new ShellStepProps {\n            EnvFromCfnOutputs = new Dictionary<string, CfnOutput> {\n                // Make the load balancer address available as $URL inside the commands\n                { \"URL\", lbApp.LoadBalancerAddress }\n            },\n            Commands = new [] { \"curl -Ssf $URL\" }\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline;\npublic class MyOutputStage extends Stage {\n    public final CfnOutput loadBalancerAddress;\n\n    public MyOutputStage(Construct scope, String id) {\n        this(scope, id, null);\n    }\n\n    public MyOutputStage(Construct scope, String id, StageProps props) {\n        super(scope, id, props);\n        this.loadBalancerAddress = CfnOutput.Builder.create(this, \"Output\").value(\"value\").build();\n    }\n}\n\nMyOutputStage lbApp = new MyOutputStage(this, \"MyApp\");\npipeline.addStage(lbApp, AddStageOpts.builder()\n        .post(List.of(\n            ShellStep.Builder.create(\"HitEndpoint\")\n                    .envFromCfnOutputs(Map.of(\n                            // Make the load balancer address available as $URL inside the commands\n                            \"URL\", lbApp.getLoadBalancerAddress()))\n                    .commands(List.of(\"curl -Ssf $URL\"))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "class MyOutputStage extends Stage {\n  public readonly loadBalancerAddress: CfnOutput;\n\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n    this.loadBalancerAddress = new CfnOutput(this, 'Output', {value: 'value'});\n  }\n}\n\nconst lbApp = new MyOutputStage(this, 'MyApp');\ndeclare const pipeline: pipelines.CodePipeline;\npipeline.addStage(lbApp, {\n  post: [\n    new pipelines.ShellStep('HitEndpoint', {\n      envFromCfnOutputs: {\n        // Make the load balancer address available as $URL inside the commands\n        URL: lbApp.loadBalancerAddress,\n      },\n      commands: ['curl -Ssf $URL'],\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 638
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.Stage",
        "@aws-cdk/core.StageProps",
        "@aws-cdk/pipelines.AddStageOpts",
        "@aws-cdk/pipelines.PipelineBase#addStage",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\ndeclare const pipeline: pipelines.CodePipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nclass MyOutputStage extends Stage {\n  public readonly loadBalancerAddress: CfnOutput;\n\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n    this.loadBalancerAddress = new CfnOutput(this, 'Output', {value: 'value'});\n  }\n}\n\nconst lbApp = new MyOutputStage(this, 'MyApp');\npipeline.addStage(lbApp, {\n  post: [\n    new pipelines.ShellStep('HitEndpoint', {\n      envFromCfnOutputs: {\n        // Make the load balancer address available as $URL inside the commands\n        URL: lbApp.loadBalancerAddress,\n      },\n      commands: ['curl -Ssf $URL'],\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "57": 1,
        "62": 1,
        "75": 31,
        "102": 1,
        "104": 3,
        "119": 1,
        "130": 1,
        "138": 1,
        "143": 1,
        "153": 1,
        "156": 3,
        "159": 1,
        "162": 1,
        "169": 4,
        "192": 2,
        "193": 4,
        "194": 4,
        "196": 2,
        "197": 3,
        "209": 1,
        "216": 1,
        "223": 1,
        "225": 2,
        "226": 3,
        "242": 2,
        "243": 2,
        "245": 1,
        "279": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "1ca3b242aec8d060f8164d0bcb78329f4d10aa83a5acb1334885ac56d7de0606"
    },
    "ce3825120491ac12006015c04f06fcf72333fdf5d7e359ff97e545fe63cc1f30": {
      "translations": {
        "python": {
          "source": "# synth: pipelines.ShellStep\n\nstage = MyApplicationStage(self, \"MyApplication\")\npipeline = pipelines.CodePipeline(self, \"Pipeline\", synth=synth)\n\npipeline.add_stage(stage,\n    post=[\n        pipelines.ShellStep(\"Approve\",\n            # Use the contents of the 'integ' directory from the synth step as the input\n            input=synth.add_output_directory(\"integ\"),\n            commands=[\"cd integ && ./run.sh\"]\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ShellStep synth;\n\nMyApplicationStage stage = new MyApplicationStage(this, \"MyApplication\");\nCodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps { Synth = synth });\n\npipeline.AddStage(stage, new AddStageOpts {\n    Post = new [] {\n        new ShellStep(\"Approve\", new ShellStepProps {\n            // Use the contents of the 'integ' directory from the synth step as the input\n            Input = synth.AddOutputDirectory(\"integ\"),\n            Commands = new [] { \"cd integ && ./run.sh\" }\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "ShellStep synth;\n\nMyApplicationStage stage = new MyApplicationStage(this, \"MyApplication\");\nCodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\").synth(synth).build();\n\npipeline.addStage(stage, AddStageOpts.builder()\n        .post(List.of(\n            ShellStep.Builder.create(\"Approve\")\n                    // Use the contents of the 'integ' directory from the synth step as the input\n                    .input(synth.addOutputDirectory(\"integ\"))\n                    .commands(List.of(\"cd integ && ./run.sh\"))\n                    .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const synth: pipelines.ShellStep;\nconst stage = new MyApplicationStage(this, 'MyApplication');\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', { synth });\n\npipeline.addStage(stage, {\n  post: [\n    new pipelines.ShellStep('Approve', {\n      // Use the contents of the 'integ' directory from the synth step as the input\n      input: synth.addOutputDirectory('integ'),\n      commands: ['cd integ && ./run.sh'],\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 675
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Stage",
        "@aws-cdk/pipelines.AddStageOpts",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.PipelineBase#addStage",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStep#addOutputDirectory",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const synth: pipelines.ShellStep;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst stage = new MyApplicationStage(this, 'MyApplication');\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', { synth });\n\npipeline.addStage(stage, {\n  post: [\n    new pipelines.ShellStep('Approve', {\n      // Use the contents of the 'integ' directory from the synth step as the input\n      input: synth.addOutputDirectory('integ'),\n      commands: ['cd integ && ./run.sh'],\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 19,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 3,
        "194": 4,
        "196": 2,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "7a2f337a4badbe4eb396ac1d7c2a0a27031186d15531847afb1205111308d48e"
    },
    "e6e11c1873e5d0857a1f2a07ad23e2ba6e610a81eae1cb8b7c102b76586cf79d": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# my_security_group: ec2.SecurityGroup\n\npipelines.CodeBuildStep(\"Synth\",\n    # ...standard ShellStep props...\n    commands=[],\n    env={},\n\n    # If you are using a CodeBuildStep explicitly, set the 'cdk.out' directory\n    # to be the synth step's output.\n    primary_output_directory=\"cdk.out\",\n\n    # Control the name of the project\n    project_name=\"MyProject\",\n\n    # Control parts of the BuildSpec other than the regular 'build' and 'install' commands\n    partial_build_spec=codebuild.BuildSpec.from_object({\n        \"version\": \"0.2\"\n    }),\n\n    # Control the build environment\n    build_environment=codebuild.BuildEnvironment(\n        compute_type=codebuild.ComputeType.LARGE\n    ),\n    timeout=Duration.minutes(90),\n\n    # Control Elastic Network Interface creation\n    vpc=vpc,\n    subnet_selection=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE),\n    security_groups=[my_security_group],\n\n    # Additional policy statements for the execution role\n    role_policy_statements=[\n        iam.PolicyStatement()\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nSecurityGroup mySecurityGroup;\n\nnew CodeBuildStep(\"Synth\", new CodeBuildStepProps {\n    // ...standard ShellStep props...\n    Commands = new [] {  },\n    Env = new Dictionary<string, object> { },\n\n    // If you are using a CodeBuildStep explicitly, set the 'cdk.out' directory\n    // to be the synth step's output.\n    PrimaryOutputDirectory = \"cdk.out\",\n\n    // Control the name of the project\n    ProjectName = \"MyProject\",\n\n    // Control parts of the BuildSpec other than the regular 'build' and 'install' commands\n    PartialBuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n        { \"version\", \"0.2\" }\n    }),\n\n    // Control the build environment\n    BuildEnvironment = new BuildEnvironment {\n        ComputeType = ComputeType.LARGE\n    },\n    Timeout = Duration.Minutes(90),\n\n    // Control Elastic Network Interface creation\n    Vpc = vpc,\n    SubnetSelection = new SubnetSelection { SubnetType = SubnetType.PRIVATE },\n    SecurityGroups = new [] { mySecurityGroup },\n\n    // Additional policy statements for the execution role\n    RolePolicyStatements = new [] {\n        new PolicyStatement(new PolicyStatementProps { }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nSecurityGroup mySecurityGroup;\n\nCodeBuildStep.Builder.create(\"Synth\")\n        // ...standard ShellStep props...\n        .commands(List.of())\n        .env(Map.of())\n\n        // If you are using a CodeBuildStep explicitly, set the 'cdk.out' directory\n        // to be the synth step's output.\n        .primaryOutputDirectory(\"cdk.out\")\n\n        // Control the name of the project\n        .projectName(\"MyProject\")\n\n        // Control parts of the BuildSpec other than the regular 'build' and 'install' commands\n        .partialBuildSpec(BuildSpec.fromObject(Map.of(\n                \"version\", \"0.2\")))\n\n        // Control the build environment\n        .buildEnvironment(BuildEnvironment.builder()\n                .computeType(ComputeType.LARGE)\n                .build())\n        .timeout(Duration.minutes(90))\n\n        // Control Elastic Network Interface creation\n        .vpc(vpc)\n        .subnetSelection(SubnetSelection.builder().subnetType(SubnetType.PRIVATE).build())\n        .securityGroups(List.of(mySecurityGroup))\n\n        // Additional policy statements for the execution role\n        .rolePolicyStatements(List.of(\n            PolicyStatement.Builder.create().build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const mySecurityGroup: ec2.SecurityGroup;\nnew pipelines.CodeBuildStep('Synth', {\n  // ...standard ShellStep props...\n  commands: [/* ... */],\n  env: { /* ... */ },\n\n  // If you are using a CodeBuildStep explicitly, set the 'cdk.out' directory\n  // to be the synth step's output.\n  primaryOutputDirectory: 'cdk.out',\n\n  // Control the name of the project\n  projectName: 'MyProject',\n\n  // Control parts of the BuildSpec other than the regular 'build' and 'install' commands\n  partialBuildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    // ...\n  }),\n\n  // Control the build environment\n  buildEnvironment: {\n    computeType: codebuild.ComputeType.LARGE,\n  },\n  timeout: Duration.minutes(90),\n\n  // Control Elastic Network Interface creation\n  vpc: vpc,\n  subnetSelection: { subnetType: ec2.SubnetType.PRIVATE },\n  securityGroups: [mySecurityGroup],\n\n  // Additional policy statements for the execution role\n  rolePolicyStatements: [\n    new iam.PolicyStatement({ /* ... */ }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 699
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.ComputeType",
        "@aws-cdk/aws-codebuild.ComputeType#LARGE",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/pipelines.CodeBuildStep",
        "@aws-cdk/pipelines.CodeBuildStepProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const mySecurityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew pipelines.CodeBuildStep('Synth', {\n  // ...standard ShellStep props...\n  commands: [/* ... */],\n  env: { /* ... */ },\n\n  // If you are using a CodeBuildStep explicitly, set the 'cdk.out' directory\n  // to be the synth step's output.\n  primaryOutputDirectory: 'cdk.out',\n\n  // Control the name of the project\n  projectName: 'MyProject',\n\n  // Control parts of the BuildSpec other than the regular 'build' and 'install' commands\n  partialBuildSpec: codebuild.BuildSpec.fromObject({\n    version: '0.2',\n    // ...\n  }),\n\n  // Control the build environment\n  buildEnvironment: {\n    computeType: codebuild.ComputeType.LARGE,\n  },\n  timeout: Duration.minutes(90),\n\n  // Control Elastic Network Interface creation\n  vpc: vpc,\n  subnetSelection: { subnetType: ec2.SubnetType.PRIVATE },\n  securityGroups: [mySecurityGroup],\n\n  // Additional policy statements for the execution role\n  rolePolicyStatements: [\n    new iam.PolicyStatement({ /* ... */ }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 37,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 3,
        "193": 6,
        "194": 9,
        "196": 2,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "293cde57a7864048a17830061bc89ac8f5601eb1d9173c091e97804fac935e88"
    },
    "ddae09b8104629b08274ecda1da9f84b687adfe79bd4b3d743ff90cdc21785c0": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# my_security_group: ec2.SecurityGroup\n\npipelines.CodePipeline(self, \"Pipeline\",\n    # Standard CodePipeline properties\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"\n        ]\n    ),\n\n    # Defaults for all CodeBuild projects\n    code_build_defaults=pipelines.CodeBuildOptions(\n        # Prepend commands and configuration to all projects\n        partial_build_spec=codebuild.BuildSpec.from_object({\n            \"version\": \"0.2\"\n        }),\n\n        # Control the build environment\n        build_environment=codebuild.BuildEnvironment(\n            compute_type=codebuild.ComputeType.LARGE\n        ),\n\n        # Control Elastic Network Interface creation\n        vpc=vpc,\n        subnet_selection=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE),\n        security_groups=[my_security_group],\n\n        # Additional policy statements for the execution role\n        role_policy=[\n            iam.PolicyStatement()\n        ]\n    ),\n\n    synth_code_build_defaults=pipelines.CodeBuildOptions(),\n    asset_publishing_code_build_defaults=pipelines.CodeBuildOptions(),\n    self_mutation_code_build_defaults=pipelines.CodeBuildOptions()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nSecurityGroup mySecurityGroup;\n\nnew CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    // Standard CodePipeline properties\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    }),\n\n    // Defaults for all CodeBuild projects\n    CodeBuildDefaults = new CodeBuildOptions {\n        // Prepend commands and configuration to all projects\n        PartialBuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n            { \"version\", \"0.2\" }\n        }),\n\n        // Control the build environment\n        BuildEnvironment = new BuildEnvironment {\n            ComputeType = ComputeType.LARGE\n        },\n\n        // Control Elastic Network Interface creation\n        Vpc = vpc,\n        SubnetSelection = new SubnetSelection { SubnetType = SubnetType.PRIVATE },\n        SecurityGroups = new [] { mySecurityGroup },\n\n        // Additional policy statements for the execution role\n        RolePolicy = new [] {\n            new PolicyStatement(new PolicyStatementProps { }) }\n    },\n\n    SynthCodeBuildDefaults = new CodeBuildOptions { },\n    AssetPublishingCodeBuildDefaults = new CodeBuildOptions { },\n    SelfMutationCodeBuildDefaults = new CodeBuildOptions { }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nSecurityGroup mySecurityGroup;\n\nCodePipeline.Builder.create(this, \"Pipeline\")\n        // Standard CodePipeline properties\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n\n        // Defaults for all CodeBuild projects\n        .codeBuildDefaults(CodeBuildOptions.builder()\n                // Prepend commands and configuration to all projects\n                .partialBuildSpec(BuildSpec.fromObject(Map.of(\n                        \"version\", \"0.2\")))\n\n                // Control the build environment\n                .buildEnvironment(BuildEnvironment.builder()\n                        .computeType(ComputeType.LARGE)\n                        .build())\n\n                // Control Elastic Network Interface creation\n                .vpc(vpc)\n                .subnetSelection(SubnetSelection.builder().subnetType(SubnetType.PRIVATE).build())\n                .securityGroups(List.of(mySecurityGroup))\n\n                // Additional policy statements for the execution role\n                .rolePolicy(List.of(\n                    PolicyStatement.Builder.create().build()))\n                .build())\n\n        .synthCodeBuildDefaults(CodeBuildOptions.builder().build())\n        .assetPublishingCodeBuildDefaults(CodeBuildOptions.builder().build())\n        .selfMutationCodeBuildDefaults(CodeBuildOptions.builder().build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const mySecurityGroup: ec2.SecurityGroup;\nnew pipelines.CodePipeline(this, 'Pipeline', {\n  // Standard CodePipeline properties\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n\n  // Defaults for all CodeBuild projects\n  codeBuildDefaults: {\n    // Prepend commands and configuration to all projects\n    partialBuildSpec: codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      // ...\n    }),\n\n    // Control the build environment\n    buildEnvironment: {\n      computeType: codebuild.ComputeType.LARGE,\n    },\n\n    // Control Elastic Network Interface creation\n    vpc: vpc,\n    subnetSelection: { subnetType: ec2.SubnetType.PRIVATE },\n    securityGroups: [mySecurityGroup],\n\n    // Additional policy statements for the execution role\n    rolePolicy: [\n      new iam.PolicyStatement({ /* ... */ }),\n    ],\n  },\n\n  synthCodeBuildDefaults: { /* ... */ },\n  assetPublishingCodeBuildDefaults: { /* ... */ },\n  selfMutationCodeBuildDefaults: { /* ... */ },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 742
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.ComputeType",
        "@aws-cdk/aws-codebuild.ComputeType#LARGE",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/pipelines.CodeBuildOptions",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const mySecurityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew pipelines.CodePipeline(this, 'Pipeline', {\n  // Standard CodePipeline properties\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n\n  // Defaults for all CodeBuild projects\n  codeBuildDefaults: {\n    // Prepend commands and configuration to all projects\n    partialBuildSpec: codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      // ...\n    }),\n\n    // Control the build environment\n    buildEnvironment: {\n      computeType: codebuild.ComputeType.LARGE,\n    },\n\n    // Control Elastic Network Interface creation\n    vpc: vpc,\n    subnetSelection: { subnetType: ec2.SubnetType.PRIVATE },\n    securityGroups: [mySecurityGroup],\n\n    // Additional policy statements for the execution role\n    rolePolicy: [\n      new iam.PolicyStatement({ /* ... */ }),\n    ],\n  },\n\n  synthCodeBuildDefaults: { /* ... */ },\n  assetPublishingCodeBuildDefaults: { /* ... */ },\n  selfMutationCodeBuildDefaults: { /* ... */ },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 43,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 3,
        "193": 11,
        "194": 11,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "0b7e8477370bb8fee807fa82f040d4065345095c00510ae8fff6fdbe141b585c"
    },
    "8fc301388da4ff75118c7b14312f306d2c3df8d6badb3cfc2999f21b49058c13": {
      "translations": {
        "python": {
          "source": "class MyJenkinsStep(pipelines.Steppipelines.ICodePipelineActionFactory):\n    def __init__(self, provider, input):\n        super().__init__(\"MyJenkinsStep\")\n\n        # This is necessary if your step accepts things like environment variables\n        # that may contain outputs from other steps. It doesn't matter what the\n        # structure is, as long as it contains the values that may contain outputs.\n        self.discover_referenced_outputs({\n            \"env\": {}\n        })\n\n    def produce_action(self, stage, *, scope, actionName, runOrder, variablesNamespace=None, artifacts, fallbackArtifact=None, pipeline, codeBuildDefaults=None, beforeSelfMutation=None):\n\n        # This is where you control what type of Action gets added to the\n        # CodePipeline\n        stage.add_action(cpactions.JenkinsAction(\n            # Copy 'actionName' and 'runOrder' from the options\n            action_name=action_name,\n            run_order=run_order,\n\n            # Jenkins-specific configuration\n            type=cpactions.JenkinsActionType.TEST,\n            jenkins_provider=self.provider,\n            project_name=\"MyJenkinsProject\",\n\n            # Translate the FileSet into a codepipeline.Artifact\n            inputs=[artifacts.to_code_pipeline(self.input)]\n        ))\n\n        return pipelines.CodePipelineActionFactoryResult(run_orders_consumed=1)",
          "version": "2"
        },
        "csharp": {
          "source": "class MyJenkinsStep : Step, ICodePipelineActionFactory\n{\n    public MyJenkinsStep(JenkinsProvider provider, FileSet input) : base(\"MyJenkinsStep\")\n    {\n\n        // This is necessary if your step accepts things like environment variables\n        // that may contain outputs from other steps. It doesn't matter what the\n        // structure is, as long as it contains the values that may contain outputs.\n        DiscoverReferencedOutputs(new Dictionary<string, IDictionary<string, object>> {\n            { \"env\", new Struct { } }\n        });\n    }\n\n    public CodePipelineActionFactoryResult ProduceAction(IStage stage, ProduceActionOptions options)\n    {\n\n        // This is where you control what type of Action gets added to the\n        // CodePipeline\n        stage.AddAction(new JenkinsAction(new JenkinsActionProps {\n            // Copy 'actionName' and 'runOrder' from the options\n            ActionName = options.ActionName,\n            RunOrder = options.RunOrder,\n\n            // Jenkins-specific configuration\n            Type = JenkinsActionType.TEST,\n            JenkinsProvider = Provider,\n            ProjectName = \"MyJenkinsProject\",\n\n            // Translate the FileSet into a codepipeline.Artifact\n            Inputs = new [] { options.Artifacts.ToCodePipeline(Input) }\n        }));\n\n        return new CodePipelineActionFactoryResult { RunOrdersConsumed = 1 };\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "public class MyJenkinsStep extends Step implements ICodePipelineActionFactory {\n    public MyJenkinsStep(JenkinsProvider provider, FileSet input) {\n        super(\"MyJenkinsStep\");\n\n        // This is necessary if your step accepts things like environment variables\n        // that may contain outputs from other steps. It doesn't matter what the\n        // structure is, as long as it contains the values that may contain outputs.\n        this.discoverReferencedOutputs(Map.of(\n                \"env\", Map.of()));\n    }\n\n    public CodePipelineActionFactoryResult produceAction(IStage stage, ProduceActionOptions options) {\n\n        // This is where you control what type of Action gets added to the\n        // CodePipeline\n        stage.addAction(JenkinsAction.Builder.create()\n                // Copy 'actionName' and 'runOrder' from the options\n                .actionName(options.getActionName())\n                .runOrder(options.getRunOrder())\n\n                // Jenkins-specific configuration\n                .type(JenkinsActionType.TEST)\n                .jenkinsProvider(this.provider)\n                .projectName(\"MyJenkinsProject\")\n\n                // Translate the FileSet into a codepipeline.Artifact\n                .inputs(List.of(options.artifacts.toCodePipeline(this.input)))\n                .build());\n\n        return CodePipelineActionFactoryResult.builder().runOrdersConsumed(1).build();\n    }\n}",
          "version": "1"
        },
        "$": {
          "source": "class MyJenkinsStep extends pipelines.Step implements pipelines.ICodePipelineActionFactory {\n  constructor(\n    private readonly provider: cpactions.JenkinsProvider,\n    private readonly input: pipelines.FileSet,\n  ) {\n    super('MyJenkinsStep');\n\n    // This is necessary if your step accepts things like environment variables\n    // that may contain outputs from other steps. It doesn't matter what the\n    // structure is, as long as it contains the values that may contain outputs.\n    this.discoverReferencedOutputs({\n      env: { /* ... */ }\n    });\n  }\n\n  public produceAction(stage: codepipeline.IStage, options: pipelines.ProduceActionOptions): pipelines.CodePipelineActionFactoryResult {\n\n    // This is where you control what type of Action gets added to the\n    // CodePipeline\n    stage.addAction(new cpactions.JenkinsAction({\n      // Copy 'actionName' and 'runOrder' from the options\n      actionName: options.actionName,\n      runOrder: options.runOrder,\n\n      // Jenkins-specific configuration\n      type: cpactions.JenkinsActionType.TEST,\n      jenkinsProvider: this.provider,\n      projectName: 'MyJenkinsProject',\n\n      // Translate the FileSet into a codepipeline.Artifact\n      inputs: [options.artifacts.toCodePipeline(this.input)],\n    }));\n\n    return { runOrdersConsumed: 1 };\n  }\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 796
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.IJenkinsProvider",
        "@aws-cdk/aws-codepipeline-actions.JenkinsAction",
        "@aws-cdk/aws-codepipeline-actions.JenkinsActionProps",
        "@aws-cdk/aws-codepipeline-actions.JenkinsActionType",
        "@aws-cdk/aws-codepipeline-actions.JenkinsActionType#TEST",
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/aws-codepipeline.IStage#addAction",
        "@aws-cdk/pipelines.ArtifactMap#toCodePipeline",
        "@aws-cdk/pipelines.FileSet",
        "@aws-cdk/pipelines.ProduceActionOptions#actionName",
        "@aws-cdk/pipelines.ProduceActionOptions#artifacts",
        "@aws-cdk/pipelines.ProduceActionOptions#runOrder",
        "@aws-cdk/pipelines.Step",
        "@aws-cdk/pipelines.Step#discoverReferencedOutputs"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nclass MyJenkinsStep extends pipelines.Step implements pipelines.ICodePipelineActionFactory {\n  constructor(\n    private readonly provider: cpactions.JenkinsProvider,\n    private readonly input: pipelines.FileSet,\n  ) {\n    super('MyJenkinsStep');\n\n    // This is necessary if your step accepts things like environment variables\n    // that may contain outputs from other steps. It doesn't matter what the\n    // structure is, as long as it contains the values that may contain outputs.\n    this.discoverReferencedOutputs({\n      env: { /* ... */ }\n    });\n  }\n\n  public produceAction(stage: codepipeline.IStage, options: pipelines.ProduceActionOptions): pipelines.CodePipelineActionFactoryResult {\n\n    // This is where you control what type of Action gets added to the\n    // CodePipeline\n    stage.addAction(new cpactions.JenkinsAction({\n      // Copy 'actionName' and 'runOrder' from the options\n      actionName: options.actionName,\n      runOrder: options.runOrder,\n\n      // Jenkins-specific configuration\n      type: cpactions.JenkinsActionType.TEST,\n      jenkinsProvider: this.provider,\n      projectName: 'MyJenkinsProject',\n\n      // Translate the FileSet into a codepipeline.Artifact\n      inputs: [options.artifacts.toCodePipeline(this.input)],\n    }));\n\n    return { runOrdersConsumed: 1 };\n  }\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 45,
        "102": 1,
        "104": 3,
        "117": 2,
        "119": 1,
        "138": 2,
        "153": 5,
        "156": 4,
        "161": 1,
        "162": 1,
        "169": 5,
        "192": 1,
        "193": 4,
        "194": 13,
        "196": 4,
        "197": 1,
        "216": 2,
        "223": 2,
        "226": 3,
        "235": 1,
        "245": 1,
        "279": 2,
        "281": 8
      },
      "fqnsFingerprint": "b23768483faf23b6c05f0c6b1ea08b2863ee136091ea88d2d0ebd3cb8586a9d0"
    },
    "02cace928631db016d6f90ee515968363c53f6262f1983069f4848763ab9b3ad": {
      "translations": {
        "python": {
          "source": "pipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"]\n    ),\n\n    # Turn this on because the pipeline uses Docker image assets\n    docker_enabled_for_self_mutation=True\n)\n\npipeline.add_wave(\"MyWave\",\n    post=[\n        pipelines.CodeBuildStep(\"RunApproval\",\n            commands=[\"command-from-image\"],\n            build_environment=codebuild.BuildEnvironment(\n                # The user of a Docker image asset in the pipeline requires turning on\n                # 'dockerEnabledForSelfMutation'.\n                build_image=codebuild.LinuxBuildImage.from_asset(self, \"Image\",\n                    directory=\"./docker-image\"\n                )\n            )\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    }),\n\n    // Turn this on because the pipeline uses Docker image assets\n    DockerEnabledForSelfMutation = true\n});\n\npipeline.AddWave(\"MyWave\", new WaveOptions {\n    Post = new [] {\n        new CodeBuildStep(\"RunApproval\", new CodeBuildStepProps {\n            Commands = new [] { \"command-from-image\" },\n            BuildEnvironment = new BuildEnvironment {\n                // The user of a Docker image asset in the pipeline requires turning on\n                // 'dockerEnabledForSelfMutation'.\n                BuildImage = LinuxBuildImage.FromAsset(this, \"Image\", new DockerImageAssetProps {\n                    Directory = \"./docker-image\"\n                })\n            }\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n\n        // Turn this on because the pipeline uses Docker image assets\n        .dockerEnabledForSelfMutation(true)\n        .build();\n\npipeline.addWave(\"MyWave\", WaveOptions.builder()\n        .post(List.of(\n            CodeBuildStep.Builder.create(\"RunApproval\")\n                    .commands(List.of(\"command-from-image\"))\n                    .buildEnvironment(BuildEnvironment.builder()\n                            // The user of a Docker image asset in the pipeline requires turning on\n                            // 'dockerEnabledForSelfMutation'.\n                            .buildImage(LinuxBuildImage.fromAsset(this, \"Image\", DockerImageAssetProps.builder()\n                                    .directory(\"./docker-image\")\n                                    .build()))\n                            .build())\n                    .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: ['npm ci','npm run build','npx cdk synth'],\n  }),\n\n  // Turn this on because the pipeline uses Docker image assets\n  dockerEnabledForSelfMutation: true,\n});\n\npipeline.addWave('MyWave', {\n  post: [\n    new pipelines.CodeBuildStep('RunApproval', {\n      commands: ['command-from-image'],\n      buildEnvironment: {\n        // The user of a Docker image asset in the pipeline requires turning on\n        // 'dockerEnabledForSelfMutation'.\n        buildImage: codebuild.LinuxBuildImage.fromAsset(this, 'Image', {\n          directory: './docker-image',\n        }),\n      },\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 863
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage#fromAsset",
        "@aws-cdk/aws-ecr-assets.DockerImageAssetProps",
        "@aws-cdk/pipelines.CodeBuildStep",
        "@aws-cdk/pipelines.CodeBuildStepProps",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.PipelineBase#addWave",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "@aws-cdk/pipelines.WaveOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: ['npm ci','npm run build','npx cdk synth'],\n  }),\n\n  // Turn this on because the pipeline uses Docker image assets\n  dockerEnabledForSelfMutation: true,\n});\n\npipeline.addWave('MyWave', {\n  post: [\n    new pipelines.CodeBuildStep('RunApproval', {\n      commands: ['command-from-image'],\n      buildEnvironment: {\n        // The user of a Docker image asset in the pipeline requires turning on\n        // 'dockerEnabledForSelfMutation'.\n        buildImage: codebuild.LinuxBuildImage.fromAsset(this, 'Image', {\n          directory: './docker-image',\n        }),\n      },\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 25,
        "104": 2,
        "106": 1,
        "192": 3,
        "193": 7,
        "194": 8,
        "196": 3,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "1dca25e6bf638f81fe2313afc3cf97679d46d14bf6c704f6494f25992863e05a"
    },
    "55039e8e0cb056fb93bcf1a2c0d976eccb349791e4df9d9067933e7c6089648c": {
      "translations": {
        "python": {
          "source": "pipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"]\n    ),\n\n    # Turn this on because the application uses bundled file assets\n    docker_enabled_for_synth=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    }),\n\n    // Turn this on because the application uses bundled file assets\n    DockerEnabledForSynth = true\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n\n        // Turn this on because the application uses bundled file assets\n        .dockerEnabledForSynth(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: ['npm ci','npm run build','npx cdk synth'],\n  }),\n\n  // Turn this on because the application uses bundled file assets\n  dockerEnabledForSynth: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 902
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: ['npm ci','npm run build','npx cdk synth'],\n  }),\n\n  // Turn this on because the application uses bundled file assets\n  dockerEnabledForSynth: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 13,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "05f3c5c83c574338bd55ae7128b114582eb8da438f550ae5890faaa601182410"
    },
    "ae9d7f3bce376934a51f13d41732c728486fe8199ca6f32d4d571c5aee7433cf": {
      "translations": {
        "python": {
          "source": "docker_hub_secret = secretsmanager.Secret.from_secret_complete_arn(self, \"DHSecret\", \"arn:aws:...\")\ncustom_reg_secret = secretsmanager.Secret.from_secret_complete_arn(self, \"CRSecret\", \"arn:aws:...\")\nrepo1 = ecr.Repository.from_repository_arn(self, \"Repo\", \"arn:aws:ecr:eu-west-1:0123456789012:repository/Repo1\")\nrepo2 = ecr.Repository.from_repository_arn(self, \"Repo\", \"arn:aws:ecr:eu-west-1:0123456789012:repository/Repo2\")\n\npipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    docker_credentials=[\n        pipelines.DockerCredential.docker_hub(docker_hub_secret),\n        pipelines.DockerCredential.custom_registry(\"dockerregistry.example.com\", custom_reg_secret),\n        pipelines.DockerCredential.ecr([repo1, repo2])\n    ],\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ISecret dockerHubSecret = Secret.FromSecretCompleteArn(this, \"DHSecret\", \"arn:aws:...\");\nISecret customRegSecret = Secret.FromSecretCompleteArn(this, \"CRSecret\", \"arn:aws:...\");\nIRepository repo1 = Repository.FromRepositoryArn(this, \"Repo\", \"arn:aws:ecr:eu-west-1:0123456789012:repository/Repo1\");\nIRepository repo2 = Repository.FromRepositoryArn(this, \"Repo\", \"arn:aws:ecr:eu-west-1:0123456789012:repository/Repo2\");\n\nCodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    DockerCredentials = new [] { DockerCredential.DockerHub(dockerHubSecret), DockerCredential.CustomRegistry(\"dockerregistry.example.com\", customRegSecret), DockerCredential.Ecr(new [] { repo1, repo2 }) },\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "ISecret dockerHubSecret = Secret.fromSecretCompleteArn(this, \"DHSecret\", \"arn:aws:...\");\nISecret customRegSecret = Secret.fromSecretCompleteArn(this, \"CRSecret\", \"arn:aws:...\");\nIRepository repo1 = Repository.fromRepositoryArn(this, \"Repo\", \"arn:aws:ecr:eu-west-1:0123456789012:repository/Repo1\");\nIRepository repo2 = Repository.fromRepositoryArn(this, \"Repo\", \"arn:aws:ecr:eu-west-1:0123456789012:repository/Repo2\");\n\nCodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .dockerCredentials(List.of(DockerCredential.dockerHub(dockerHubSecret), DockerCredential.customRegistry(\"dockerregistry.example.com\", customRegSecret), DockerCredential.ecr(List.of(repo1, repo2))))\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const dockerHubSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'DHSecret', 'arn:aws:...');\nconst customRegSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'CRSecret', 'arn:aws:...');\nconst repo1 = ecr.Repository.fromRepositoryArn(this, 'Repo', 'arn:aws:ecr:eu-west-1:0123456789012:repository/Repo1');\nconst repo2 = ecr.Repository.fromRepositoryArn(this, 'Repo', 'arn:aws:ecr:eu-west-1:0123456789012:repository/Repo2');\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  dockerCredentials: [\n    pipelines.DockerCredential.dockerHub(dockerHubSecret),\n    pipelines.DockerCredential.customRegistry('dockerregistry.example.com', customRegSecret),\n    pipelines.DockerCredential.ecr([repo1, repo2]),\n  ],\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: ['npm ci','npm run build','npx cdk synth'],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 927
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-ecr.Repository",
        "@aws-cdk/aws-ecr.Repository#fromRepositoryArn",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretCompleteArn",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.DockerCredential",
        "@aws-cdk/pipelines.DockerCredential#customRegistry",
        "@aws-cdk/pipelines.DockerCredential#dockerHub",
        "@aws-cdk/pipelines.DockerCredential#ecr",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst dockerHubSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'DHSecret', 'arn:aws:...');\nconst customRegSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'CRSecret', 'arn:aws:...');\nconst repo1 = ecr.Repository.fromRepositoryArn(this, 'Repo', 'arn:aws:ecr:eu-west-1:0123456789012:repository/Repo1');\nconst repo2 = ecr.Repository.fromRepositoryArn(this, 'Repo', 'arn:aws:ecr:eu-west-1:0123456789012:repository/Repo2');\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  dockerCredentials: [\n    pipelines.DockerCredential.dockerHub(dockerHubSecret),\n    pipelines.DockerCredential.customRegistry('dockerregistry.example.com', customRegSecret),\n    pipelines.DockerCredential.ecr([repo1, repo2]),\n  ],\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: ['npm ci','npm run build','npx cdk synth'],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 17,
        "75": 42,
        "104": 5,
        "192": 3,
        "193": 3,
        "194": 18,
        "196": 8,
        "197": 2,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 5
      },
      "fqnsFingerprint": "d1f616ac7062c286500721b065433fcc8c47b63d711b958f609799862c9684c6"
    },
    "e8825522ac858411630db054de0bebfd0100cdd97d824ff06d85ae8bdc2e16e4": {
      "translations": {
        "python": {
          "source": "docker_hub_secret = secretsmanager.Secret.from_secret_complete_arn(self, \"DHSecret\", \"arn:aws:...\")\n# Only the image asset publishing actions will be granted read access to the secret.\ncreds = pipelines.DockerCredential.docker_hub(docker_hub_secret, usages=[pipelines.DockerCredentialUsage.ASSET_PUBLISHING])",
          "version": "2"
        },
        "csharp": {
          "source": "ISecret dockerHubSecret = Secret.FromSecretCompleteArn(this, \"DHSecret\", \"arn:aws:...\");\n// Only the image asset publishing actions will be granted read access to the secret.\nDockerCredential creds = DockerCredential.DockerHub(dockerHubSecret, new ExternalDockerCredentialOptions { Usages = new [] { DockerCredentialUsage.ASSET_PUBLISHING } });",
          "version": "1"
        },
        "java": {
          "source": "ISecret dockerHubSecret = Secret.fromSecretCompleteArn(this, \"DHSecret\", \"arn:aws:...\");\n// Only the image asset publishing actions will be granted read access to the secret.\nDockerCredential creds = DockerCredential.dockerHub(dockerHubSecret, ExternalDockerCredentialOptions.builder().usages(List.of(DockerCredentialUsage.ASSET_PUBLISHING)).build());",
          "version": "1"
        },
        "$": {
          "source": "const dockerHubSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'DHSecret', 'arn:aws:...');\n// Only the image asset publishing actions will be granted read access to the secret.\nconst creds = pipelines.DockerCredential.dockerHub(dockerHubSecret, { usages: [pipelines.DockerCredentialUsage.ASSET_PUBLISHING] });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 960
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretCompleteArn",
        "@aws-cdk/pipelines.DockerCredential",
        "@aws-cdk/pipelines.DockerCredential#dockerHub",
        "@aws-cdk/pipelines.DockerCredentialUsage",
        "@aws-cdk/pipelines.DockerCredentialUsage#ASSET_PUBLISHING",
        "@aws-cdk/pipelines.ExternalDockerCredentialOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst dockerHubSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'DHSecret', 'arn:aws:...');\n// Only the image asset publishing actions will be granted read access to the secret.\nconst creds = pipelines.DockerCredential.dockerHub(dockerHubSecret, { usages: [pipelines.DockerCredentialUsage.ASSET_PUBLISHING] });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 6,
        "196": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "732180b7c772952068c5731823a78760824c6f55591a4c120f9fbb0a8d97953f"
    },
    "1d9d135e91366e0051432aca1299e1ac062504c46d9cf1b45abd73b526d24d5c": {
      "translations": {
        "python": {
          "source": "pipelines.CodePipeline(self, \"Pipeline\",\n    synth=pipelines.CodeBuildStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"...\", \"npm ci\", \"npm run build\", \"npx cdk synth\", \"...\"\n        ],\n        role_policy_statements=[\n            iam.PolicyStatement(\n                actions=[\"sts:AssumeRole\"],\n                resources=[\"*\"],\n                conditions={\n                    \"StringEquals\": {\n                        \"iam:_resource_tag/aws-cdk:bootstrap-role\": \"lookup\"\n                    }\n                }\n            )\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    Synth = new CodeBuildStep(\"Synth\", new CodeBuildStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"...\", \"npm ci\", \"npm run build\", \"npx cdk synth\", \"...\" },\n        RolePolicyStatements = new [] {\n            new PolicyStatement(new PolicyStatementProps {\n                Actions = new [] { \"sts:AssumeRole\" },\n                Resources = new [] { \"*\" },\n                Conditions = new Dictionary<string, object> {\n                    { \"StringEquals\", new Dictionary<string, string> {\n                        { \"iam:ResourceTag/aws-cdk:bootstrap-role\", \"lookup\" }\n                    } }\n                }\n            }) }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline.Builder.create(this, \"Pipeline\")\n        .synth(CodeBuildStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"...\", \"npm ci\", \"npm run build\", \"npx cdk synth\", \"...\"))\n                .rolePolicyStatements(List.of(\n                    PolicyStatement.Builder.create()\n                            .actions(List.of(\"sts:AssumeRole\"))\n                            .resources(List.of(\"*\"))\n                            .conditions(Map.of(\n                                    \"StringEquals\", Map.of(\n                                            \"iam:ResourceTag/aws-cdk:bootstrap-role\", \"lookup\")))\n                            .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.CodeBuildStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      // Commands to load cdk.context.json from somewhere here\n      '...',\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n      // Commands to store cdk.context.json back here\n      '...',\n    ],\n    rolePolicyStatements: [\n      new iam.PolicyStatement({\n        actions: ['sts:AssumeRole'],\n        resources: ['*'],\n        conditions: {\n          StringEquals: {\n            'iam:ResourceTag/aws-cdk:bootstrap-role': 'lookup',\n          },\n        },\n      }),\n    ],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 1139
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/pipelines.CodeBuildStep",
        "@aws-cdk/pipelines.CodeBuildStepProps",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.CodeBuildStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      // Commands to load cdk.context.json from somewhere here\n      '...',\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n      // Commands to store cdk.context.json back here\n      '...',\n    ],\n    rolePolicyStatements: [\n      new iam.PolicyStatement({\n        actions: ['sts:AssumeRole'],\n        resources: ['*'],\n        conditions: {\n          StringEquals: {\n            'iam:ResourceTag/aws-cdk:bootstrap-role': 'lookup',\n          },\n        },\n      }),\n    ],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 18,
        "104": 1,
        "192": 4,
        "193": 6,
        "194": 5,
        "196": 1,
        "197": 3,
        "226": 1,
        "281": 10
      },
      "fqnsFingerprint": "d83986d4916c1d10b9533a7935d3da8d5c35f9b4c0aab302c72c27b219339e0c"
    },
    "361fd4432833f9a0a4c639b0855099967db147ceb8fafb248d7dbee31680ddd9": {
      "translations": {
        "python": {
          "source": "# pipeline: pipelines.CodePipeline\n\nstage = MyApplicationStage(self, \"MyApplication\")\npipeline.add_stage(stage,\n    pre=[\n        pipelines.ConfirmPermissionsBroadening(\"Check\", stage=stage)\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline;\n\nMyApplicationStage stage = new MyApplicationStage(this, \"MyApplication\");\npipeline.AddStage(stage, new AddStageOpts {\n    Pre = new [] {\n        new ConfirmPermissionsBroadening(\"Check\", new PermissionsBroadeningCheckProps { Stage = stage }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline;\n\nMyApplicationStage stage = new MyApplicationStage(this, \"MyApplication\");\npipeline.addStage(stage, AddStageOpts.builder()\n        .pre(List.of(\n            ConfirmPermissionsBroadening.Builder.create(\"Check\").stage(stage).build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: pipelines.CodePipeline;\nconst stage = new MyApplicationStage(this, 'MyApplication');\npipeline.addStage(stage, {\n  pre: [\n    new pipelines.ConfirmPermissionsBroadening('Check', { stage }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 1222
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Stage",
        "@aws-cdk/pipelines.AddStageOpts",
        "@aws-cdk/pipelines.ConfirmPermissionsBroadening",
        "@aws-cdk/pipelines.PermissionsBroadeningCheckProps",
        "@aws-cdk/pipelines.PipelineBase#addStage",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: pipelines.CodePipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst stage = new MyApplicationStage(this, 'MyApplication');\npipeline.addStage(stage, {\n  pre: [\n    new pipelines.ConfirmPermissionsBroadening('Check', { stage }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "2d4e0da4b2dc59e6f9bcb2ae4153de02862b63622dc406bd246df774d34c9744"
    },
    "0e0696a216028e47e7cd8d7d0e456afe587794458bd354a642f52dd32479826c": {
      "translations": {
        "python": {
          "source": "# pipeline: pipelines.CodePipeline\n\ntopic = sns.Topic(self, \"SecurityChangesTopic\")\ntopic.add_subscription(subscriptions.EmailSubscription(\"test@email.com\"))\n\nstage = MyApplicationStage(self, \"MyApplication\")\npipeline.add_stage(stage,\n    pre=[\n        pipelines.ConfirmPermissionsBroadening(\"Check\",\n            stage=stage,\n            notification_topic=topic\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline;\n\nTopic topic = new Topic(this, \"SecurityChangesTopic\");\ntopic.AddSubscription(new EmailSubscription(\"test@email.com\"));\n\nMyApplicationStage stage = new MyApplicationStage(this, \"MyApplication\");\npipeline.AddStage(stage, new AddStageOpts {\n    Pre = new [] {\n        new ConfirmPermissionsBroadening(\"Check\", new PermissionsBroadeningCheckProps {\n            Stage = stage,\n            NotificationTopic = topic\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline;\n\nTopic topic = new Topic(this, \"SecurityChangesTopic\");\ntopic.addSubscription(new EmailSubscription(\"test@email.com\"));\n\nMyApplicationStage stage = new MyApplicationStage(this, \"MyApplication\");\npipeline.addStage(stage, AddStageOpts.builder()\n        .pre(List.of(\n            ConfirmPermissionsBroadening.Builder.create(\"Check\")\n                    .stage(stage)\n                    .notificationTopic(topic)\n                    .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: pipelines.CodePipeline;\nconst topic = new sns.Topic(this, 'SecurityChangesTopic');\ntopic.addSubscription(new subscriptions.EmailSubscription('test@email.com'));\n\nconst stage = new MyApplicationStage(this, 'MyApplication');\npipeline.addStage(stage, {\n  pre: [\n    new pipelines.ConfirmPermissionsBroadening('Check', {\n      stage,\n      notificationTopic: topic,\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 1236
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns-subscriptions.EmailSubscription",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/aws-sns.ITopicSubscription",
        "@aws-cdk/aws-sns.Topic",
        "@aws-cdk/aws-sns.TopicBase#addSubscription",
        "@aws-cdk/core.Stage",
        "@aws-cdk/pipelines.AddStageOpts",
        "@aws-cdk/pipelines.ConfirmPermissionsBroadening",
        "@aws-cdk/pipelines.PermissionsBroadeningCheckProps",
        "@aws-cdk/pipelines.PipelineBase#addStage",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: pipelines.CodePipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst topic = new sns.Topic(this, 'SecurityChangesTopic');\ntopic.addSubscription(new subscriptions.EmailSubscription('test@email.com'));\n\nconst stage = new MyApplicationStage(this, 'MyApplication');\npipeline.addStage(stage, {\n  pre: [\n    new pipelines.ConfirmPermissionsBroadening('Check', {\n      stage,\n      notificationTopic: topic,\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 21,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 2,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "ca7466324937c306ae3a90508b2eeb1d744a820c1a270af7f7b62255a4885262"
    },
    "62dbd92b9bf3725bb691cfeae811127d7b6eae2be34dce84abcd07340e1b6ae9": {
      "translations": {
        "python": {
          "source": "source_artifact = codepipeline.Artifact()\ncloud_assembly_artifact = codepipeline.Artifact()\npipeline = pipelines.CdkPipeline(self, \"MyPipeline\",\n    cloud_assembly_artifact=cloud_assembly_artifact,\n    synth_action=pipelines.SimpleSynthAction.standard_npm_synth(\n        source_artifact=source_artifact,\n        cloud_assembly_artifact=cloud_assembly_artifact,\n        environment=codebuild.BuildEnvironment(\n            privileged=True\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Artifact sourceArtifact = new Artifact();\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline pipeline = new CdkPipeline(this, \"MyPipeline\", new CdkPipelineProps {\n    CloudAssemblyArtifact = cloudAssemblyArtifact,\n    SynthAction = SimpleSynthAction.StandardNpmSynth(new StandardNpmSynthOptions {\n        SourceArtifact = sourceArtifact,\n        CloudAssemblyArtifact = cloudAssemblyArtifact,\n        Environment = new BuildEnvironment {\n            Privileged = true\n        }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Artifact sourceArtifact = new Artifact();\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline pipeline = CdkPipeline.Builder.create(this, \"MyPipeline\")\n        .cloudAssemblyArtifact(cloudAssemblyArtifact)\n        .synthAction(SimpleSynthAction.standardNpmSynth(StandardNpmSynthOptions.builder()\n                .sourceArtifact(sourceArtifact)\n                .cloudAssemblyArtifact(cloudAssemblyArtifact)\n                .environment(BuildEnvironment.builder()\n                        .privileged(true)\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const sourceArtifact = new codepipeline.Artifact();\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst pipeline = new pipelines.CdkPipeline(this, 'MyPipeline', {\n  cloudAssemblyArtifact,\n  synthAction: pipelines.SimpleSynthAction.standardNpmSynth({\n    sourceArtifact,\n    cloudAssemblyArtifact,\n    environment: {\n      privileged: true,\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 1360
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/pipelines.CdkPipeline",
        "@aws-cdk/pipelines.CdkPipelineProps",
        "@aws-cdk/pipelines.SimpleSynthAction",
        "@aws-cdk/pipelines.SimpleSynthAction#standardNpmSynth",
        "@aws-cdk/pipelines.StandardNpmSynthOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sourceArtifact = new codepipeline.Artifact();\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst pipeline = new pipelines.CdkPipeline(this, 'MyPipeline', {\n  cloudAssemblyArtifact,\n  synthAction: pipelines.SimpleSynthAction.standardNpmSynth({\n    sourceArtifact,\n    cloudAssemblyArtifact,\n    environment: {\n      privileged: true,\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 18,
        "104": 1,
        "106": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 3
      },
      "fqnsFingerprint": "f779872a9951899b78e52783e7b095599960f7d86b86e9c2d5fba9ca8c5ca348"
    },
    "cb740e631d8832a26f525d795b1700fc095d6526d76c7a2581150177f4f36087": {
      "translations": {
        "python": {
          "source": "cloud_assembly_artifact = codepipeline.Artifact()\npipeline = pipelines.CdkPipeline(self, \"MyPipeline\",\n    self_mutating=True,\n    cloud_assembly_artifact=cloud_assembly_artifact\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Artifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline pipeline = new CdkPipeline(this, \"MyPipeline\", new CdkPipelineProps {\n    SelfMutating = true,\n    CloudAssemblyArtifact = cloudAssemblyArtifact\n});",
          "version": "1"
        },
        "java": {
          "source": "Artifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline pipeline = CdkPipeline.Builder.create(this, \"MyPipeline\")\n        .selfMutating(true)\n        .cloudAssemblyArtifact(cloudAssemblyArtifact)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const cloudAssemblyArtifact = new codepipeline.Artifact();\nconst pipeline = new pipelines.CdkPipeline(this, 'MyPipeline', {\n  selfMutating: true,\n  cloudAssemblyArtifact,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 1399
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/pipelines.CdkPipeline",
        "@aws-cdk/pipelines.CdkPipelineProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst pipeline = new pipelines.CdkPipeline(this, 'MyPipeline', {\n  selfMutating: true,\n  cloudAssemblyArtifact,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1
      },
      "fqnsFingerprint": "6094d33767aaca9572996aced96bebcdd4779ed9709b467964c81ebe683c719d"
    },
    "c0cdafba9cdd3e02ae3ab38bbbcf3d9ed3652597270d68a4f1e9d90191473055": {
      "translations": {
        "python": {
          "source": "Stack(self, \"MyStack\",\n    # Update this qualifier to match the one used above.\n    synthesizer=cdk.DefaultStackSynthesizer(\n        qualifier=\"randchars1234\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new Stack(this, \"MyStack\", new StackProps {\n    // Update this qualifier to match the one used above.\n    Synthesizer = new DefaultStackSynthesizer(new DefaultStackSynthesizerProps {\n        Qualifier = \"randchars1234\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Stack.Builder.create(this, \"MyStack\")\n        // Update this qualifier to match the one used above.\n        .synthesizer(DefaultStackSynthesizer.Builder.create()\n                .qualifier(\"randchars1234\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new Stack(this, 'MyStack', {\n  // Update this qualifier to match the one used above.\n  synthesizer: new cdk.DefaultStackSynthesizer({\n    qualifier: 'randchars1234',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/pipelines"
        },
        "field": {
          "field": "markdown",
          "line": 1438
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.DefaultStackSynthesizer",
        "@aws-cdk/core.DefaultStackSynthesizerProps",
        "@aws-cdk/core.IStackSynthesizer",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.StackProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew Stack(this, 'MyStack', {\n  // Update this qualifier to match the one used above.\n  synthesizer: new cdk.DefaultStackSynthesizer({\n    qualifier: 'randchars1234',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "193": 2,
        "194": 1,
        "197": 2,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "1e3178f9026808c756adbb3d3997d112258ac0a76d074a5b4044d405bd244c21"
    },
    "f6cab1773abfb8d5cc8d61e6797e37b37eada5d5254a31950cddb942664e91fe": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.pipelines as pipelines\n\nadd_manual_approval_options = pipelines.AddManualApprovalOptions(\n    action_name=\"actionName\",\n    run_order=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Pipelines;\n\nAddManualApprovalOptions addManualApprovalOptions = new AddManualApprovalOptions {\n    ActionName = \"actionName\",\n    RunOrder = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.pipelines.*;\n\nAddManualApprovalOptions addManualApprovalOptions = AddManualApprovalOptions.builder()\n        .actionName(\"actionName\")\n        .runOrder(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\nconst addManualApprovalOptions: pipelines.AddManualApprovalOptions = {\n  actionName: 'actionName',\n  runOrder: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.AddManualApprovalOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.AddManualApprovalOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst addManualApprovalOptions: pipelines.AddManualApprovalOptions = {\n  actionName: 'actionName',\n  runOrder: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "af02558548b8d23487a21743ad888925d43725c1c0caea5a3f13e1b6815894f5"
    },
    "88912bb82e24023ffe893b469c67d6e53c1095992099ea6c68412d72b0fe8107": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.pipelines as pipelines\n\nadd_stack_options = pipelines.AddStackOptions(\n    execute_run_order=123,\n    run_order=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Pipelines;\n\nAddStackOptions addStackOptions = new AddStackOptions {\n    ExecuteRunOrder = 123,\n    RunOrder = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.pipelines.*;\n\nAddStackOptions addStackOptions = AddStackOptions.builder()\n        .executeRunOrder(123)\n        .runOrder(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\nconst addStackOptions: pipelines.AddStackOptions = {\n  executeRunOrder: 123,\n  runOrder: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.AddStackOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.AddStackOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst addStackOptions: pipelines.AddStackOptions = {\n  executeRunOrder: 123,\n  runOrder: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "fa946233be24b2d554685c40a46ab6e9b49afb2a37f814deade8191a271696c1"
    },
    "66d1572753aee645a6e889cdec4b8b5f78b22f0f8940f54a87913f9e845c1ab6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.pipelines as pipelines\n\n# topic: sns.Topic\n\nadd_stage_options = pipelines.AddStageOptions(\n    confirm_broadening_permissions=False,\n    extra_run_order_space=123,\n    manual_approvals=False,\n    security_notification_topic=topic\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.Pipelines;\n\nTopic topic;\n\nAddStageOptions addStageOptions = new AddStageOptions {\n    ConfirmBroadeningPermissions = false,\n    ExtraRunOrderSpace = 123,\n    ManualApprovals = false,\n    SecurityNotificationTopic = topic\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.pipelines.*;\n\nTopic topic;\n\nAddStageOptions addStageOptions = AddStageOptions.builder()\n        .confirmBroadeningPermissions(false)\n        .extraRunOrderSpace(123)\n        .manualApprovals(false)\n        .securityNotificationTopic(topic)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const topic: sns.Topic;\nconst addStageOptions: pipelines.AddStageOptions = {\n  confirmBroadeningPermissions: false,\n  extraRunOrderSpace: 123,\n  manualApprovals: false,\n  securityNotificationTopic: topic,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.AddStageOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/pipelines.AddStageOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const topic: sns.Topic;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst addStageOptions: pipelines.AddStageOptions = {\n  confirmBroadeningPermissions: false,\n  extraRunOrderSpace: 123,\n  manualApprovals: false,\n  securityNotificationTopic: topic,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 13,
        "91": 2,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "64ae53ba03bdba5269af4ef18e7487960a93a2eb6f162027675fd46e9447f34f"
    },
    "e5659cfca68a62a3f907141dbf263fbf33e369c9ab0b85eb4cf936eebe284b7c": {
      "translations": {
        "python": {
          "source": "# pipeline: pipelines.CodePipeline\n\npreprod = MyApplicationStage(self, \"PreProd\")\nprod = MyApplicationStage(self, \"Prod\")\n\npipeline.add_stage(preprod,\n    post=[\n        pipelines.ShellStep(\"Validate Endpoint\",\n            commands=[\"curl -Ssf https://my.webservice.com/\"]\n        )\n    ]\n)\npipeline.add_stage(prod,\n    pre=[\n        pipelines.ManualApprovalStep(\"PromoteToProd\")\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline;\n\nMyApplicationStage preprod = new MyApplicationStage(this, \"PreProd\");\nMyApplicationStage prod = new MyApplicationStage(this, \"Prod\");\n\npipeline.AddStage(preprod, new AddStageOpts {\n    Post = new [] {\n        new ShellStep(\"Validate Endpoint\", new ShellStepProps {\n            Commands = new [] { \"curl -Ssf https://my.webservice.com/\" }\n        }) }\n});\npipeline.AddStage(prod, new AddStageOpts {\n    Pre = new [] {\n        new ManualApprovalStep(\"PromoteToProd\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline;\n\nMyApplicationStage preprod = new MyApplicationStage(this, \"PreProd\");\nMyApplicationStage prod = new MyApplicationStage(this, \"Prod\");\n\npipeline.addStage(preprod, AddStageOpts.builder()\n        .post(List.of(\n            ShellStep.Builder.create(\"Validate Endpoint\")\n                    .commands(List.of(\"curl -Ssf https://my.webservice.com/\"))\n                    .build()))\n        .build());\npipeline.addStage(prod, AddStageOpts.builder()\n        .pre(List.of(\n            new ManualApprovalStep(\"PromoteToProd\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: pipelines.CodePipeline;\nconst preprod = new MyApplicationStage(this, 'PreProd');\nconst prod = new MyApplicationStage(this, 'Prod');\n\npipeline.addStage(preprod, {\n  post: [\n    new pipelines.ShellStep('Validate Endpoint', {\n      commands: ['curl -Ssf https://my.webservice.com/'],\n    }),\n  ],\n});\npipeline.addStage(prod, {\n  pre: [\n    new pipelines.ManualApprovalStep('PromoteToProd'),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.AddStageOpts"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Stage",
        "@aws-cdk/pipelines.AddStageOpts",
        "@aws-cdk/pipelines.ManualApprovalStep",
        "@aws-cdk/pipelines.PipelineBase#addStage",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: pipelines.CodePipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst preprod = new MyApplicationStage(this, 'PreProd');\nconst prod = new MyApplicationStage(this, 'Prod');\n\npipeline.addStage(preprod, {\n  post: [\n    new pipelines.ShellStep('Validate Endpoint', {\n      commands: ['curl -Ssf https://my.webservice.com/'],\n    }),\n  ],\n});\npipeline.addStage(prod, {\n  pre: [\n    new pipelines.ManualApprovalStep('PromoteToProd'),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 3,
        "194": 4,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b03a04713cd09c8fc498feefb1fa4401048b9b3b66f4b181460e2273e165f765"
    },
    "6f1a9614d954bc17c87ab154af37c883fea3318a8a4838e2870783970d0c087c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.pipelines as pipelines\n\n# artifact: codepipeline.Artifact\n\nadditional_artifact = pipelines.AdditionalArtifact(\n    artifact=artifact,\n    directory=\"directory\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.Pipelines;\n\nArtifact artifact;\n\nAdditionalArtifact additionalArtifact = new AdditionalArtifact {\n    Artifact = artifact,\n    Directory = \"directory\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.pipelines.*;\n\nArtifact artifact;\n\nAdditionalArtifact additionalArtifact = AdditionalArtifact.builder()\n        .artifact(artifact)\n        .directory(\"directory\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\nconst additionalArtifact: pipelines.AdditionalArtifact = {\n  artifact: artifact,\n  directory: 'directory',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.AdditionalArtifact"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/pipelines.AdditionalArtifact"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst additionalArtifact: pipelines.AdditionalArtifact = {\n  artifact: artifact,\n  directory: 'directory',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 11,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "ecfd1ee6a3a5b4bba9e633ac4a804c2513b090dd38b95bfd8d1942d916a616dd"
    },
    "88d0d3888fc0948ae9034ed76af51ab3e7967e162da25ea9bef93a2bf7e16250": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.pipelines as pipelines\n\nartifact_map = pipelines.ArtifactMap()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Pipelines;\n\nArtifactMap artifactMap = new ArtifactMap();",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.pipelines.*;\n\nArtifactMap artifactMap = new ArtifactMap();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\nconst artifactMap = new pipelines.ArtifactMap();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.ArtifactMap"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.ArtifactMap"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst artifactMap = new pipelines.ArtifactMap();\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "a757e12ddfd3f23a9e41866db384e3eca1780c8b2681c32f8bdaf18e004b1983"
    },
    "793b3a6339d96889694a64f0a8e57d78b75dcda47986ea0c45b8b14d5e5d6567": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.pipelines as pipelines\n\nasset_publishing_command = pipelines.AssetPublishingCommand(\n    asset_id=\"assetId\",\n    asset_manifest_path=\"assetManifestPath\",\n    asset_publishing_role_arn=\"assetPublishingRoleArn\",\n    asset_selector=\"assetSelector\",\n    asset_type=pipelines.AssetType.FILE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Pipelines;\n\nAssetPublishingCommand assetPublishingCommand = new AssetPublishingCommand {\n    AssetId = \"assetId\",\n    AssetManifestPath = \"assetManifestPath\",\n    AssetPublishingRoleArn = \"assetPublishingRoleArn\",\n    AssetSelector = \"assetSelector\",\n    AssetType = AssetType.FILE\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.pipelines.*;\n\nAssetPublishingCommand assetPublishingCommand = AssetPublishingCommand.builder()\n        .assetId(\"assetId\")\n        .assetManifestPath(\"assetManifestPath\")\n        .assetPublishingRoleArn(\"assetPublishingRoleArn\")\n        .assetSelector(\"assetSelector\")\n        .assetType(AssetType.FILE)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\nconst assetPublishingCommand: pipelines.AssetPublishingCommand = {\n  assetId: 'assetId',\n  assetManifestPath: 'assetManifestPath',\n  assetPublishingRoleArn: 'assetPublishingRoleArn',\n  assetSelector: 'assetSelector',\n  assetType: pipelines.AssetType.FILE,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.AssetPublishingCommand"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.AssetPublishingCommand",
        "@aws-cdk/pipelines.AssetType",
        "@aws-cdk/pipelines.AssetType#FILE"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst assetPublishingCommand: pipelines.AssetPublishingCommand = {\n  assetId: 'assetId',\n  assetManifestPath: 'assetManifestPath',\n  assetPublishingRoleArn: 'assetPublishingRoleArn',\n  assetSelector: 'assetSelector',\n  assetType: pipelines.AssetType.FILE,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 12,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "5d655fba10a8f0bc3cd3b001af774d94eadd92516afd5da330d02d014d36f8e1"
    },
    "7464d0da7697c86fca64f9bd8c2967ac448323af9dd0fc4ad94936f5ec041925": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.pipelines as pipelines\n\n# topic: sns.Topic\n\nbase_stage_options = pipelines.BaseStageOptions(\n    confirm_broadening_permissions=False,\n    security_notification_topic=topic\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.Pipelines;\n\nTopic topic;\n\nBaseStageOptions baseStageOptions = new BaseStageOptions {\n    ConfirmBroadeningPermissions = false,\n    SecurityNotificationTopic = topic\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.pipelines.*;\n\nTopic topic;\n\nBaseStageOptions baseStageOptions = BaseStageOptions.builder()\n        .confirmBroadeningPermissions(false)\n        .securityNotificationTopic(topic)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const topic: sns.Topic;\nconst baseStageOptions: pipelines.BaseStageOptions = {\n  confirmBroadeningPermissions: false,\n  securityNotificationTopic: topic,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.BaseStageOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/pipelines.BaseStageOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const topic: sns.Topic;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst baseStageOptions: pipelines.BaseStageOptions = {\n  confirmBroadeningPermissions: false,\n  securityNotificationTopic: topic,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "91": 1,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "1ff469d3a2e095352aa66b2edc6d1168df0ccfd6e720ce3c0e0cd83770e4bf37"
    },
    "23d1d6ca3a3716e4f634cd05ad96488ffb89c70cf9b26b605c885a2b8cfff927": {
      "translations": {
        "python": {
          "source": "source_artifact = codepipeline.Artifact()\ncloud_assembly_artifact = codepipeline.Artifact()\npipeline = pipelines.CdkPipeline(self, \"MyPipeline\",\n    cloud_assembly_artifact=cloud_assembly_artifact,\n    synth_action=pipelines.SimpleSynthAction.standard_npm_synth(\n        source_artifact=source_artifact,\n        cloud_assembly_artifact=cloud_assembly_artifact,\n        environment=codebuild.BuildEnvironment(\n            privileged=True\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Artifact sourceArtifact = new Artifact();\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline pipeline = new CdkPipeline(this, \"MyPipeline\", new CdkPipelineProps {\n    CloudAssemblyArtifact = cloudAssemblyArtifact,\n    SynthAction = SimpleSynthAction.StandardNpmSynth(new StandardNpmSynthOptions {\n        SourceArtifact = sourceArtifact,\n        CloudAssemblyArtifact = cloudAssemblyArtifact,\n        Environment = new BuildEnvironment {\n            Privileged = true\n        }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Artifact sourceArtifact = new Artifact();\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline pipeline = CdkPipeline.Builder.create(this, \"MyPipeline\")\n        .cloudAssemblyArtifact(cloudAssemblyArtifact)\n        .synthAction(SimpleSynthAction.standardNpmSynth(StandardNpmSynthOptions.builder()\n                .sourceArtifact(sourceArtifact)\n                .cloudAssemblyArtifact(cloudAssemblyArtifact)\n                .environment(BuildEnvironment.builder()\n                        .privileged(true)\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const sourceArtifact = new codepipeline.Artifact();\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst pipeline = new pipelines.CdkPipeline(this, 'MyPipeline', {\n  cloudAssemblyArtifact,\n  synthAction: pipelines.SimpleSynthAction.standardNpmSynth({\n    sourceArtifact,\n    cloudAssemblyArtifact,\n    environment: {\n      privileged: true,\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.CdkPipeline"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/pipelines.CdkPipeline",
        "@aws-cdk/pipelines.CdkPipelineProps",
        "@aws-cdk/pipelines.SimpleSynthAction",
        "@aws-cdk/pipelines.SimpleSynthAction#standardNpmSynth",
        "@aws-cdk/pipelines.StandardNpmSynthOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sourceArtifact = new codepipeline.Artifact();\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst pipeline = new pipelines.CdkPipeline(this, 'MyPipeline', {\n  cloudAssemblyArtifact,\n  synthAction: pipelines.SimpleSynthAction.standardNpmSynth({\n    sourceArtifact,\n    cloudAssemblyArtifact,\n    environment: {\n      privileged: true,\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 18,
        "104": 1,
        "106": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 3
      },
      "fqnsFingerprint": "f779872a9951899b78e52783e7b095599960f7d86b86e9c2d5fba9ca8c5ca348"
    },
    "f6dc0394bfffe09a8b2cc0b788e114401afc0b9bccf1b5a5707ca1a6a7a39acc": {
      "translations": {
        "python": {
          "source": "source_artifact = codepipeline.Artifact()\ncloud_assembly_artifact = codepipeline.Artifact()\npipeline = pipelines.CdkPipeline(self, \"MyPipeline\",\n    cloud_assembly_artifact=cloud_assembly_artifact,\n    synth_action=pipelines.SimpleSynthAction.standard_npm_synth(\n        source_artifact=source_artifact,\n        cloud_assembly_artifact=cloud_assembly_artifact,\n        environment=codebuild.BuildEnvironment(\n            privileged=True\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Artifact sourceArtifact = new Artifact();\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline pipeline = new CdkPipeline(this, \"MyPipeline\", new CdkPipelineProps {\n    CloudAssemblyArtifact = cloudAssemblyArtifact,\n    SynthAction = SimpleSynthAction.StandardNpmSynth(new StandardNpmSynthOptions {\n        SourceArtifact = sourceArtifact,\n        CloudAssemblyArtifact = cloudAssemblyArtifact,\n        Environment = new BuildEnvironment {\n            Privileged = true\n        }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Artifact sourceArtifact = new Artifact();\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline pipeline = CdkPipeline.Builder.create(this, \"MyPipeline\")\n        .cloudAssemblyArtifact(cloudAssemblyArtifact)\n        .synthAction(SimpleSynthAction.standardNpmSynth(StandardNpmSynthOptions.builder()\n                .sourceArtifact(sourceArtifact)\n                .cloudAssemblyArtifact(cloudAssemblyArtifact)\n                .environment(BuildEnvironment.builder()\n                        .privileged(true)\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const sourceArtifact = new codepipeline.Artifact();\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst pipeline = new pipelines.CdkPipeline(this, 'MyPipeline', {\n  cloudAssemblyArtifact,\n  synthAction: pipelines.SimpleSynthAction.standardNpmSynth({\n    sourceArtifact,\n    cloudAssemblyArtifact,\n    environment: {\n      privileged: true,\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.CdkPipelineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/pipelines.CdkPipeline",
        "@aws-cdk/pipelines.CdkPipelineProps",
        "@aws-cdk/pipelines.SimpleSynthAction",
        "@aws-cdk/pipelines.SimpleSynthAction#standardNpmSynth",
        "@aws-cdk/pipelines.StandardNpmSynthOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sourceArtifact = new codepipeline.Artifact();\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst pipeline = new pipelines.CdkPipeline(this, 'MyPipeline', {\n  cloudAssemblyArtifact,\n  synthAction: pipelines.SimpleSynthAction.standardNpmSynth({\n    sourceArtifact,\n    cloudAssemblyArtifact,\n    environment: {\n      privileged: true,\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 18,
        "104": 1,
        "106": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 3
      },
      "fqnsFingerprint": "f779872a9951899b78e52783e7b095599960f7d86b86e9c2d5fba9ca8c5ca348"
    },
    "4c824445ec15321036824b6d6555ba0647357d6c2f33a8fd50a0df6674b382e5": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.pipelines as pipelines\n\n# artifact: codepipeline.Artifact\n\ncdk_stack_action_from_artifact_options = pipelines.CdkStackActionFromArtifactOptions(\n    cloud_assembly_input=artifact,\n\n    # the properties below are optional\n    base_action_name=\"baseActionName\",\n    change_set_name=\"changeSetName\",\n    execute_run_order=123,\n    output=artifact,\n    output_file_name=\"outputFileName\",\n    prepare_run_order=123,\n    stack_name=\"stackName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.Pipelines;\n\nArtifact artifact;\n\nCdkStackActionFromArtifactOptions cdkStackActionFromArtifactOptions = new CdkStackActionFromArtifactOptions {\n    CloudAssemblyInput = artifact,\n\n    // the properties below are optional\n    BaseActionName = \"baseActionName\",\n    ChangeSetName = \"changeSetName\",\n    ExecuteRunOrder = 123,\n    Output = artifact,\n    OutputFileName = \"outputFileName\",\n    PrepareRunOrder = 123,\n    StackName = \"stackName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.pipelines.*;\n\nArtifact artifact;\n\nCdkStackActionFromArtifactOptions cdkStackActionFromArtifactOptions = CdkStackActionFromArtifactOptions.builder()\n        .cloudAssemblyInput(artifact)\n\n        // the properties below are optional\n        .baseActionName(\"baseActionName\")\n        .changeSetName(\"changeSetName\")\n        .executeRunOrder(123)\n        .output(artifact)\n        .outputFileName(\"outputFileName\")\n        .prepareRunOrder(123)\n        .stackName(\"stackName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\nconst cdkStackActionFromArtifactOptions: pipelines.CdkStackActionFromArtifactOptions = {\n  cloudAssemblyInput: artifact,\n\n  // the properties below are optional\n  baseActionName: 'baseActionName',\n  changeSetName: 'changeSetName',\n  executeRunOrder: 123,\n  output: artifact,\n  outputFileName: 'outputFileName',\n  prepareRunOrder: 123,\n  stackName: 'stackName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.CdkStackActionFromArtifactOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/pipelines.CdkStackActionFromArtifactOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cdkStackActionFromArtifactOptions: pipelines.CdkStackActionFromArtifactOptions = {\n  cloudAssemblyInput: artifact,\n\n  // the properties below are optional\n  baseActionName: 'baseActionName',\n  changeSetName: 'changeSetName',\n  executeRunOrder: 123,\n  output: artifact,\n  outputFileName: 'outputFileName',\n  prepareRunOrder: 123,\n  stackName: 'stackName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 6,
        "75": 18,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "3dbec2dc9afebd6cb5ace1e6ce9ac0ecf215594883b325329901c8a626d3ac60"
    },
    "847092cbf5c834c66a82d4d1ef8aae691f5575c480c421275005cde5916e4883": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.pipelines as pipelines\n\n# artifact: codepipeline.Artifact\n# stage: codepipeline.IStage\n# stage_host: pipelines.IStageHost\n# topic: sns.Topic\n\ncdk_stage = pipelines.CdkStage(self, \"MyCdkStage\",\n    cloud_assembly_artifact=artifact,\n    host=stage_host,\n    pipeline_stage=stage,\n    stage_name=\"stageName\",\n\n    # the properties below are optional\n    confirm_broadening_permissions=False,\n    security_notification_topic=topic\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.Pipelines;\n\nArtifact artifact;\nIStage stage;\nIStageHost stageHost;\nTopic topic;\n\nCdkStage cdkStage = new CdkStage(this, \"MyCdkStage\", new CdkStageProps {\n    CloudAssemblyArtifact = artifact,\n    Host = stageHost,\n    PipelineStage = stage,\n    StageName = \"stageName\",\n\n    // the properties below are optional\n    ConfirmBroadeningPermissions = false,\n    SecurityNotificationTopic = topic\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.pipelines.*;\n\nArtifact artifact;\nIStage stage;\nIStageHost stageHost;\nTopic topic;\n\nCdkStage cdkStage = CdkStage.Builder.create(this, \"MyCdkStage\")\n        .cloudAssemblyArtifact(artifact)\n        .host(stageHost)\n        .pipelineStage(stage)\n        .stageName(\"stageName\")\n\n        // the properties below are optional\n        .confirmBroadeningPermissions(false)\n        .securityNotificationTopic(topic)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const stage: codepipeline.IStage;\ndeclare const stageHost: pipelines.IStageHost;\ndeclare const topic: sns.Topic;\nconst cdkStage = new pipelines.CdkStage(this, 'MyCdkStage', {\n  cloudAssemblyArtifact: artifact,\n  host: stageHost,\n  pipelineStage: stage,\n  stageName: 'stageName',\n\n  // the properties below are optional\n  confirmBroadeningPermissions: false,\n  securityNotificationTopic: topic,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.CdkStage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.IStage",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/pipelines.CdkStage",
        "@aws-cdk/pipelines.CdkStageProps",
        "@aws-cdk/pipelines.IStageHost",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const stage: codepipeline.IStage;\ndeclare const stageHost: pipelines.IStageHost;\ndeclare const topic: sns.Topic;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cdkStage = new pipelines.CdkStage(this, 'MyCdkStage', {\n  cloudAssemblyArtifact: artifact,\n  host: stageHost,\n  pipelineStage: stage,\n  stageName: 'stageName',\n\n  // the properties below are optional\n  confirmBroadeningPermissions: false,\n  securityNotificationTopic: topic,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 28,
        "91": 1,
        "104": 1,
        "130": 4,
        "153": 4,
        "169": 4,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "933ddef11272d478487e00f8b679c55dfaab4af58218fa59d07e39f3a67d120b"
    },
    "d94d404d413cb9fb9194b12a79a6b5a9c7dc4c883b6251dfdd7598a1f7cf32b8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_sns as sns\nimport aws_cdk.pipelines as pipelines\n\n# artifact: codepipeline.Artifact\n# stage: codepipeline.IStage\n# stage_host: pipelines.IStageHost\n# topic: sns.Topic\n\ncdk_stage_props = pipelines.CdkStageProps(\n    cloud_assembly_artifact=artifact,\n    host=stage_host,\n    pipeline_stage=stage,\n    stage_name=\"stageName\",\n\n    # the properties below are optional\n    confirm_broadening_permissions=False,\n    security_notification_topic=topic\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.SNS;\nusing Amazon.CDK.Pipelines;\n\nArtifact artifact;\nIStage stage;\nIStageHost stageHost;\nTopic topic;\n\nCdkStageProps cdkStageProps = new CdkStageProps {\n    CloudAssemblyArtifact = artifact,\n    Host = stageHost,\n    PipelineStage = stage,\n    StageName = \"stageName\",\n\n    // the properties below are optional\n    ConfirmBroadeningPermissions = false,\n    SecurityNotificationTopic = topic\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.sns.*;\nimport software.amazon.awscdk.pipelines.*;\n\nArtifact artifact;\nIStage stage;\nIStageHost stageHost;\nTopic topic;\n\nCdkStageProps cdkStageProps = CdkStageProps.builder()\n        .cloudAssemblyArtifact(artifact)\n        .host(stageHost)\n        .pipelineStage(stage)\n        .stageName(\"stageName\")\n\n        // the properties below are optional\n        .confirmBroadeningPermissions(false)\n        .securityNotificationTopic(topic)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const stage: codepipeline.IStage;\ndeclare const stageHost: pipelines.IStageHost;\ndeclare const topic: sns.Topic;\nconst cdkStageProps: pipelines.CdkStageProps = {\n  cloudAssemblyArtifact: artifact,\n  host: stageHost,\n  pipelineStage: stage,\n  stageName: 'stageName',\n\n  // the properties below are optional\n  confirmBroadeningPermissions: false,\n  securityNotificationTopic: topic,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.CdkStageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.IStage",
        "@aws-cdk/aws-sns.ITopic",
        "@aws-cdk/pipelines.CdkStageProps",
        "@aws-cdk/pipelines.IStageHost"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as sns from '@aws-cdk/aws-sns';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const stage: codepipeline.IStage;\ndeclare const stageHost: pipelines.IStageHost;\ndeclare const topic: sns.Topic;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cdkStageProps: pipelines.CdkStageProps = {\n  cloudAssemblyArtifact: artifact,\n  host: stageHost,\n  pipelineStage: stage,\n  stageName: 'stageName',\n\n  // the properties below are optional\n  confirmBroadeningPermissions: false,\n  securityNotificationTopic: topic,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 28,
        "91": 1,
        "130": 4,
        "153": 5,
        "169": 5,
        "193": 1,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "460c9bfba96f6077fe1ee26299fccea263bc25c4ee0e2a2c81b4f338adf1d7cb"
    },
    "8cabafa64188b5366131334255900eacd6d8b2ce35a323a800071b349b5ec349": {
      "translations": {
        "python": {
          "source": "# vpc: ec2.Vpc\n# my_security_group: ec2.SecurityGroup\n\npipelines.CodePipeline(self, \"Pipeline\",\n    # Standard CodePipeline properties\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"\n        ]\n    ),\n\n    # Defaults for all CodeBuild projects\n    code_build_defaults=pipelines.CodeBuildOptions(\n        # Prepend commands and configuration to all projects\n        partial_build_spec=codebuild.BuildSpec.from_object({\n            \"version\": \"0.2\"\n        }),\n\n        # Control the build environment\n        build_environment=codebuild.BuildEnvironment(\n            compute_type=codebuild.ComputeType.LARGE\n        ),\n\n        # Control Elastic Network Interface creation\n        vpc=vpc,\n        subnet_selection=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE),\n        security_groups=[my_security_group],\n\n        # Additional policy statements for the execution role\n        role_policy=[\n            iam.PolicyStatement()\n        ]\n    ),\n\n    synth_code_build_defaults=pipelines.CodeBuildOptions(),\n    asset_publishing_code_build_defaults=pipelines.CodeBuildOptions(),\n    self_mutation_code_build_defaults=pipelines.CodeBuildOptions()\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Vpc vpc;\nSecurityGroup mySecurityGroup;\n\nnew CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    // Standard CodePipeline properties\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    }),\n\n    // Defaults for all CodeBuild projects\n    CodeBuildDefaults = new CodeBuildOptions {\n        // Prepend commands and configuration to all projects\n        PartialBuildSpec = BuildSpec.FromObject(new Dictionary<string, object> {\n            { \"version\", \"0.2\" }\n        }),\n\n        // Control the build environment\n        BuildEnvironment = new BuildEnvironment {\n            ComputeType = ComputeType.LARGE\n        },\n\n        // Control Elastic Network Interface creation\n        Vpc = vpc,\n        SubnetSelection = new SubnetSelection { SubnetType = SubnetType.PRIVATE },\n        SecurityGroups = new [] { mySecurityGroup },\n\n        // Additional policy statements for the execution role\n        RolePolicy = new [] {\n            new PolicyStatement(new PolicyStatementProps { }) }\n    },\n\n    SynthCodeBuildDefaults = new CodeBuildOptions { },\n    AssetPublishingCodeBuildDefaults = new CodeBuildOptions { },\n    SelfMutationCodeBuildDefaults = new CodeBuildOptions { }\n});",
          "version": "1"
        },
        "java": {
          "source": "Vpc vpc;\nSecurityGroup mySecurityGroup;\n\nCodePipeline.Builder.create(this, \"Pipeline\")\n        // Standard CodePipeline properties\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n\n        // Defaults for all CodeBuild projects\n        .codeBuildDefaults(CodeBuildOptions.builder()\n                // Prepend commands and configuration to all projects\n                .partialBuildSpec(BuildSpec.fromObject(Map.of(\n                        \"version\", \"0.2\")))\n\n                // Control the build environment\n                .buildEnvironment(BuildEnvironment.builder()\n                        .computeType(ComputeType.LARGE)\n                        .build())\n\n                // Control Elastic Network Interface creation\n                .vpc(vpc)\n                .subnetSelection(SubnetSelection.builder().subnetType(SubnetType.PRIVATE).build())\n                .securityGroups(List.of(mySecurityGroup))\n\n                // Additional policy statements for the execution role\n                .rolePolicy(List.of(\n                    PolicyStatement.Builder.create().build()))\n                .build())\n\n        .synthCodeBuildDefaults(CodeBuildOptions.builder().build())\n        .assetPublishingCodeBuildDefaults(CodeBuildOptions.builder().build())\n        .selfMutationCodeBuildDefaults(CodeBuildOptions.builder().build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const vpc: ec2.Vpc;\ndeclare const mySecurityGroup: ec2.SecurityGroup;\nnew pipelines.CodePipeline(this, 'Pipeline', {\n  // Standard CodePipeline properties\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n\n  // Defaults for all CodeBuild projects\n  codeBuildDefaults: {\n    // Prepend commands and configuration to all projects\n    partialBuildSpec: codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      // ...\n    }),\n\n    // Control the build environment\n    buildEnvironment: {\n      computeType: codebuild.ComputeType.LARGE,\n    },\n\n    // Control Elastic Network Interface creation\n    vpc: vpc,\n    subnetSelection: { subnetType: ec2.SubnetType.PRIVATE },\n    securityGroups: [mySecurityGroup],\n\n    // Additional policy statements for the execution role\n    rolePolicy: [\n      new iam.PolicyStatement({ /* ... */ }),\n    ],\n  },\n\n  synthCodeBuildDefaults: { /* ... */ },\n  assetPublishingCodeBuildDefaults: { /* ... */ },\n  selfMutationCodeBuildDefaults: { /* ... */ },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.CodeBuildOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.BuildSpec#fromObject",
        "@aws-cdk/aws-codebuild.ComputeType",
        "@aws-cdk/aws-codebuild.ComputeType#LARGE",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#PRIVATE",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/pipelines.CodeBuildOptions",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const vpc: ec2.Vpc;\ndeclare const mySecurityGroup: ec2.SecurityGroup;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew pipelines.CodePipeline(this, 'Pipeline', {\n  // Standard CodePipeline properties\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n\n  // Defaults for all CodeBuild projects\n  codeBuildDefaults: {\n    // Prepend commands and configuration to all projects\n    partialBuildSpec: codebuild.BuildSpec.fromObject({\n      version: '0.2',\n      // ...\n    }),\n\n    // Control the build environment\n    buildEnvironment: {\n      computeType: codebuild.ComputeType.LARGE,\n    },\n\n    // Control Elastic Network Interface creation\n    vpc: vpc,\n    subnetSelection: { subnetType: ec2.SubnetType.PRIVATE },\n    securityGroups: [mySecurityGroup],\n\n    // Additional policy statements for the execution role\n    rolePolicy: [\n      new iam.PolicyStatement({ /* ... */ }),\n    ],\n  },\n\n  synthCodeBuildDefaults: { /* ... */ },\n  assetPublishingCodeBuildDefaults: { /* ... */ },\n  selfMutationCodeBuildDefaults: { /* ... */ },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 43,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 3,
        "193": 11,
        "194": 11,
        "196": 2,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "0b7e8477370bb8fee807fa82f040d4065345095c00510ae8fff6fdbe141b585c"
    },
    "cb865c48f8c1001edac89a8a591bef83fb3d50d53ff62b0aff68a6583c87817f": {
      "translations": {
        "python": {
          "source": "pipelines.CodeBuildStep(\"Synth\",\n    commands=[\"./build.sh\"]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new CodeBuildStep(\"Synth\", new CodeBuildStepProps {\n    Commands = new [] { \"./build.sh\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "CodeBuildStep.Builder.create(\"Synth\")\n        .commands(List.of(\"./build.sh\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new pipelines.CodeBuildStep('Synth', {\n   commands: ['./build.sh'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.CodeBuildStep"
        },
        "field": {
          "field": "markdown",
          "line": 6
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.CodeBuildStep",
        "@aws-cdk/pipelines.CodeBuildStepProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew pipelines.CodeBuildStep('Synth', {\n   commands: ['./build.sh'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 3,
        "192": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "e734ca594fbef98a21b427283d246ba91bec798458d5fb90fa6dd956f9e0d13b"
    },
    "a46f201da7a237451d81a6b2aed7a0d0c61d3cac78d854a7b265a7e9a3d22c8d": {
      "translations": {
        "python": {
          "source": "pipelines.CodePipeline(self, \"Pipeline\",\n    synth=pipelines.CodeBuildStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"...\", \"npm ci\", \"npm run build\", \"npx cdk synth\", \"...\"\n        ],\n        role_policy_statements=[\n            iam.PolicyStatement(\n                actions=[\"sts:AssumeRole\"],\n                resources=[\"*\"],\n                conditions={\n                    \"StringEquals\": {\n                        \"iam:_resource_tag/aws-cdk:bootstrap-role\": \"lookup\"\n                    }\n                }\n            )\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    Synth = new CodeBuildStep(\"Synth\", new CodeBuildStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"...\", \"npm ci\", \"npm run build\", \"npx cdk synth\", \"...\" },\n        RolePolicyStatements = new [] {\n            new PolicyStatement(new PolicyStatementProps {\n                Actions = new [] { \"sts:AssumeRole\" },\n                Resources = new [] { \"*\" },\n                Conditions = new Dictionary<string, object> {\n                    { \"StringEquals\", new Dictionary<string, string> {\n                        { \"iam:ResourceTag/aws-cdk:bootstrap-role\", \"lookup\" }\n                    } }\n                }\n            }) }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline.Builder.create(this, \"Pipeline\")\n        .synth(CodeBuildStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"...\", \"npm ci\", \"npm run build\", \"npx cdk synth\", \"...\"))\n                .rolePolicyStatements(List.of(\n                    PolicyStatement.Builder.create()\n                            .actions(List.of(\"sts:AssumeRole\"))\n                            .resources(List.of(\"*\"))\n                            .conditions(Map.of(\n                                    \"StringEquals\", Map.of(\n                                            \"iam:ResourceTag/aws-cdk:bootstrap-role\", \"lookup\")))\n                            .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.CodeBuildStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      // Commands to load cdk.context.json from somewhere here\n      '...',\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n      // Commands to store cdk.context.json back here\n      '...',\n    ],\n    rolePolicyStatements: [\n      new iam.PolicyStatement({\n        actions: ['sts:AssumeRole'],\n        resources: ['*'],\n        conditions: {\n          StringEquals: {\n            'iam:ResourceTag/aws-cdk:bootstrap-role': 'lookup',\n          },\n        },\n      }),\n    ],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.CodeBuildStep"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/pipelines.CodeBuildStep",
        "@aws-cdk/pipelines.CodeBuildStepProps",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.CodeBuildStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      // Commands to load cdk.context.json from somewhere here\n      '...',\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n      // Commands to store cdk.context.json back here\n      '...',\n    ],\n    rolePolicyStatements: [\n      new iam.PolicyStatement({\n        actions: ['sts:AssumeRole'],\n        resources: ['*'],\n        conditions: {\n          StringEquals: {\n            'iam:ResourceTag/aws-cdk:bootstrap-role': 'lookup',\n          },\n        },\n      }),\n    ],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 18,
        "104": 1,
        "192": 4,
        "193": 6,
        "194": 5,
        "196": 1,
        "197": 3,
        "226": 1,
        "281": 10
      },
      "fqnsFingerprint": "d83986d4916c1d10b9533a7935d3da8d5c35f9b4c0aab302c72c27b219339e0c"
    },
    "2cf697903e1d05d150a840b3e850fe96a17f042057d0a93a07765727861d50ca": {
      "translations": {
        "python": {
          "source": "pipelines.CodePipeline(self, \"Pipeline\",\n    synth=pipelines.CodeBuildStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"...\", \"npm ci\", \"npm run build\", \"npx cdk synth\", \"...\"\n        ],\n        role_policy_statements=[\n            iam.PolicyStatement(\n                actions=[\"sts:AssumeRole\"],\n                resources=[\"*\"],\n                conditions={\n                    \"StringEquals\": {\n                        \"iam:_resource_tag/aws-cdk:bootstrap-role\": \"lookup\"\n                    }\n                }\n            )\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    Synth = new CodeBuildStep(\"Synth\", new CodeBuildStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"...\", \"npm ci\", \"npm run build\", \"npx cdk synth\", \"...\" },\n        RolePolicyStatements = new [] {\n            new PolicyStatement(new PolicyStatementProps {\n                Actions = new [] { \"sts:AssumeRole\" },\n                Resources = new [] { \"*\" },\n                Conditions = new Dictionary<string, object> {\n                    { \"StringEquals\", new Dictionary<string, string> {\n                        { \"iam:ResourceTag/aws-cdk:bootstrap-role\", \"lookup\" }\n                    } }\n                }\n            }) }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline.Builder.create(this, \"Pipeline\")\n        .synth(CodeBuildStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"...\", \"npm ci\", \"npm run build\", \"npx cdk synth\", \"...\"))\n                .rolePolicyStatements(List.of(\n                    PolicyStatement.Builder.create()\n                            .actions(List.of(\"sts:AssumeRole\"))\n                            .resources(List.of(\"*\"))\n                            .conditions(Map.of(\n                                    \"StringEquals\", Map.of(\n                                            \"iam:ResourceTag/aws-cdk:bootstrap-role\", \"lookup\")))\n                            .build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.CodeBuildStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      // Commands to load cdk.context.json from somewhere here\n      '...',\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n      // Commands to store cdk.context.json back here\n      '...',\n    ],\n    rolePolicyStatements: [\n      new iam.PolicyStatement({\n        actions: ['sts:AssumeRole'],\n        resources: ['*'],\n        conditions: {\n          StringEquals: {\n            'iam:ResourceTag/aws-cdk:bootstrap-role': 'lookup',\n          },\n        },\n      }),\n    ],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.CodeBuildStepProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/pipelines.CodeBuildStep",
        "@aws-cdk/pipelines.CodeBuildStepProps",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.CodeBuildStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      // Commands to load cdk.context.json from somewhere here\n      '...',\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n      // Commands to store cdk.context.json back here\n      '...',\n    ],\n    rolePolicyStatements: [\n      new iam.PolicyStatement({\n        actions: ['sts:AssumeRole'],\n        resources: ['*'],\n        conditions: {\n          StringEquals: {\n            'iam:ResourceTag/aws-cdk:bootstrap-role': 'lookup',\n          },\n        },\n      }),\n    ],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 18,
        "104": 1,
        "192": 4,
        "193": 6,
        "194": 5,
        "196": 1,
        "197": 3,
        "226": 1,
        "281": 10
      },
      "fqnsFingerprint": "d83986d4916c1d10b9533a7935d3da8d5c35f9b4c0aab302c72c27b219339e0c"
    },
    "2a2fed906c4f48384b17aa7876f8124e16326669b751d9390058379190f2dc7a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline_actions as codepipeline_actions\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.pipelines as pipelines\n\n# role: iam.Role\n\ncode_commit_source_options = pipelines.CodeCommitSourceOptions(\n    code_build_clone_output=False,\n    event_role=role,\n    trigger=codepipeline_actions.CodeCommitTrigger.NONE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline.Actions;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.Pipelines;\n\nRole role;\n\nCodeCommitSourceOptions codeCommitSourceOptions = new CodeCommitSourceOptions {\n    CodeBuildCloneOutput = false,\n    EventRole = role,\n    Trigger = CodeCommitTrigger.NONE\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.actions.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.pipelines.*;\n\nRole role;\n\nCodeCommitSourceOptions codeCommitSourceOptions = CodeCommitSourceOptions.builder()\n        .codeBuildCloneOutput(false)\n        .eventRole(role)\n        .trigger(CodeCommitTrigger.NONE)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const role: iam.Role;\nconst codeCommitSourceOptions: pipelines.CodeCommitSourceOptions = {\n  codeBuildCloneOutput: false,\n  eventRole: role,\n  trigger: codepipeline_actions.CodeCommitTrigger.NONE,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.CodeCommitSourceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger",
        "@aws-cdk/aws-codepipeline-actions.CodeCommitTrigger#NONE",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/pipelines.CodeCommitSourceOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codeCommitSourceOptions: pipelines.CodeCommitSourceOptions = {\n  codeBuildCloneOutput: false,\n  eventRole: role,\n  trigger: codepipeline_actions.CodeCommitTrigger.NONE,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 16,
        "91": 1,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "6fa89cbf4ce34680e20e6fc96cc6fe30792e7af9a90db27957a43ce56c839221"
    },
    "a4a0b5829b9fd137f954b959bbbad3af7f84bef754732c93ebe5f5c70f1ee230": {
      "translations": {
        "python": {
          "source": "# Modern API\nmodern_pipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    self_mutation=False,\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"\n        ]\n    )\n)\n\n# Original API\ncloud_assembly_artifact = codepipeline.Artifact()\noriginal_pipeline = pipelines.CdkPipeline(self, \"Pipeline\",\n    self_mutating=False,\n    cloud_assembly_artifact=cloud_assembly_artifact\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Modern API\nCodePipeline modernPipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    SelfMutation = false,\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    })\n});\n\n// Original API\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline originalPipeline = new CdkPipeline(this, \"Pipeline\", new CdkPipelineProps {\n    SelfMutating = false,\n    CloudAssemblyArtifact = cloudAssemblyArtifact\n});",
          "version": "1"
        },
        "java": {
          "source": "// Modern API\nCodePipeline modernPipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .selfMutation(false)\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n        .build();\n\n// Original API\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline originalPipeline = CdkPipeline.Builder.create(this, \"Pipeline\")\n        .selfMutating(false)\n        .cloudAssemblyArtifact(cloudAssemblyArtifact)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Modern API\nconst modernPipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  selfMutation: false,\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n});\n\n// Original API\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst originalPipeline = new pipelines.CdkPipeline(this, 'Pipeline', {\n  selfMutating: false,\n  cloudAssemblyArtifact,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.CodePipeline"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/pipelines.CdkPipeline",
        "@aws-cdk/pipelines.CdkPipelineProps",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Modern API\nconst modernPipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  selfMutation: false,\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n});\n\n// Original API\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst originalPipeline = new pipelines.CdkPipeline(this, 'Pipeline', {\n  selfMutating: false,\n  cloudAssemblyArtifact,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 21,
        "91": 2,
        "104": 2,
        "192": 1,
        "193": 4,
        "194": 6,
        "196": 1,
        "197": 4,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1
      },
      "fqnsFingerprint": "d79775655e9f08c85c665dd41801cd3c7a6d004232138cff23b8cca2cdff93f1"
    },
    "ced14060839bd6d716069b17ad61427b38083ae6f926c50c5c5149d6f4042b7a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.pipelines as pipelines\n\n# project: codebuild.Project\n\ncode_pipeline_action_factory_result = pipelines.CodePipelineActionFactoryResult(\n    run_orders_consumed=123,\n\n    # the properties below are optional\n    project=project\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.Pipelines;\n\nProject project;\n\nCodePipelineActionFactoryResult codePipelineActionFactoryResult = new CodePipelineActionFactoryResult {\n    RunOrdersConsumed = 123,\n\n    // the properties below are optional\n    Project = project\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.pipelines.*;\n\nProject project;\n\nCodePipelineActionFactoryResult codePipelineActionFactoryResult = CodePipelineActionFactoryResult.builder()\n        .runOrdersConsumed(123)\n\n        // the properties below are optional\n        .project(project)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const project: codebuild.Project;\nconst codePipelineActionFactoryResult: pipelines.CodePipelineActionFactoryResult = {\n  runOrdersConsumed: 123,\n\n  // the properties below are optional\n  project: project,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.CodePipelineActionFactoryResult"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.IProject",
        "@aws-cdk/pipelines.CodePipelineActionFactoryResult"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const project: codebuild.Project;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codePipelineActionFactoryResult: pipelines.CodePipelineActionFactoryResult = {\n  runOrdersConsumed: 123,\n\n  // the properties below are optional\n  project: project,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 11,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "9423135b09e159d71ce2e0e8371ddfe20bd89f8e2221a964007c7fff787c05c4"
    },
    "ef4bcd0103256a9bedb509463e377127f3d04cdfe9801cce5da66a48f43ed987": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.pipelines as pipelines\n\n# artifact: codepipeline.Artifact\n\ncode_pipeline_file_set = pipelines.CodePipelineFileSet.from_artifact(artifact)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.Pipelines;\n\nArtifact artifact;\n\nCodePipelineFileSet codePipelineFileSet = CodePipelineFileSet.FromArtifact(artifact);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.pipelines.*;\n\nArtifact artifact;\n\nCodePipelineFileSet codePipelineFileSet = CodePipelineFileSet.fromArtifact(artifact);",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\nconst codePipelineFileSet = pipelines.CodePipelineFileSet.fromArtifact(artifact);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.CodePipelineFileSet"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/pipelines.CodePipelineFileSet",
        "@aws-cdk/pipelines.CodePipelineFileSet#fromArtifact"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst codePipelineFileSet = pipelines.CodePipelineFileSet.fromArtifact(artifact);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "290": 1
      },
      "fqnsFingerprint": "9e4dbdb8eeb2a80e530cfc3ea66bbb71331419d106e09af0e394f4a7bf372ac0"
    },
    "01ad6c25bce638b58a3619a7b74f8091fb73705931506b0ba8aa5e845815a895": {
      "translations": {
        "python": {
          "source": "# Modern API\nmodern_pipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    self_mutation=False,\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"\n        ]\n    )\n)\n\n# Original API\ncloud_assembly_artifact = codepipeline.Artifact()\noriginal_pipeline = pipelines.CdkPipeline(self, \"Pipeline\",\n    self_mutating=False,\n    cloud_assembly_artifact=cloud_assembly_artifact\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Modern API\nCodePipeline modernPipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    SelfMutation = false,\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    })\n});\n\n// Original API\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline originalPipeline = new CdkPipeline(this, \"Pipeline\", new CdkPipelineProps {\n    SelfMutating = false,\n    CloudAssemblyArtifact = cloudAssemblyArtifact\n});",
          "version": "1"
        },
        "java": {
          "source": "// Modern API\nCodePipeline modernPipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .selfMutation(false)\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n        .build();\n\n// Original API\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline originalPipeline = CdkPipeline.Builder.create(this, \"Pipeline\")\n        .selfMutating(false)\n        .cloudAssemblyArtifact(cloudAssemblyArtifact)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Modern API\nconst modernPipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  selfMutation: false,\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n});\n\n// Original API\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst originalPipeline = new pipelines.CdkPipeline(this, 'Pipeline', {\n  selfMutating: false,\n  cloudAssemblyArtifact,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.CodePipelineProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/pipelines.CdkPipeline",
        "@aws-cdk/pipelines.CdkPipelineProps",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Modern API\nconst modernPipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  selfMutation: false,\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n});\n\n// Original API\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst originalPipeline = new pipelines.CdkPipeline(this, 'Pipeline', {\n  selfMutating: false,\n  cloudAssemblyArtifact,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 21,
        "91": 2,
        "104": 2,
        "192": 1,
        "193": 4,
        "194": 6,
        "196": 1,
        "197": 4,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1
      },
      "fqnsFingerprint": "d79775655e9f08c85c665dd41801cd3c7a6d004232138cff23b8cca2cdff93f1"
    },
    "ba8672e84bc117a51ea1c64b6993ce74d1c53a136e81df3fbc0980232963322b": {
      "translations": {
        "python": {
          "source": "pipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    # Encrypt artifacts, required for cross-account deployments\n    cross_account_keys=True,\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"\n        ]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    // Encrypt artifacts, required for cross-account deployments\n    CrossAccountKeys = true,\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        // Encrypt artifacts, required for cross-account deployments\n        .crossAccountKeys(true)\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  // Encrypt artifacts, required for cross-account deployments\n  crossAccountKeys: true,\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.CodePipelineSource"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  // Encrypt artifacts, required for cross-account deployments\n  crossAccountKeys: true,\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 13,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "05f3c5c83c574338bd55ae7128b114582eb8da438f550ae5890faaa601182410"
    },
    "dab682ebf41814398afcdf407839e57d98a34f642a8b62fb738df318d35f7d80": {
      "translations": {
        "python": {
          "source": "# repository: codecommit.IRepository\n\npipelines.CodePipelineSource.code_commit(repository, \"main\")",
          "version": "2"
        },
        "csharp": {
          "source": "IRepository repository;\n\nCodePipelineSource.CodeCommit(repository, \"main\");",
          "version": "1"
        },
        "java": {
          "source": "IRepository repository;\n\nCodePipelineSource.codeCommit(repository, \"main\");",
          "version": "1"
        },
        "$": {
          "source": "declare const repository: codecommit.IRepository;\npipelines.CodePipelineSource.codeCommit(repository, 'main');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/pipelines.CodePipelineSource",
          "memberName": "codeCommit"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codecommit.IRepository",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#codeCommit"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const repository: codecommit.IRepository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\npipelines.CodePipelineSource.codeCommit(repository, 'main');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "a62bd866d147abdc862e997f563c08a3cf02659510d4bbd84bee6239c92a60d1"
    },
    "d8f7867cc15cc9b01e34b604e6cd16bdc7589aa02a9efb24e78b58f4e59425e0": {
      "translations": {
        "python": {
          "source": "pipelines.CodePipelineSource.connection(\"owner/repo\", \"main\",\n    connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipelineSource.Connection(\"owner/repo\", \"main\", new ConnectionSourceOptions {\n    ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipelineSource.connection(\"owner/repo\", \"main\", ConnectionSourceOptions.builder()\n        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "pipelines.CodePipelineSource.connection('owner/repo', 'main', {\n   connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/pipelines.CodePipelineSource",
          "memberName": "connection"
        },
        "field": {
          "field": "markdown",
          "line": 12
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\npipelines.CodePipelineSource.connection('owner/repo', 'main', {\n   connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 4,
        "193": 1,
        "194": 2,
        "196": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "3c53be22bc30434acd463418c389949f4d05d82b54b0f0e284b6562d881ea9ee"
    },
    "fca2185d7724dd7e7c8ce18f5ae33389939e4dbfb8743c569d537a4d52e18882": {
      "translations": {
        "python": {
          "source": "# repository: ecr.IRepository\n\npipelines.CodePipelineSource.ecr(repository,\n    image_tag=\"latest\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IRepository repository;\n\nCodePipelineSource.Ecr(repository, new ECRSourceOptions {\n    ImageTag = \"latest\"\n});",
          "version": "1"
        },
        "java": {
          "source": "IRepository repository;\n\nCodePipelineSource.ecr(repository, ECRSourceOptions.builder()\n        .imageTag(\"latest\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const repository: ecr.IRepository;\npipelines.CodePipelineSource.ecr(repository, {\n  imageTag: 'latest',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/pipelines.CodePipelineSource",
          "memberName": "ecr"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#ecr",
        "@aws-cdk/pipelines.ECRSourceOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const repository: ecr.IRepository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\npipelines.CodePipelineSource.ecr(repository, {\n  imageTag: 'latest',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "cedf3507998eb3ef0596f47d134d91e097756ac3be579facc76097f213a0b78d"
    },
    "34649b63fdb86d8885680cab2143214744f3eaa0a41d1b3572b5543373706638": {
      "translations": {
        "python": {
          "source": "pipelines.CodePipelineSource.git_hub(\"owner/repo\", \"main\")",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipelineSource.GitHub(\"owner/repo\", \"main\");",
          "version": "1"
        },
        "java": {
          "source": "CodePipelineSource.gitHub(\"owner/repo\", \"main\");",
          "version": "1"
        },
        "$": {
          "source": "pipelines.CodePipelineSource.gitHub('owner/repo', 'main');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/pipelines.CodePipelineSource",
          "memberName": "gitHub"
        },
        "field": {
          "field": "markdown",
          "line": 7
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#gitHub"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\npipelines.CodePipelineSource.gitHub('owner/repo', 'main');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 3,
        "194": 2,
        "196": 1,
        "226": 1
      },
      "fqnsFingerprint": "64181ba787a497a32100e8571dc50e861045a39007c13229f364cb71c1ac2c72"
    },
    "92a6fa4531244e9e609affb9668e8940190c43751bc66380cd03382df6095c17": {
      "translations": {
        "python": {
          "source": "# bucket: s3.Bucket\n\npipelines.CodePipelineSource.s3(bucket, \"path/to/file.zip\")",
          "version": "2"
        },
        "csharp": {
          "source": "Bucket bucket;\n\nCodePipelineSource.S3(bucket, \"path/to/file.zip\");",
          "version": "1"
        },
        "java": {
          "source": "Bucket bucket;\n\nCodePipelineSource.s3(bucket, \"path/to/file.zip\");",
          "version": "1"
        },
        "$": {
          "source": "declare const bucket: s3.Bucket;\npipelines.CodePipelineSource.s3(bucket, 'path/to/file.zip');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/pipelines.CodePipelineSource",
          "memberName": "s3"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#s3"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const bucket: s3.Bucket;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\npipelines.CodePipelineSource.s3(bucket, 'path/to/file.zip');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 7,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "290": 1
      },
      "fqnsFingerprint": "2e737a6a4345fe4693d6a23295dcbd3bba7e413489330e284ffbbb772834f166"
    },
    "60f4104cb8f55515ad6be5fcf9017e0faec518491423f6f32a6d2e157ed4a25c": {
      "translations": {
        "python": {
          "source": "# pipeline: pipelines.CodePipeline\n\nstage = MyApplicationStage(self, \"MyApplication\")\npipeline.add_stage(stage,\n    pre=[\n        pipelines.ConfirmPermissionsBroadening(\"Check\", stage=stage)\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline;\n\nMyApplicationStage stage = new MyApplicationStage(this, \"MyApplication\");\npipeline.AddStage(stage, new AddStageOpts {\n    Pre = new [] {\n        new ConfirmPermissionsBroadening(\"Check\", new PermissionsBroadeningCheckProps { Stage = stage }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline;\n\nMyApplicationStage stage = new MyApplicationStage(this, \"MyApplication\");\npipeline.addStage(stage, AddStageOpts.builder()\n        .pre(List.of(\n            ConfirmPermissionsBroadening.Builder.create(\"Check\").stage(stage).build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: pipelines.CodePipeline;\nconst stage = new MyApplicationStage(this, 'MyApplication');\npipeline.addStage(stage, {\n  pre: [\n    new pipelines.ConfirmPermissionsBroadening('Check', { stage }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.ConfirmPermissionsBroadening"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Stage",
        "@aws-cdk/pipelines.AddStageOpts",
        "@aws-cdk/pipelines.ConfirmPermissionsBroadening",
        "@aws-cdk/pipelines.PermissionsBroadeningCheckProps",
        "@aws-cdk/pipelines.PipelineBase#addStage",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: pipelines.CodePipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst stage = new MyApplicationStage(this, 'MyApplication');\npipeline.addStage(stage, {\n  pre: [\n    new pipelines.ConfirmPermissionsBroadening('Check', { stage }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "2d4e0da4b2dc59e6f9bcb2ae4153de02862b63622dc406bd246df774d34c9744"
    },
    "f6d118f8c682b8985b8cb0779b2e9b531e362704f0f55655e3bf812f585d43ae": {
      "translations": {
        "python": {
          "source": "pipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"]\n    ),\n\n    # Turn this on because the pipeline uses Docker image assets\n    docker_enabled_for_self_mutation=True\n)\n\npipeline.add_wave(\"MyWave\",\n    post=[\n        pipelines.CodeBuildStep(\"RunApproval\",\n            commands=[\"command-from-image\"],\n            build_environment=codebuild.BuildEnvironment(\n                # The user of a Docker image asset in the pipeline requires turning on\n                # 'dockerEnabledForSelfMutation'.\n                build_image=codebuild.LinuxBuildImage.from_asset(self, \"Image\",\n                    directory=\"./docker-image\"\n                )\n            )\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    }),\n\n    // Turn this on because the pipeline uses Docker image assets\n    DockerEnabledForSelfMutation = true\n});\n\npipeline.AddWave(\"MyWave\", new WaveOptions {\n    Post = new [] {\n        new CodeBuildStep(\"RunApproval\", new CodeBuildStepProps {\n            Commands = new [] { \"command-from-image\" },\n            BuildEnvironment = new BuildEnvironment {\n                // The user of a Docker image asset in the pipeline requires turning on\n                // 'dockerEnabledForSelfMutation'.\n                BuildImage = LinuxBuildImage.FromAsset(this, \"Image\", new DockerImageAssetProps {\n                    Directory = \"./docker-image\"\n                })\n            }\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n\n        // Turn this on because the pipeline uses Docker image assets\n        .dockerEnabledForSelfMutation(true)\n        .build();\n\npipeline.addWave(\"MyWave\", WaveOptions.builder()\n        .post(List.of(\n            CodeBuildStep.Builder.create(\"RunApproval\")\n                    .commands(List.of(\"command-from-image\"))\n                    .buildEnvironment(BuildEnvironment.builder()\n                            // The user of a Docker image asset in the pipeline requires turning on\n                            // 'dockerEnabledForSelfMutation'.\n                            .buildImage(LinuxBuildImage.fromAsset(this, \"Image\", DockerImageAssetProps.builder()\n                                    .directory(\"./docker-image\")\n                                    .build()))\n                            .build())\n                    .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: ['npm ci','npm run build','npx cdk synth'],\n  }),\n\n  // Turn this on because the pipeline uses Docker image assets\n  dockerEnabledForSelfMutation: true,\n});\n\npipeline.addWave('MyWave', {\n  post: [\n    new pipelines.CodeBuildStep('RunApproval', {\n      commands: ['command-from-image'],\n      buildEnvironment: {\n        // The user of a Docker image asset in the pipeline requires turning on\n        // 'dockerEnabledForSelfMutation'.\n        buildImage: codebuild.LinuxBuildImage.fromAsset(this, 'Image', {\n          directory: './docker-image',\n        }),\n      },\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.ConnectionSourceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage#fromAsset",
        "@aws-cdk/aws-ecr-assets.DockerImageAssetProps",
        "@aws-cdk/pipelines.CodeBuildStep",
        "@aws-cdk/pipelines.CodeBuildStepProps",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.PipelineBase#addWave",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "@aws-cdk/pipelines.WaveOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: ['npm ci','npm run build','npx cdk synth'],\n  }),\n\n  // Turn this on because the pipeline uses Docker image assets\n  dockerEnabledForSelfMutation: true,\n});\n\npipeline.addWave('MyWave', {\n  post: [\n    new pipelines.CodeBuildStep('RunApproval', {\n      commands: ['command-from-image'],\n      buildEnvironment: {\n        // The user of a Docker image asset in the pipeline requires turning on\n        // 'dockerEnabledForSelfMutation'.\n        buildImage: codebuild.LinuxBuildImage.fromAsset(this, 'Image', {\n          directory: './docker-image',\n        }),\n      },\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 25,
        "104": 2,
        "106": 1,
        "192": 3,
        "193": 7,
        "194": 8,
        "196": 3,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "1dca25e6bf638f81fe2313afc3cf97679d46d14bf6c704f6494f25992863e05a"
    },
    "fcc6b01fe16f5a21ba871df3397abaa1659df33bfb107e1aef876c1cd135ff61": {
      "translations": {
        "python": {
          "source": "\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\"",
          "version": "2"
        },
        "csharp": {
          "source": "\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\";",
          "version": "1"
        },
        "java": {
          "source": "\"arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh\";",
          "version": "1"
        },
        "$": {
          "source": "'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh'",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/pipelines.ConnectionSourceOptions",
          "memberName": "connectionArn"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-abcd-12ab-34cdef5678gh'\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "226": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "6e9abf97c18c43bf878dc462777efe6804ad2da9379f5b9e4709c54be8551dc8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.pipelines as pipelines\n\n# artifact: codepipeline.Artifact\n# role: iam.Role\n\ndeploy_cdk_stack_action = pipelines.DeployCdkStackAction(\n    action_role=role,\n    cloud_assembly_input=artifact,\n    stack_name=\"stackName\",\n    template_path=\"templatePath\",\n\n    # the properties below are optional\n    base_action_name=\"baseActionName\",\n    change_set_name=\"changeSetName\",\n    cloud_formation_execution_role=role,\n    dependency_stack_artifact_ids=[\"dependencyStackArtifactIds\"],\n    execute_run_order=123,\n    output=artifact,\n    output_file_name=\"outputFileName\",\n    prepare_run_order=123,\n    region=\"region\",\n    stack_artifact_id=\"stackArtifactId\",\n    template_configuration_path=\"templateConfigurationPath\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.Pipelines;\n\nArtifact artifact;\nRole role;\n\nDeployCdkStackAction deployCdkStackAction = new DeployCdkStackAction(new DeployCdkStackActionProps {\n    ActionRole = role,\n    CloudAssemblyInput = artifact,\n    StackName = \"stackName\",\n    TemplatePath = \"templatePath\",\n\n    // the properties below are optional\n    BaseActionName = \"baseActionName\",\n    ChangeSetName = \"changeSetName\",\n    CloudFormationExecutionRole = role,\n    DependencyStackArtifactIds = new [] { \"dependencyStackArtifactIds\" },\n    ExecuteRunOrder = 123,\n    Output = artifact,\n    OutputFileName = \"outputFileName\",\n    PrepareRunOrder = 123,\n    Region = \"region\",\n    StackArtifactId = \"stackArtifactId\",\n    TemplateConfigurationPath = \"templateConfigurationPath\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.pipelines.*;\n\nArtifact artifact;\nRole role;\n\nDeployCdkStackAction deployCdkStackAction = DeployCdkStackAction.Builder.create()\n        .actionRole(role)\n        .cloudAssemblyInput(artifact)\n        .stackName(\"stackName\")\n        .templatePath(\"templatePath\")\n\n        // the properties below are optional\n        .baseActionName(\"baseActionName\")\n        .changeSetName(\"changeSetName\")\n        .cloudFormationExecutionRole(role)\n        .dependencyStackArtifactIds(List.of(\"dependencyStackArtifactIds\"))\n        .executeRunOrder(123)\n        .output(artifact)\n        .outputFileName(\"outputFileName\")\n        .prepareRunOrder(123)\n        .region(\"region\")\n        .stackArtifactId(\"stackArtifactId\")\n        .templateConfigurationPath(\"templateConfigurationPath\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const role: iam.Role;\nconst deployCdkStackAction = new pipelines.DeployCdkStackAction({\n  actionRole: role,\n  cloudAssemblyInput: artifact,\n  stackName: 'stackName',\n  templatePath: 'templatePath',\n\n  // the properties below are optional\n  baseActionName: 'baseActionName',\n  changeSetName: 'changeSetName',\n  cloudFormationExecutionRole: role,\n  dependencyStackArtifactIds: ['dependencyStackArtifactIds'],\n  executeRunOrder: 123,\n  output: artifact,\n  outputFileName: 'outputFileName',\n  prepareRunOrder: 123,\n  region: 'region',\n  stackArtifactId: 'stackArtifactId',\n  templateConfigurationPath: 'templateConfigurationPath',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.DeployCdkStackAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/pipelines.DeployCdkStackAction",
        "@aws-cdk/pipelines.DeployCdkStackActionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst deployCdkStackAction = new pipelines.DeployCdkStackAction({\n  actionRole: role,\n  cloudAssemblyInput: artifact,\n  stackName: 'stackName',\n  templatePath: 'templatePath',\n\n  // the properties below are optional\n  baseActionName: 'baseActionName',\n  changeSetName: 'changeSetName',\n  cloudFormationExecutionRole: role,\n  dependencyStackArtifactIds: ['dependencyStackArtifactIds'],\n  executeRunOrder: 123,\n  output: artifact,\n  outputFileName: 'outputFileName',\n  prepareRunOrder: 123,\n  region: 'region',\n  stackArtifactId: 'stackArtifactId',\n  templateConfigurationPath: 'templateConfigurationPath',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 12,
        "75": 31,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "d2132d2d133f8b0656adcc602dad61060b2d553ec085108a66e95037c8708a4b"
    },
    "112fdc99d6f2ad90aa09f3621c4af6d203f3e7311ecdef95083eef97e67a0b76": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.pipelines as pipelines\n\n# artifact: codepipeline.Artifact\n\ndeploy_cdk_stack_action_options = pipelines.DeployCdkStackActionOptions(\n    cloud_assembly_input=artifact,\n\n    # the properties below are optional\n    base_action_name=\"baseActionName\",\n    change_set_name=\"changeSetName\",\n    execute_run_order=123,\n    output=artifact,\n    output_file_name=\"outputFileName\",\n    prepare_run_order=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.Pipelines;\n\nArtifact artifact;\n\nDeployCdkStackActionOptions deployCdkStackActionOptions = new DeployCdkStackActionOptions {\n    CloudAssemblyInput = artifact,\n\n    // the properties below are optional\n    BaseActionName = \"baseActionName\",\n    ChangeSetName = \"changeSetName\",\n    ExecuteRunOrder = 123,\n    Output = artifact,\n    OutputFileName = \"outputFileName\",\n    PrepareRunOrder = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.pipelines.*;\n\nArtifact artifact;\n\nDeployCdkStackActionOptions deployCdkStackActionOptions = DeployCdkStackActionOptions.builder()\n        .cloudAssemblyInput(artifact)\n\n        // the properties below are optional\n        .baseActionName(\"baseActionName\")\n        .changeSetName(\"changeSetName\")\n        .executeRunOrder(123)\n        .output(artifact)\n        .outputFileName(\"outputFileName\")\n        .prepareRunOrder(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\nconst deployCdkStackActionOptions: pipelines.DeployCdkStackActionOptions = {\n  cloudAssemblyInput: artifact,\n\n  // the properties below are optional\n  baseActionName: 'baseActionName',\n  changeSetName: 'changeSetName',\n  executeRunOrder: 123,\n  output: artifact,\n  outputFileName: 'outputFileName',\n  prepareRunOrder: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.DeployCdkStackActionOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/pipelines.DeployCdkStackActionOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst deployCdkStackActionOptions: pipelines.DeployCdkStackActionOptions = {\n  cloudAssemblyInput: artifact,\n\n  // the properties below are optional\n  baseActionName: 'baseActionName',\n  changeSetName: 'changeSetName',\n  executeRunOrder: 123,\n  output: artifact,\n  outputFileName: 'outputFileName',\n  prepareRunOrder: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 5,
        "75": 17,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "822a652595103aa9e686f7dec9da6251e6492a927007ce5d9ecbcc86e5e51f56"
    },
    "52104d669c4e2e9a248e97b0ec0c8d774a0a5ee10a12af49009ff776100d1a46": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.pipelines as pipelines\n\n# artifact: codepipeline.Artifact\n# role: iam.Role\n\ndeploy_cdk_stack_action_props = pipelines.DeployCdkStackActionProps(\n    action_role=role,\n    cloud_assembly_input=artifact,\n    stack_name=\"stackName\",\n    template_path=\"templatePath\",\n\n    # the properties below are optional\n    base_action_name=\"baseActionName\",\n    change_set_name=\"changeSetName\",\n    cloud_formation_execution_role=role,\n    dependency_stack_artifact_ids=[\"dependencyStackArtifactIds\"],\n    execute_run_order=123,\n    output=artifact,\n    output_file_name=\"outputFileName\",\n    prepare_run_order=123,\n    region=\"region\",\n    stack_artifact_id=\"stackArtifactId\",\n    template_configuration_path=\"templateConfigurationPath\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.Pipelines;\n\nArtifact artifact;\nRole role;\n\nDeployCdkStackActionProps deployCdkStackActionProps = new DeployCdkStackActionProps {\n    ActionRole = role,\n    CloudAssemblyInput = artifact,\n    StackName = \"stackName\",\n    TemplatePath = \"templatePath\",\n\n    // the properties below are optional\n    BaseActionName = \"baseActionName\",\n    ChangeSetName = \"changeSetName\",\n    CloudFormationExecutionRole = role,\n    DependencyStackArtifactIds = new [] { \"dependencyStackArtifactIds\" },\n    ExecuteRunOrder = 123,\n    Output = artifact,\n    OutputFileName = \"outputFileName\",\n    PrepareRunOrder = 123,\n    Region = \"region\",\n    StackArtifactId = \"stackArtifactId\",\n    TemplateConfigurationPath = \"templateConfigurationPath\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.pipelines.*;\n\nArtifact artifact;\nRole role;\n\nDeployCdkStackActionProps deployCdkStackActionProps = DeployCdkStackActionProps.builder()\n        .actionRole(role)\n        .cloudAssemblyInput(artifact)\n        .stackName(\"stackName\")\n        .templatePath(\"templatePath\")\n\n        // the properties below are optional\n        .baseActionName(\"baseActionName\")\n        .changeSetName(\"changeSetName\")\n        .cloudFormationExecutionRole(role)\n        .dependencyStackArtifactIds(List.of(\"dependencyStackArtifactIds\"))\n        .executeRunOrder(123)\n        .output(artifact)\n        .outputFileName(\"outputFileName\")\n        .prepareRunOrder(123)\n        .region(\"region\")\n        .stackArtifactId(\"stackArtifactId\")\n        .templateConfigurationPath(\"templateConfigurationPath\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const role: iam.Role;\nconst deployCdkStackActionProps: pipelines.DeployCdkStackActionProps = {\n  actionRole: role,\n  cloudAssemblyInput: artifact,\n  stackName: 'stackName',\n  templatePath: 'templatePath',\n\n  // the properties below are optional\n  baseActionName: 'baseActionName',\n  changeSetName: 'changeSetName',\n  cloudFormationExecutionRole: role,\n  dependencyStackArtifactIds: ['dependencyStackArtifactIds'],\n  executeRunOrder: 123,\n  output: artifact,\n  outputFileName: 'outputFileName',\n  prepareRunOrder: 123,\n  region: 'region',\n  stackArtifactId: 'stackArtifactId',\n  templateConfigurationPath: 'templateConfigurationPath',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.DeployCdkStackActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/pipelines.DeployCdkStackActionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst deployCdkStackActionProps: pipelines.DeployCdkStackActionProps = {\n  actionRole: role,\n  cloudAssemblyInput: artifact,\n  stackName: 'stackName',\n  templatePath: 'templatePath',\n\n  // the properties below are optional\n  baseActionName: 'baseActionName',\n  changeSetName: 'changeSetName',\n  cloudFormationExecutionRole: role,\n  dependencyStackArtifactIds: ['dependencyStackArtifactIds'],\n  executeRunOrder: 123,\n  output: artifact,\n  outputFileName: 'outputFileName',\n  prepareRunOrder: 123,\n  region: 'region',\n  stackArtifactId: 'stackArtifactId',\n  templateConfigurationPath: 'templateConfigurationPath',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 12,
        "75": 31,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 15,
        "290": 1
      },
      "fqnsFingerprint": "9859a7556d4f17ab16acd289f566563f98f9b75a7afaf6d7c8fe1fed0881beb7"
    },
    "edfd380ec8ad8939aa9633e041301403e1b173409973e0ed8c6626d7a3f67105": {
      "translations": {
        "python": {
          "source": "docker_hub_secret = secretsmanager.Secret.from_secret_complete_arn(self, \"DHSecret\", \"arn:aws:...\")\ncustom_reg_secret = secretsmanager.Secret.from_secret_complete_arn(self, \"CRSecret\", \"arn:aws:...\")\nrepo1 = ecr.Repository.from_repository_arn(self, \"Repo\", \"arn:aws:ecr:eu-west-1:0123456789012:repository/Repo1\")\nrepo2 = ecr.Repository.from_repository_arn(self, \"Repo\", \"arn:aws:ecr:eu-west-1:0123456789012:repository/Repo2\")\n\npipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    docker_credentials=[\n        pipelines.DockerCredential.docker_hub(docker_hub_secret),\n        pipelines.DockerCredential.custom_registry(\"dockerregistry.example.com\", custom_reg_secret),\n        pipelines.DockerCredential.ecr([repo1, repo2])\n    ],\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ISecret dockerHubSecret = Secret.FromSecretCompleteArn(this, \"DHSecret\", \"arn:aws:...\");\nISecret customRegSecret = Secret.FromSecretCompleteArn(this, \"CRSecret\", \"arn:aws:...\");\nIRepository repo1 = Repository.FromRepositoryArn(this, \"Repo\", \"arn:aws:ecr:eu-west-1:0123456789012:repository/Repo1\");\nIRepository repo2 = Repository.FromRepositoryArn(this, \"Repo\", \"arn:aws:ecr:eu-west-1:0123456789012:repository/Repo2\");\n\nCodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    DockerCredentials = new [] { DockerCredential.DockerHub(dockerHubSecret), DockerCredential.CustomRegistry(\"dockerregistry.example.com\", customRegSecret), DockerCredential.Ecr(new [] { repo1, repo2 }) },\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "ISecret dockerHubSecret = Secret.fromSecretCompleteArn(this, \"DHSecret\", \"arn:aws:...\");\nISecret customRegSecret = Secret.fromSecretCompleteArn(this, \"CRSecret\", \"arn:aws:...\");\nIRepository repo1 = Repository.fromRepositoryArn(this, \"Repo\", \"arn:aws:ecr:eu-west-1:0123456789012:repository/Repo1\");\nIRepository repo2 = Repository.fromRepositoryArn(this, \"Repo\", \"arn:aws:ecr:eu-west-1:0123456789012:repository/Repo2\");\n\nCodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .dockerCredentials(List.of(DockerCredential.dockerHub(dockerHubSecret), DockerCredential.customRegistry(\"dockerregistry.example.com\", customRegSecret), DockerCredential.ecr(List.of(repo1, repo2))))\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const dockerHubSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'DHSecret', 'arn:aws:...');\nconst customRegSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'CRSecret', 'arn:aws:...');\nconst repo1 = ecr.Repository.fromRepositoryArn(this, 'Repo', 'arn:aws:ecr:eu-west-1:0123456789012:repository/Repo1');\nconst repo2 = ecr.Repository.fromRepositoryArn(this, 'Repo', 'arn:aws:ecr:eu-west-1:0123456789012:repository/Repo2');\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  dockerCredentials: [\n    pipelines.DockerCredential.dockerHub(dockerHubSecret),\n    pipelines.DockerCredential.customRegistry('dockerregistry.example.com', customRegSecret),\n    pipelines.DockerCredential.ecr([repo1, repo2]),\n  ],\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: ['npm ci','npm run build','npx cdk synth'],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.DockerCredential"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/aws-ecr.Repository",
        "@aws-cdk/aws-ecr.Repository#fromRepositoryArn",
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretCompleteArn",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.DockerCredential",
        "@aws-cdk/pipelines.DockerCredential#customRegistry",
        "@aws-cdk/pipelines.DockerCredential#dockerHub",
        "@aws-cdk/pipelines.DockerCredential#ecr",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst dockerHubSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'DHSecret', 'arn:aws:...');\nconst customRegSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'CRSecret', 'arn:aws:...');\nconst repo1 = ecr.Repository.fromRepositoryArn(this, 'Repo', 'arn:aws:ecr:eu-west-1:0123456789012:repository/Repo1');\nconst repo2 = ecr.Repository.fromRepositoryArn(this, 'Repo', 'arn:aws:ecr:eu-west-1:0123456789012:repository/Repo2');\n\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  dockerCredentials: [\n    pipelines.DockerCredential.dockerHub(dockerHubSecret),\n    pipelines.DockerCredential.customRegistry('dockerregistry.example.com', customRegSecret),\n    pipelines.DockerCredential.ecr([repo1, repo2]),\n  ],\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: ['npm ci','npm run build','npx cdk synth'],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 17,
        "75": 42,
        "104": 5,
        "192": 3,
        "193": 3,
        "194": 18,
        "196": 8,
        "197": 2,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 5
      },
      "fqnsFingerprint": "d1f616ac7062c286500721b065433fcc8c47b63d711b958f609799862c9684c6"
    },
    "8655fa8ca0e0d78966574e34a7becae17f0fa5b388a19dcb576db50c96b55d7a": {
      "translations": {
        "python": {
          "source": "docker_hub_secret = secretsmanager.Secret.from_secret_complete_arn(self, \"DHSecret\", \"arn:aws:...\")\n# Only the image asset publishing actions will be granted read access to the secret.\ncreds = pipelines.DockerCredential.docker_hub(docker_hub_secret, usages=[pipelines.DockerCredentialUsage.ASSET_PUBLISHING])",
          "version": "2"
        },
        "csharp": {
          "source": "ISecret dockerHubSecret = Secret.FromSecretCompleteArn(this, \"DHSecret\", \"arn:aws:...\");\n// Only the image asset publishing actions will be granted read access to the secret.\nDockerCredential creds = DockerCredential.DockerHub(dockerHubSecret, new ExternalDockerCredentialOptions { Usages = new [] { DockerCredentialUsage.ASSET_PUBLISHING } });",
          "version": "1"
        },
        "java": {
          "source": "ISecret dockerHubSecret = Secret.fromSecretCompleteArn(this, \"DHSecret\", \"arn:aws:...\");\n// Only the image asset publishing actions will be granted read access to the secret.\nDockerCredential creds = DockerCredential.dockerHub(dockerHubSecret, ExternalDockerCredentialOptions.builder().usages(List.of(DockerCredentialUsage.ASSET_PUBLISHING)).build());",
          "version": "1"
        },
        "$": {
          "source": "const dockerHubSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'DHSecret', 'arn:aws:...');\n// Only the image asset publishing actions will be granted read access to the secret.\nconst creds = pipelines.DockerCredential.dockerHub(dockerHubSecret, { usages: [pipelines.DockerCredentialUsage.ASSET_PUBLISHING] });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.DockerCredentialUsage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretCompleteArn",
        "@aws-cdk/pipelines.DockerCredential",
        "@aws-cdk/pipelines.DockerCredential#dockerHub",
        "@aws-cdk/pipelines.DockerCredentialUsage",
        "@aws-cdk/pipelines.DockerCredentialUsage#ASSET_PUBLISHING",
        "@aws-cdk/pipelines.ExternalDockerCredentialOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst dockerHubSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'DHSecret', 'arn:aws:...');\n// Only the image asset publishing actions will be granted read access to the secret.\nconst creds = pipelines.DockerCredential.dockerHub(dockerHubSecret, { usages: [pipelines.DockerCredentialUsage.ASSET_PUBLISHING] });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 6,
        "196": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "732180b7c772952068c5731823a78760824c6f55591a4c120f9fbb0a8d97953f"
    },
    "6a2947c5e3385b7ded678a080fe80ca35930a9b990758f52232be3b6c6222e20": {
      "translations": {
        "python": {
          "source": "# repository: ecr.IRepository\n\npipelines.CodePipelineSource.ecr(repository,\n    image_tag=\"latest\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "IRepository repository;\n\nCodePipelineSource.Ecr(repository, new ECRSourceOptions {\n    ImageTag = \"latest\"\n});",
          "version": "1"
        },
        "java": {
          "source": "IRepository repository;\n\nCodePipelineSource.ecr(repository, ECRSourceOptions.builder()\n        .imageTag(\"latest\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const repository: ecr.IRepository;\npipelines.CodePipelineSource.ecr(repository, {\n  imageTag: 'latest',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.ECRSourceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ecr.IRepository",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#ecr",
        "@aws-cdk/pipelines.ECRSourceOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const repository: ecr.IRepository;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\npipelines.CodePipelineSource.ecr(repository, {\n  imageTag: 'latest',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "cedf3507998eb3ef0596f47d134d91e097756ac3be579facc76097f213a0b78d"
    },
    "7e30e8320704ef9e7b22062e5ed6bb2d55b17a7b5b7f0ce12dadda0f9fce8490": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.pipelines as pipelines\n\n# role: iam.Role\n\necr_docker_credential_options = pipelines.EcrDockerCredentialOptions(\n    assume_role=role,\n    usages=[pipelines.DockerCredentialUsage.SYNTH]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.Pipelines;\n\nRole role;\n\nEcrDockerCredentialOptions ecrDockerCredentialOptions = new EcrDockerCredentialOptions {\n    AssumeRole = role,\n    Usages = new [] { DockerCredentialUsage.SYNTH }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.pipelines.*;\n\nRole role;\n\nEcrDockerCredentialOptions ecrDockerCredentialOptions = EcrDockerCredentialOptions.builder()\n        .assumeRole(role)\n        .usages(List.of(DockerCredentialUsage.SYNTH))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const role: iam.Role;\nconst ecrDockerCredentialOptions: pipelines.EcrDockerCredentialOptions = {\n  assumeRole: role,\n  usages: [pipelines.DockerCredentialUsage.SYNTH],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.EcrDockerCredentialOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/pipelines.DockerCredentialUsage",
        "@aws-cdk/pipelines.DockerCredentialUsage#SYNTH",
        "@aws-cdk/pipelines.EcrDockerCredentialOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ecrDockerCredentialOptions: pipelines.EcrDockerCredentialOptions = {\n  assumeRole: role,\n  usages: [pipelines.DockerCredentialUsage.SYNTH],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 1,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "d521f8b21c49b06726ca3afdfd9f565b6c842a76171ae179cd50e9ee02223792"
    },
    "da1c2f67c8bc37ff87d76bfc2b17ba33231dbf4e83e612c39865d32d6cb0623a": {
      "translations": {
        "python": {
          "source": "docker_hub_secret = secretsmanager.Secret.from_secret_complete_arn(self, \"DHSecret\", \"arn:aws:...\")\n# Only the image asset publishing actions will be granted read access to the secret.\ncreds = pipelines.DockerCredential.docker_hub(docker_hub_secret, usages=[pipelines.DockerCredentialUsage.ASSET_PUBLISHING])",
          "version": "2"
        },
        "csharp": {
          "source": "ISecret dockerHubSecret = Secret.FromSecretCompleteArn(this, \"DHSecret\", \"arn:aws:...\");\n// Only the image asset publishing actions will be granted read access to the secret.\nDockerCredential creds = DockerCredential.DockerHub(dockerHubSecret, new ExternalDockerCredentialOptions { Usages = new [] { DockerCredentialUsage.ASSET_PUBLISHING } });",
          "version": "1"
        },
        "java": {
          "source": "ISecret dockerHubSecret = Secret.fromSecretCompleteArn(this, \"DHSecret\", \"arn:aws:...\");\n// Only the image asset publishing actions will be granted read access to the secret.\nDockerCredential creds = DockerCredential.dockerHub(dockerHubSecret, ExternalDockerCredentialOptions.builder().usages(List.of(DockerCredentialUsage.ASSET_PUBLISHING)).build());",
          "version": "1"
        },
        "$": {
          "source": "const dockerHubSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'DHSecret', 'arn:aws:...');\n// Only the image asset publishing actions will be granted read access to the secret.\nconst creds = pipelines.DockerCredential.dockerHub(dockerHubSecret, { usages: [pipelines.DockerCredentialUsage.ASSET_PUBLISHING] });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.ExternalDockerCredentialOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-secretsmanager.ISecret",
        "@aws-cdk/aws-secretsmanager.Secret",
        "@aws-cdk/aws-secretsmanager.Secret#fromSecretCompleteArn",
        "@aws-cdk/pipelines.DockerCredential",
        "@aws-cdk/pipelines.DockerCredential#dockerHub",
        "@aws-cdk/pipelines.DockerCredentialUsage",
        "@aws-cdk/pipelines.DockerCredentialUsage#ASSET_PUBLISHING",
        "@aws-cdk/pipelines.ExternalDockerCredentialOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst dockerHubSecret = secretsmanager.Secret.fromSecretCompleteArn(this, 'DHSecret', 'arn:aws:...');\n// Only the image asset publishing actions will be granted read access to the secret.\nconst creds = pipelines.DockerCredential.dockerHub(dockerHubSecret, { usages: [pipelines.DockerCredentialUsage.ASSET_PUBLISHING] });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 6,
        "196": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "732180b7c772952068c5731823a78760824c6f55591a4c120f9fbb0a8d97953f"
    },
    "ea5f6b284d216c210f318a114169b27889e75880b5c8ed3d34bd7a3d40626a33": {
      "translations": {
        "python": {
          "source": "class MyJenkinsStep(pipelines.Steppipelines.ICodePipelineActionFactory):\n    def __init__(self, provider, input):\n        super().__init__(\"MyJenkinsStep\")\n\n        # This is necessary if your step accepts things like environment variables\n        # that may contain outputs from other steps. It doesn't matter what the\n        # structure is, as long as it contains the values that may contain outputs.\n        self.discover_referenced_outputs({\n            \"env\": {}\n        })\n\n    def produce_action(self, stage, *, scope, actionName, runOrder, variablesNamespace=None, artifacts, fallbackArtifact=None, pipeline, codeBuildDefaults=None, beforeSelfMutation=None):\n\n        # This is where you control what type of Action gets added to the\n        # CodePipeline\n        stage.add_action(cpactions.JenkinsAction(\n            # Copy 'actionName' and 'runOrder' from the options\n            action_name=action_name,\n            run_order=run_order,\n\n            # Jenkins-specific configuration\n            type=cpactions.JenkinsActionType.TEST,\n            jenkins_provider=self.provider,\n            project_name=\"MyJenkinsProject\",\n\n            # Translate the FileSet into a codepipeline.Artifact\n            inputs=[artifacts.to_code_pipeline(self.input)]\n        ))\n\n        return pipelines.CodePipelineActionFactoryResult(run_orders_consumed=1)",
          "version": "2"
        },
        "csharp": {
          "source": "class MyJenkinsStep : Step, ICodePipelineActionFactory\n{\n    public MyJenkinsStep(JenkinsProvider provider, FileSet input) : base(\"MyJenkinsStep\")\n    {\n\n        // This is necessary if your step accepts things like environment variables\n        // that may contain outputs from other steps. It doesn't matter what the\n        // structure is, as long as it contains the values that may contain outputs.\n        DiscoverReferencedOutputs(new Dictionary<string, IDictionary<string, object>> {\n            { \"env\", new Struct { } }\n        });\n    }\n\n    public CodePipelineActionFactoryResult ProduceAction(IStage stage, ProduceActionOptions options)\n    {\n\n        // This is where you control what type of Action gets added to the\n        // CodePipeline\n        stage.AddAction(new JenkinsAction(new JenkinsActionProps {\n            // Copy 'actionName' and 'runOrder' from the options\n            ActionName = options.ActionName,\n            RunOrder = options.RunOrder,\n\n            // Jenkins-specific configuration\n            Type = JenkinsActionType.TEST,\n            JenkinsProvider = Provider,\n            ProjectName = \"MyJenkinsProject\",\n\n            // Translate the FileSet into a codepipeline.Artifact\n            Inputs = new [] { options.Artifacts.ToCodePipeline(Input) }\n        }));\n\n        return new CodePipelineActionFactoryResult { RunOrdersConsumed = 1 };\n    }\n}",
          "version": "1"
        },
        "java": {
          "source": "public class MyJenkinsStep extends Step implements ICodePipelineActionFactory {\n    public MyJenkinsStep(JenkinsProvider provider, FileSet input) {\n        super(\"MyJenkinsStep\");\n\n        // This is necessary if your step accepts things like environment variables\n        // that may contain outputs from other steps. It doesn't matter what the\n        // structure is, as long as it contains the values that may contain outputs.\n        this.discoverReferencedOutputs(Map.of(\n                \"env\", Map.of()));\n    }\n\n    public CodePipelineActionFactoryResult produceAction(IStage stage, ProduceActionOptions options) {\n\n        // This is where you control what type of Action gets added to the\n        // CodePipeline\n        stage.addAction(JenkinsAction.Builder.create()\n                // Copy 'actionName' and 'runOrder' from the options\n                .actionName(options.getActionName())\n                .runOrder(options.getRunOrder())\n\n                // Jenkins-specific configuration\n                .type(JenkinsActionType.TEST)\n                .jenkinsProvider(this.provider)\n                .projectName(\"MyJenkinsProject\")\n\n                // Translate the FileSet into a codepipeline.Artifact\n                .inputs(List.of(options.artifacts.toCodePipeline(this.input)))\n                .build());\n\n        return CodePipelineActionFactoryResult.builder().runOrdersConsumed(1).build();\n    }\n}",
          "version": "1"
        },
        "$": {
          "source": "class MyJenkinsStep extends pipelines.Step implements pipelines.ICodePipelineActionFactory {\n  constructor(\n    private readonly provider: cpactions.JenkinsProvider,\n    private readonly input: pipelines.FileSet,\n  ) {\n    super('MyJenkinsStep');\n\n    // This is necessary if your step accepts things like environment variables\n    // that may contain outputs from other steps. It doesn't matter what the\n    // structure is, as long as it contains the values that may contain outputs.\n    this.discoverReferencedOutputs({\n      env: { /* ... */ }\n    });\n  }\n\n  public produceAction(stage: codepipeline.IStage, options: pipelines.ProduceActionOptions): pipelines.CodePipelineActionFactoryResult {\n\n    // This is where you control what type of Action gets added to the\n    // CodePipeline\n    stage.addAction(new cpactions.JenkinsAction({\n      // Copy 'actionName' and 'runOrder' from the options\n      actionName: options.actionName,\n      runOrder: options.runOrder,\n\n      // Jenkins-specific configuration\n      type: cpactions.JenkinsActionType.TEST,\n      jenkinsProvider: this.provider,\n      projectName: 'MyJenkinsProject',\n\n      // Translate the FileSet into a codepipeline.Artifact\n      inputs: [options.artifacts.toCodePipeline(this.input)],\n    }));\n\n    return { runOrdersConsumed: 1 };\n  }\n}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.FileSet"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.IJenkinsProvider",
        "@aws-cdk/aws-codepipeline-actions.JenkinsAction",
        "@aws-cdk/aws-codepipeline-actions.JenkinsActionProps",
        "@aws-cdk/aws-codepipeline-actions.JenkinsActionType",
        "@aws-cdk/aws-codepipeline-actions.JenkinsActionType#TEST",
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/aws-codepipeline.IStage#addAction",
        "@aws-cdk/pipelines.ArtifactMap#toCodePipeline",
        "@aws-cdk/pipelines.FileSet",
        "@aws-cdk/pipelines.ProduceActionOptions#actionName",
        "@aws-cdk/pipelines.ProduceActionOptions#artifacts",
        "@aws-cdk/pipelines.ProduceActionOptions#runOrder",
        "@aws-cdk/pipelines.Step",
        "@aws-cdk/pipelines.Step#discoverReferencedOutputs"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nclass MyJenkinsStep extends pipelines.Step implements pipelines.ICodePipelineActionFactory {\n  constructor(\n    private readonly provider: cpactions.JenkinsProvider,\n    private readonly input: pipelines.FileSet,\n  ) {\n    super('MyJenkinsStep');\n\n    // This is necessary if your step accepts things like environment variables\n    // that may contain outputs from other steps. It doesn't matter what the\n    // structure is, as long as it contains the values that may contain outputs.\n    this.discoverReferencedOutputs({\n      env: { /* ... */ }\n    });\n  }\n\n  public produceAction(stage: codepipeline.IStage, options: pipelines.ProduceActionOptions): pipelines.CodePipelineActionFactoryResult {\n\n    // This is where you control what type of Action gets added to the\n    // CodePipeline\n    stage.addAction(new cpactions.JenkinsAction({\n      // Copy 'actionName' and 'runOrder' from the options\n      actionName: options.actionName,\n      runOrder: options.runOrder,\n\n      // Jenkins-specific configuration\n      type: cpactions.JenkinsActionType.TEST,\n      jenkinsProvider: this.provider,\n      projectName: 'MyJenkinsProject',\n\n      // Translate the FileSet into a codepipeline.Artifact\n      inputs: [options.artifacts.toCodePipeline(this.input)],\n    }));\n\n    return { runOrdersConsumed: 1 };\n  }\n}\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 45,
        "102": 1,
        "104": 3,
        "117": 2,
        "119": 1,
        "138": 2,
        "153": 5,
        "156": 4,
        "161": 1,
        "162": 1,
        "169": 5,
        "192": 1,
        "193": 4,
        "194": 13,
        "196": 4,
        "197": 1,
        "216": 2,
        "223": 2,
        "226": 3,
        "235": 1,
        "245": 1,
        "279": 2,
        "281": 8
      },
      "fqnsFingerprint": "b23768483faf23b6c05f0c6b1ea08b2863ee136091ea88d2d0ebd3cb8586a9d0"
    },
    "c342ff1fae50692c5902607b425f2be4f9fd3c0c28913fe7b02a36ad3e0a64ba": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.pipelines as pipelines\n\n# file_set: pipelines.FileSet\n\nfile_set_location = pipelines.FileSetLocation(\n    directory=\"directory\",\n    file_set=file_set\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Pipelines;\n\nFileSet fileSet;\n\nFileSetLocation fileSetLocation = new FileSetLocation {\n    Directory = \"directory\",\n    FileSet = fileSet\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.pipelines.*;\n\nFileSet fileSet;\n\nFileSetLocation fileSetLocation = FileSetLocation.builder()\n        .directory(\"directory\")\n        .fileSet(fileSet)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const fileSet: pipelines.FileSet;\nconst fileSetLocation: pipelines.FileSetLocation = {\n  directory: 'directory',\n  fileSet: fileSet,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.FileSetLocation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.FileSet",
        "@aws-cdk/pipelines.FileSetLocation"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const fileSet: pipelines.FileSet;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fileSetLocation: pipelines.FileSetLocation = {\n  directory: 'directory',\n  fileSet: fileSet,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a5867f0e26a9a2b8c03b327086881559817c92f29ce98dfbf03d696656333da3"
    },
    "43e4d67a4e3abfdf11ea1b2e018f31be4c8b17e38f734eca5e10ffb1cd922594": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.pipelines as pipelines\n\n# artifact: codepipeline.Artifact\n\nfrom_stack_artifact_options = pipelines.FromStackArtifactOptions(\n    cloud_assembly_input=artifact,\n\n    # the properties below are optional\n    execute_run_order=123,\n    output=artifact,\n    output_file_name=\"outputFileName\",\n    prepare_run_order=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.Pipelines;\n\nArtifact artifact;\n\nFromStackArtifactOptions fromStackArtifactOptions = new FromStackArtifactOptions {\n    CloudAssemblyInput = artifact,\n\n    // the properties below are optional\n    ExecuteRunOrder = 123,\n    Output = artifact,\n    OutputFileName = \"outputFileName\",\n    PrepareRunOrder = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.pipelines.*;\n\nArtifact artifact;\n\nFromStackArtifactOptions fromStackArtifactOptions = FromStackArtifactOptions.builder()\n        .cloudAssemblyInput(artifact)\n\n        // the properties below are optional\n        .executeRunOrder(123)\n        .output(artifact)\n        .outputFileName(\"outputFileName\")\n        .prepareRunOrder(123)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\nconst fromStackArtifactOptions: pipelines.FromStackArtifactOptions = {\n  cloudAssemblyInput: artifact,\n\n  // the properties below are optional\n  executeRunOrder: 123,\n  output: artifact,\n  outputFileName: 'outputFileName',\n  prepareRunOrder: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.FromStackArtifactOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/pipelines.FromStackArtifactOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst fromStackArtifactOptions: pipelines.FromStackArtifactOptions = {\n  cloudAssemblyInput: artifact,\n\n  // the properties below are optional\n  executeRunOrder: 123,\n  output: artifact,\n  outputFileName: 'outputFileName',\n  prepareRunOrder: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 3,
        "75": 15,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "b662615d089cf90e10d8d9a7541717f206b33f22f9e31f6395d6efafb650d49b"
    },
    "cc3a153237c85b1d1dc8933d24dc8b4ece21fb65db371fa44cbe7db3929f6223": {
      "translations": {
        "python": {
          "source": "pipelines.CodePipelineSource.git_hub(\"org/repo\", \"branch\",\n    # This is optional\n    authentication=cdk.SecretValue.secrets_manager(\"my-token\")\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipelineSource.GitHub(\"org/repo\", \"branch\", new GitHubSourceOptions {\n    // This is optional\n    Authentication = SecretValue.SecretsManager(\"my-token\")\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipelineSource.gitHub(\"org/repo\", \"branch\", GitHubSourceOptions.builder()\n        // This is optional\n        .authentication(SecretValue.secretsManager(\"my-token\"))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "pipelines.CodePipelineSource.gitHub('org/repo', 'branch', {\n  // This is optional\n  authentication: cdk.SecretValue.secretsManager('my-token'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.GitHubSourceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#gitHub",
        "@aws-cdk/pipelines.GitHubSourceOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\npipelines.CodePipelineSource.gitHub('org/repo', 'branch', {\n  // This is optional\n  authentication: cdk.SecretValue.secretsManager('my-token'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "193": 1,
        "194": 4,
        "196": 2,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "05201324a1c0912cb47bef756e3c2121353d9d61644bc8ff7dcff45a894df21c"
    },
    "f9b94f8aed33555bb483a654d1cffde744210f881f5ed407c7afc0e41c57cf13": {
      "translations": {
        "python": {
          "source": "oauth = cdk.SecretValue.secrets_manager(\"my-github-token\")",
          "version": "2"
        },
        "csharp": {
          "source": "SecretValue oauth = SecretValue.SecretsManager(\"my-github-token\");",
          "version": "1"
        },
        "java": {
          "source": "SecretValue oauth = SecretValue.secretsManager(\"my-github-token\");",
          "version": "1"
        },
        "$": {
          "source": "const oauth = cdk.SecretValue.secretsManager('my-github-token');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/pipelines.GitHubSourceOptions",
          "memberName": "authentication"
        },
        "field": {
          "field": "markdown",
          "line": 3
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.SecretValue",
        "@aws-cdk/core.SecretValue#secretsManager"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst oauth = cdk.SecretValue.secretsManager('my-github-token');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "1affdec636c4771de9c3069b0eb7c0d825baadde999c12b293ae08cb06908af8"
    },
    "b6bb4d589bd4b2020d1572a514d617d2c5bc2c8ba0aa7b227313be3a469d1b20": {
      "translations": {
        "python": {
          "source": "# pipeline: pipelines.CodePipeline\n\npreprod = MyApplicationStage(self, \"PreProd\")\nprod = MyApplicationStage(self, \"Prod\")\n\npipeline.add_stage(preprod,\n    post=[\n        pipelines.ShellStep(\"Validate Endpoint\",\n            commands=[\"curl -Ssf https://my.webservice.com/\"]\n        )\n    ]\n)\npipeline.add_stage(prod,\n    pre=[\n        pipelines.ManualApprovalStep(\"PromoteToProd\")\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline;\n\nMyApplicationStage preprod = new MyApplicationStage(this, \"PreProd\");\nMyApplicationStage prod = new MyApplicationStage(this, \"Prod\");\n\npipeline.AddStage(preprod, new AddStageOpts {\n    Post = new [] {\n        new ShellStep(\"Validate Endpoint\", new ShellStepProps {\n            Commands = new [] { \"curl -Ssf https://my.webservice.com/\" }\n        }) }\n});\npipeline.AddStage(prod, new AddStageOpts {\n    Pre = new [] {\n        new ManualApprovalStep(\"PromoteToProd\") }\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline;\n\nMyApplicationStage preprod = new MyApplicationStage(this, \"PreProd\");\nMyApplicationStage prod = new MyApplicationStage(this, \"Prod\");\n\npipeline.addStage(preprod, AddStageOpts.builder()\n        .post(List.of(\n            ShellStep.Builder.create(\"Validate Endpoint\")\n                    .commands(List.of(\"curl -Ssf https://my.webservice.com/\"))\n                    .build()))\n        .build());\npipeline.addStage(prod, AddStageOpts.builder()\n        .pre(List.of(\n            new ManualApprovalStep(\"PromoteToProd\")))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: pipelines.CodePipeline;\nconst preprod = new MyApplicationStage(this, 'PreProd');\nconst prod = new MyApplicationStage(this, 'Prod');\n\npipeline.addStage(preprod, {\n  post: [\n    new pipelines.ShellStep('Validate Endpoint', {\n      commands: ['curl -Ssf https://my.webservice.com/'],\n    }),\n  ],\n});\npipeline.addStage(prod, {\n  pre: [\n    new pipelines.ManualApprovalStep('PromoteToProd'),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.ManualApprovalStep"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Stage",
        "@aws-cdk/pipelines.AddStageOpts",
        "@aws-cdk/pipelines.ManualApprovalStep",
        "@aws-cdk/pipelines.PipelineBase#addStage",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: pipelines.CodePipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst preprod = new MyApplicationStage(this, 'PreProd');\nconst prod = new MyApplicationStage(this, 'Prod');\n\npipeline.addStage(preprod, {\n  post: [\n    new pipelines.ShellStep('Validate Endpoint', {\n      commands: ['curl -Ssf https://my.webservice.com/'],\n    }),\n  ],\n});\npipeline.addStage(prod, {\n  pre: [\n    new pipelines.ManualApprovalStep('PromoteToProd'),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 3,
        "193": 3,
        "194": 4,
        "196": 2,
        "197": 4,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b03a04713cd09c8fc498feefb1fa4401048b9b3b66f4b181460e2273e165f765"
    },
    "fb6a346e7380cd01ca97979169ec5055a0d11940ff218e159ce8a990affbc953": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.pipelines as pipelines\n\nmanual_approval_step_props = pipelines.ManualApprovalStepProps(\n    comment=\"comment\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Pipelines;\n\nManualApprovalStepProps manualApprovalStepProps = new ManualApprovalStepProps {\n    Comment = \"comment\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.pipelines.*;\n\nManualApprovalStepProps manualApprovalStepProps = ManualApprovalStepProps.builder()\n        .comment(\"comment\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\nconst manualApprovalStepProps: pipelines.ManualApprovalStepProps = {\n  comment: 'comment',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.ManualApprovalStepProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.ManualApprovalStepProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst manualApprovalStepProps: pipelines.ManualApprovalStepProps = {\n  comment: 'comment',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "f4bb7c5062c3bc68e2a46388ecf3471adce61dc609fcfed561e0531c072008ba"
    },
    "86e77fbfe411932d5add901f1e744bd142592a890763ee91a51406af6323cab2": {
      "translations": {
        "python": {
          "source": "# pipeline: pipelines.CodePipeline\n\nstage = MyApplicationStage(self, \"MyApplication\")\npipeline.add_stage(stage,\n    pre=[\n        pipelines.ConfirmPermissionsBroadening(\"Check\", stage=stage)\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline;\n\nMyApplicationStage stage = new MyApplicationStage(this, \"MyApplication\");\npipeline.AddStage(stage, new AddStageOpts {\n    Pre = new [] {\n        new ConfirmPermissionsBroadening(\"Check\", new PermissionsBroadeningCheckProps { Stage = stage }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline;\n\nMyApplicationStage stage = new MyApplicationStage(this, \"MyApplication\");\npipeline.addStage(stage, AddStageOpts.builder()\n        .pre(List.of(\n            ConfirmPermissionsBroadening.Builder.create(\"Check\").stage(stage).build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: pipelines.CodePipeline;\nconst stage = new MyApplicationStage(this, 'MyApplication');\npipeline.addStage(stage, {\n  pre: [\n    new pipelines.ConfirmPermissionsBroadening('Check', { stage }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.PermissionsBroadeningCheckProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Stage",
        "@aws-cdk/pipelines.AddStageOpts",
        "@aws-cdk/pipelines.ConfirmPermissionsBroadening",
        "@aws-cdk/pipelines.PermissionsBroadeningCheckProps",
        "@aws-cdk/pipelines.PipelineBase#addStage",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: pipelines.CodePipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst stage = new MyApplicationStage(this, 'MyApplication');\npipeline.addStage(stage, {\n  pre: [\n    new pipelines.ConfirmPermissionsBroadening('Check', { stage }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "2d4e0da4b2dc59e6f9bcb2ae4153de02862b63622dc406bd246df774d34c9744"
    },
    "9216211588519cee91835850f706d3001325799d1b3e77bad38580818eeffcea": {
      "translations": {
        "python": {
          "source": "# pipeline: pipelines.CodePipeline\n\n\nwave = pipeline.add_wave(\"MyWave\")\nwave.add_stage(MyApplicationStage(self, \"Stage1\"))\nwave.add_stage(MyApplicationStage(self, \"Stage2\"))",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline;\n\n\nWave wave = pipeline.AddWave(\"MyWave\");\nwave.AddStage(new MyApplicationStage(this, \"Stage1\"));\nwave.AddStage(new MyApplicationStage(this, \"Stage2\"));",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline;\n\n\nWave wave = pipeline.addWave(\"MyWave\");\nwave.addStage(new MyApplicationStage(this, \"Stage1\"));\nwave.addStage(new MyApplicationStage(this, \"Stage2\"));",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: pipelines.CodePipeline;\n\nconst wave = pipeline.addWave('MyWave');\nwave.addStage(new MyApplicationStage(this, 'Stage1'));\nwave.addStage(new MyApplicationStage(this, 'Stage2'));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/pipelines.PipelineBase",
          "memberName": "addWave"
        },
        "field": {
          "field": "markdown",
          "line": 5
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Stage",
        "@aws-cdk/pipelines.PipelineBase#addWave",
        "@aws-cdk/pipelines.Wave",
        "@aws-cdk/pipelines.Wave#addStage",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: pipelines.CodePipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst wave = pipeline.addWave('MyWave');\nwave.addStage(new MyApplicationStage(this, 'Stage1'));\nwave.addStage(new MyApplicationStage(this, 'Stage2'));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 12,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 3,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "fc57f09e483798b08355dcdc7e00cfe0f25bddc999ef5c8c768705541aef2e84"
    },
    "00b3c1aa07360b2ace1a4bd6dec9dd0c35289760950ca472b25129c7345f1f71": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.pipelines as pipelines\n\n# file_set_producer: pipelines.IFileSetProducer\n\npipeline_base_props = pipelines.PipelineBaseProps(\n    synth=file_set_producer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Pipelines;\n\nIFileSetProducer fileSetProducer;\n\nPipelineBaseProps pipelineBaseProps = new PipelineBaseProps {\n    Synth = fileSetProducer\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.pipelines.*;\n\nIFileSetProducer fileSetProducer;\n\nPipelineBaseProps pipelineBaseProps = PipelineBaseProps.builder()\n        .synth(fileSetProducer)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const fileSetProducer: pipelines.IFileSetProducer;\nconst pipelineBaseProps: pipelines.PipelineBaseProps = {\n  synth: fileSetProducer,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.PipelineBaseProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.PipelineBaseProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const fileSetProducer: pipelines.IFileSetProducer;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst pipelineBaseProps: pipelines.PipelineBaseProps = {\n  synth: fileSetProducer,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "b9e6a6353449223267faf06761845540b23d6c9cad5155eb9c9c09efc004a15f"
    },
    "121166683f449df0552213b32c9985790bc7db1abd412379878d5034c4f20f1c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_s3 as s3\nimport aws_cdk.core as cdk\nimport aws_cdk.pipelines as pipelines\nimport constructs as constructs\n\n# artifact: codepipeline.Artifact\n# artifact_map: pipelines.ArtifactMap\n# bucket: s3.Bucket\n# build_image: codebuild.IBuildImage\n# build_spec: codebuild.BuildSpec\n# code_pipeline: pipelines.CodePipeline\n# construct: constructs.Construct\n# policy_statement: iam.PolicyStatement\n# security_group: ec2.SecurityGroup\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# value: Any\n# vpc: ec2.Vpc\n\nproduce_action_options = pipelines.ProduceActionOptions(\n    action_name=\"actionName\",\n    artifacts=artifact_map,\n    pipeline=code_pipeline,\n    run_order=123,\n    scope=construct,\n\n    # the properties below are optional\n    before_self_mutation=False,\n    code_build_defaults=pipelines.CodeBuildOptions(\n        build_environment=codebuild.BuildEnvironment(\n            build_image=build_image,\n            certificate=codebuild.BuildEnvironmentCertificate(\n                bucket=bucket,\n                object_key=\"objectKey\"\n            ),\n            compute_type=codebuild.ComputeType.SMALL,\n            environment_variables={\n                \"environment_variables_key\": codebuild.BuildEnvironmentVariable(\n                    value=value,\n\n                    # the properties below are optional\n                    type=codebuild.BuildEnvironmentVariableType.PLAINTEXT\n                )\n            },\n            privileged=False\n        ),\n        partial_build_spec=build_spec,\n        role_policy=[policy_statement],\n        security_groups=[security_group],\n        subnet_selection=ec2.SubnetSelection(\n            availability_zones=[\"availabilityZones\"],\n            one_per_az=False,\n            subnet_filters=[subnet_filter],\n            subnet_group_name=\"subnetGroupName\",\n            subnet_name=\"subnetName\",\n            subnets=[subnet],\n            subnet_type=ec2.SubnetType.ISOLATED\n        ),\n        timeout=cdk.Duration.minutes(30),\n        vpc=vpc\n    ),\n    fallback_artifact=artifact,\n    variables_namespace=\"variablesNamespace\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.S3;\nusing Amazon.CDK;\nusing Amazon.CDK.Pipelines;\nusing Constructs;\n\nArtifact artifact;\nArtifactMap artifactMap;\nBucket bucket;\nIBuildImage buildImage;\nBuildSpec buildSpec;\nCodePipeline codePipeline;\nConstruct construct;\nPolicyStatement policyStatement;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nvar value;\nVpc vpc;\nProduceActionOptions produceActionOptions = new ProduceActionOptions {\n    ActionName = \"actionName\",\n    Artifacts = artifactMap,\n    Pipeline = codePipeline,\n    RunOrder = 123,\n    Scope = construct,\n\n    // the properties below are optional\n    BeforeSelfMutation = false,\n    CodeBuildDefaults = new CodeBuildOptions {\n        BuildEnvironment = new BuildEnvironment {\n            BuildImage = buildImage,\n            Certificate = new BuildEnvironmentCertificate {\n                Bucket = bucket,\n                ObjectKey = \"objectKey\"\n            },\n            ComputeType = ComputeType.SMALL,\n            EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n                { \"environmentVariablesKey\", new BuildEnvironmentVariable {\n                    Value = value,\n\n                    // the properties below are optional\n                    Type = BuildEnvironmentVariableType.PLAINTEXT\n                } }\n            },\n            Privileged = false\n        },\n        PartialBuildSpec = buildSpec,\n        RolePolicy = new [] { policyStatement },\n        SecurityGroups = new [] { securityGroup },\n        SubnetSelection = new SubnetSelection {\n            AvailabilityZones = new [] { \"availabilityZones\" },\n            OnePerAz = false,\n            SubnetFilters = new [] { subnetFilter },\n            SubnetGroupName = \"subnetGroupName\",\n            SubnetName = \"subnetName\",\n            Subnets = new [] { subnet },\n            SubnetType = SubnetType.ISOLATED\n        },\n        Timeout = Duration.Minutes(30),\n        Vpc = vpc\n    },\n    FallbackArtifact = artifact,\n    VariablesNamespace = \"variablesNamespace\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.s3.*;\nimport software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.pipelines.*;\nimport software.constructs.*;\n\nArtifact artifact;\nArtifactMap artifactMap;\nBucket bucket;\nIBuildImage buildImage;\nBuildSpec buildSpec;\nCodePipeline codePipeline;\nConstruct construct;\nPolicyStatement policyStatement;\nSecurityGroup securityGroup;\nSubnet subnet;\nSubnetFilter subnetFilter;\nObject value;\nVpc vpc;\n\nProduceActionOptions produceActionOptions = ProduceActionOptions.builder()\n        .actionName(\"actionName\")\n        .artifacts(artifactMap)\n        .pipeline(codePipeline)\n        .runOrder(123)\n        .scope(construct)\n\n        // the properties below are optional\n        .beforeSelfMutation(false)\n        .codeBuildDefaults(CodeBuildOptions.builder()\n                .buildEnvironment(BuildEnvironment.builder()\n                        .buildImage(buildImage)\n                        .certificate(BuildEnvironmentCertificate.builder()\n                                .bucket(bucket)\n                                .objectKey(\"objectKey\")\n                                .build())\n                        .computeType(ComputeType.SMALL)\n                        .environmentVariables(Map.of(\n                                \"environmentVariablesKey\", BuildEnvironmentVariable.builder()\n                                        .value(value)\n\n                                        // the properties below are optional\n                                        .type(BuildEnvironmentVariableType.PLAINTEXT)\n                                        .build()))\n                        .privileged(false)\n                        .build())\n                .partialBuildSpec(buildSpec)\n                .rolePolicy(List.of(policyStatement))\n                .securityGroups(List.of(securityGroup))\n                .subnetSelection(SubnetSelection.builder()\n                        .availabilityZones(List.of(\"availabilityZones\"))\n                        .onePerAz(false)\n                        .subnetFilters(List.of(subnetFilter))\n                        .subnetGroupName(\"subnetGroupName\")\n                        .subnetName(\"subnetName\")\n                        .subnets(List.of(subnet))\n                        .subnetType(SubnetType.ISOLATED)\n                        .build())\n                .timeout(Duration.minutes(30))\n                .vpc(vpc)\n                .build())\n        .fallbackArtifact(artifact)\n        .variablesNamespace(\"variablesNamespace\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\nimport * as pipelines from '@aws-cdk/pipelines';\nimport * as constructs from 'constructs';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const artifactMap: pipelines.ArtifactMap;\ndeclare const bucket: s3.Bucket;\ndeclare const buildImage: codebuild.IBuildImage;\ndeclare const buildSpec: codebuild.BuildSpec;\ndeclare const codePipeline: pipelines.CodePipeline;\ndeclare const construct: constructs.Construct;\ndeclare const policyStatement: iam.PolicyStatement;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const value: any;\ndeclare const vpc: ec2.Vpc;\nconst produceActionOptions: pipelines.ProduceActionOptions = {\n  actionName: 'actionName',\n  artifacts: artifactMap,\n  pipeline: codePipeline,\n  runOrder: 123,\n  scope: construct,\n\n  // the properties below are optional\n  beforeSelfMutation: false,\n  codeBuildDefaults: {\n    buildEnvironment: {\n      buildImage: buildImage,\n      certificate: {\n        bucket: bucket,\n        objectKey: 'objectKey',\n      },\n      computeType: codebuild.ComputeType.SMALL,\n      environmentVariables: {\n        environmentVariablesKey: {\n          value: value,\n\n          // the properties below are optional\n          type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n        },\n      },\n      privileged: false,\n    },\n    partialBuildSpec: buildSpec,\n    rolePolicy: [policyStatement],\n    securityGroups: [securityGroup],\n    subnetSelection: {\n      availabilityZones: ['availabilityZones'],\n      onePerAz: false,\n      subnetFilters: [subnetFilter],\n      subnetGroupName: 'subnetGroupName',\n      subnetName: 'subnetName',\n      subnets: [subnet],\n      subnetType: ec2.SubnetType.ISOLATED,\n    },\n    timeout: cdk.Duration.minutes(30),\n    vpc: vpc,\n  },\n  fallbackArtifact: artifact,\n  variablesNamespace: 'variablesNamespace',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.ProduceActionOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildEnvironmentCertificate",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType#PLAINTEXT",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.ComputeType",
        "@aws-cdk/aws-codebuild.ComputeType#SMALL",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes",
        "@aws-cdk/pipelines.ArtifactMap",
        "@aws-cdk/pipelines.CodeBuildOptions",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.ProduceActionOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as cdk from '@aws-cdk/core';\nimport * as pipelines from '@aws-cdk/pipelines';\nimport * as constructs from 'constructs';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const artifactMap: pipelines.ArtifactMap;\ndeclare const bucket: s3.Bucket;\ndeclare const buildImage: codebuild.IBuildImage;\ndeclare const buildSpec: codebuild.BuildSpec;\ndeclare const codePipeline: pipelines.CodePipeline;\ndeclare const construct: constructs.Construct;\ndeclare const policyStatement: iam.PolicyStatement;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const value: any;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst produceActionOptions: pipelines.ProduceActionOptions = {\n  actionName: 'actionName',\n  artifacts: artifactMap,\n  pipeline: codePipeline,\n  runOrder: 123,\n  scope: construct,\n\n  // the properties below are optional\n  beforeSelfMutation: false,\n  codeBuildDefaults: {\n    buildEnvironment: {\n      buildImage: buildImage,\n      certificate: {\n        bucket: bucket,\n        objectKey: 'objectKey',\n      },\n      computeType: codebuild.ComputeType.SMALL,\n      environmentVariables: {\n        environmentVariablesKey: {\n          value: value,\n\n          // the properties below are optional\n          type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n        },\n      },\n      privileged: false,\n    },\n    partialBuildSpec: buildSpec,\n    rolePolicy: [policyStatement],\n    securityGroups: [securityGroup],\n    subnetSelection: {\n      availabilityZones: ['availabilityZones'],\n      onePerAz: false,\n      subnetFilters: [subnetFilter],\n      subnetGroupName: 'subnetGroupName',\n      subnetName: 'subnetName',\n      subnets: [subnet],\n      subnetType: ec2.SubnetType.ISOLATED,\n    },\n    timeout: cdk.Duration.minutes(30),\n    vpc: vpc,\n  },\n  fallbackArtifact: artifact,\n  variablesNamespace: 'variablesNamespace',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 2,
        "10": 14,
        "75": 106,
        "91": 3,
        "125": 1,
        "130": 13,
        "153": 13,
        "169": 13,
        "192": 5,
        "193": 7,
        "194": 8,
        "196": 1,
        "225": 14,
        "242": 14,
        "243": 14,
        "254": 8,
        "255": 8,
        "256": 8,
        "281": 33,
        "290": 1
      },
      "fqnsFingerprint": "29d702d9d1be972fcdd55140b98755717437de8fc288bf942919521238771501"
    },
    "e1b4a08509be1bfbbb156ad5e2cc962bb33d249521c40af9bf6d572c0d741235": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.core as cdk\nimport aws_cdk.pipelines as pipelines\n\n# artifact: codepipeline.Artifact\n# build_spec: codebuild.BuildSpec\n# dependable: cdk.IDependable\n# role: iam.Role\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# vpc: ec2.Vpc\n\npublish_assets_action = pipelines.PublishAssetsAction(self, \"MyPublishAssetsAction\",\n    action_name=\"actionName\",\n    asset_type=pipelines.AssetType.FILE,\n    cloud_assembly_input=artifact,\n\n    # the properties below are optional\n    build_spec=build_spec,\n    cdk_cli_version=\"cdkCliVersion\",\n    create_buildspec_file=False,\n    dependable=dependable,\n    pre_install_commands=[\"preInstallCommands\"],\n    project_name=\"projectName\",\n    role=role,\n    subnet_selection=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    ),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK;\nusing Amazon.CDK.Pipelines;\n\nArtifact artifact;\nBuildSpec buildSpec;\nIDependable dependable;\nRole role;\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\nPublishAssetsAction publishAssetsAction = new PublishAssetsAction(this, \"MyPublishAssetsAction\", new PublishAssetsActionProps {\n    ActionName = \"actionName\",\n    AssetType = AssetType.FILE,\n    CloudAssemblyInput = artifact,\n\n    // the properties below are optional\n    BuildSpec = buildSpec,\n    CdkCliVersion = \"cdkCliVersion\",\n    CreateBuildspecFile = false,\n    Dependable = dependable,\n    PreInstallCommands = new [] { \"preInstallCommands\" },\n    ProjectName = \"projectName\",\n    Role = role,\n    SubnetSelection = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    },\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.pipelines.*;\n\nArtifact artifact;\nBuildSpec buildSpec;\nIDependable dependable;\nRole role;\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nPublishAssetsAction publishAssetsAction = PublishAssetsAction.Builder.create(this, \"MyPublishAssetsAction\")\n        .actionName(\"actionName\")\n        .assetType(AssetType.FILE)\n        .cloudAssemblyInput(artifact)\n\n        // the properties below are optional\n        .buildSpec(buildSpec)\n        .cdkCliVersion(\"cdkCliVersion\")\n        .createBuildspecFile(false)\n        .dependable(dependable)\n        .preInstallCommands(List.of(\"preInstallCommands\"))\n        .projectName(\"projectName\")\n        .role(role)\n        .subnetSelection(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const buildSpec: codebuild.BuildSpec;\ndeclare const dependable: cdk.IDependable;\ndeclare const role: iam.Role;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\nconst publishAssetsAction = new pipelines.PublishAssetsAction(this, 'MyPublishAssetsAction', {\n  actionName: 'actionName',\n  assetType: pipelines.AssetType.FILE,\n  cloudAssemblyInput: artifact,\n\n  // the properties below are optional\n  buildSpec: buildSpec,\n  cdkCliVersion: 'cdkCliVersion',\n  createBuildspecFile: false,\n  dependable: dependable,\n  preInstallCommands: ['preInstallCommands'],\n  projectName: 'projectName',\n  role: role,\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  vpc: vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.PublishAssetsAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/core.IDependable",
        "@aws-cdk/pipelines.AssetType",
        "@aws-cdk/pipelines.AssetType#FILE",
        "@aws-cdk/pipelines.PublishAssetsAction",
        "@aws-cdk/pipelines.PublishAssetsActionProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const buildSpec: codebuild.BuildSpec;\ndeclare const dependable: cdk.IDependable;\ndeclare const role: iam.Role;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst publishAssetsAction = new pipelines.PublishAssetsAction(this, 'MyPublishAssetsAction', {\n  actionName: 'actionName',\n  assetType: pipelines.AssetType.FILE,\n  cloudAssemblyInput: artifact,\n\n  // the properties below are optional\n  buildSpec: buildSpec,\n  cdkCliVersion: 'cdkCliVersion',\n  createBuildspecFile: false,\n  dependable: dependable,\n  preInstallCommands: ['preInstallCommands'],\n  projectName: 'projectName',\n  role: role,\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  vpc: vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 14,
        "75": 62,
        "91": 2,
        "104": 1,
        "130": 7,
        "153": 7,
        "169": 7,
        "192": 4,
        "193": 2,
        "194": 5,
        "197": 1,
        "225": 8,
        "242": 8,
        "243": 8,
        "254": 6,
        "255": 6,
        "256": 6,
        "281": 19,
        "290": 1
      },
      "fqnsFingerprint": "e07f43d60995480ba72273facbb66f21e9bee5a43d9402aa9f8f02f2776a02d0"
    },
    "7dbf6f673fb8279d58ca4f38f0fffa7fb648122a08c08375c4a25eada86a0fd7": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.core as cdk\nimport aws_cdk.pipelines as pipelines\n\n# artifact: codepipeline.Artifact\n# build_spec: codebuild.BuildSpec\n# dependable: cdk.IDependable\n# role: iam.Role\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# vpc: ec2.Vpc\n\npublish_assets_action_props = pipelines.PublishAssetsActionProps(\n    action_name=\"actionName\",\n    asset_type=pipelines.AssetType.FILE,\n    cloud_assembly_input=artifact,\n\n    # the properties below are optional\n    build_spec=build_spec,\n    cdk_cli_version=\"cdkCliVersion\",\n    create_buildspec_file=False,\n    dependable=dependable,\n    pre_install_commands=[\"preInstallCommands\"],\n    project_name=\"projectName\",\n    role=role,\n    subnet_selection=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    ),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK;\nusing Amazon.CDK.Pipelines;\n\nArtifact artifact;\nBuildSpec buildSpec;\nIDependable dependable;\nRole role;\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\nPublishAssetsActionProps publishAssetsActionProps = new PublishAssetsActionProps {\n    ActionName = \"actionName\",\n    AssetType = AssetType.FILE,\n    CloudAssemblyInput = artifact,\n\n    // the properties below are optional\n    BuildSpec = buildSpec,\n    CdkCliVersion = \"cdkCliVersion\",\n    CreateBuildspecFile = false,\n    Dependable = dependable,\n    PreInstallCommands = new [] { \"preInstallCommands\" },\n    ProjectName = \"projectName\",\n    Role = role,\n    SubnetSelection = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    },\n    Vpc = vpc\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.pipelines.*;\n\nArtifact artifact;\nBuildSpec buildSpec;\nIDependable dependable;\nRole role;\nSubnet subnet;\nSubnetFilter subnetFilter;\nVpc vpc;\n\nPublishAssetsActionProps publishAssetsActionProps = PublishAssetsActionProps.builder()\n        .actionName(\"actionName\")\n        .assetType(AssetType.FILE)\n        .cloudAssemblyInput(artifact)\n\n        // the properties below are optional\n        .buildSpec(buildSpec)\n        .cdkCliVersion(\"cdkCliVersion\")\n        .createBuildspecFile(false)\n        .dependable(dependable)\n        .preInstallCommands(List.of(\"preInstallCommands\"))\n        .projectName(\"projectName\")\n        .role(role)\n        .subnetSelection(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const buildSpec: codebuild.BuildSpec;\ndeclare const dependable: cdk.IDependable;\ndeclare const role: iam.Role;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\nconst publishAssetsActionProps: pipelines.PublishAssetsActionProps = {\n  actionName: 'actionName',\n  assetType: pipelines.AssetType.FILE,\n  cloudAssemblyInput: artifact,\n\n  // the properties below are optional\n  buildSpec: buildSpec,\n  cdkCliVersion: 'cdkCliVersion',\n  createBuildspecFile: false,\n  dependable: dependable,\n  preInstallCommands: ['preInstallCommands'],\n  projectName: 'projectName',\n  role: role,\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  vpc: vpc,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.PublishAssetsActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/core.IDependable",
        "@aws-cdk/pipelines.AssetType",
        "@aws-cdk/pipelines.AssetType#FILE",
        "@aws-cdk/pipelines.PublishAssetsActionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as cdk from '@aws-cdk/core';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const buildSpec: codebuild.BuildSpec;\ndeclare const dependable: cdk.IDependable;\ndeclare const role: iam.Role;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst publishAssetsActionProps: pipelines.PublishAssetsActionProps = {\n  actionName: 'actionName',\n  assetType: pipelines.AssetType.FILE,\n  cloudAssemblyInput: artifact,\n\n  // the properties below are optional\n  buildSpec: buildSpec,\n  cdkCliVersion: 'cdkCliVersion',\n  createBuildspecFile: false,\n  dependable: dependable,\n  preInstallCommands: ['preInstallCommands'],\n  projectName: 'projectName',\n  role: role,\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  vpc: vpc,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 13,
        "75": 62,
        "91": 2,
        "130": 7,
        "153": 8,
        "169": 8,
        "192": 4,
        "193": 2,
        "194": 4,
        "225": 8,
        "242": 8,
        "243": 8,
        "254": 6,
        "255": 6,
        "256": 6,
        "281": 19,
        "290": 1
      },
      "fqnsFingerprint": "dfaef79200a6584c6bca38b4c1666f690fce4d12e9590c2be0b9f572729af60f"
    },
    "f0f9dc11aadc675837bf010e543e5650295def1639eec3f9510b125df2f34b85": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline_actions as codepipeline_actions\nimport aws_cdk.pipelines as pipelines\n\ns3_source_options = pipelines.S3SourceOptions(\n    action_name=\"actionName\",\n    trigger=codepipeline_actions.S3Trigger.NONE\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline.Actions;\nusing Amazon.CDK.Pipelines;\n\nS3SourceOptions s3SourceOptions = new S3SourceOptions {\n    ActionName = \"actionName\",\n    Trigger = S3Trigger.NONE\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.actions.*;\nimport software.amazon.awscdk.pipelines.*;\n\nS3SourceOptions s3SourceOptions = S3SourceOptions.builder()\n        .actionName(\"actionName\")\n        .trigger(S3Trigger.NONE)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as pipelines from '@aws-cdk/pipelines';\nconst s3SourceOptions: pipelines.S3SourceOptions = {\n  actionName: 'actionName',\n  trigger: codepipeline_actions.S3Trigger.NONE,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.S3SourceOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline-actions.S3Trigger",
        "@aws-cdk/aws-codepipeline-actions.S3Trigger#NONE",
        "@aws-cdk/pipelines.S3SourceOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline_actions from '@aws-cdk/aws-codepipeline-actions';\nimport * as pipelines from '@aws-cdk/pipelines';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst s3SourceOptions: pipelines.S3SourceOptions = {\n  actionName: 'actionName',\n  trigger: codepipeline_actions.S3Trigger.NONE,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "6ea01f762ac2e462046da9265c0d68e6762906ca20b7fdba21e1d50ab814b9b2"
    },
    "4b76459de7b64c3b67efa0dbe13b68257fcc26f55b60e694a34336ed4647c824": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_s3 as s3\nimport aws_cdk.pipelines as pipelines\n\n# artifact: codepipeline.Artifact\n# bucket: s3.Bucket\n# build_image: codebuild.IBuildImage\n# policy_statement: iam.PolicyStatement\n# security_group: ec2.SecurityGroup\n# stack_output: pipelines.StackOutput\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# value: Any\n# vpc: ec2.Vpc\n\nshell_script_action = pipelines.ShellScriptAction(\n    action_name=\"actionName\",\n    commands=[\"commands\"],\n\n    # the properties below are optional\n    additional_artifacts=[artifact],\n    bash_options=\"bashOptions\",\n    environment=codebuild.BuildEnvironment(\n        build_image=build_image,\n        certificate=codebuild.BuildEnvironmentCertificate(\n            bucket=bucket,\n            object_key=\"objectKey\"\n        ),\n        compute_type=codebuild.ComputeType.SMALL,\n        environment_variables={\n            \"environment_variables_key\": codebuild.BuildEnvironmentVariable(\n                value=value,\n\n                # the properties below are optional\n                type=codebuild.BuildEnvironmentVariableType.PLAINTEXT\n            )\n        },\n        privileged=False\n    ),\n    environment_variables={\n        \"environment_variables_key\": codebuild.BuildEnvironmentVariable(\n            value=value,\n\n            # the properties below are optional\n            type=codebuild.BuildEnvironmentVariableType.PLAINTEXT\n        )\n    },\n    role_policy_statements=[policy_statement],\n    run_order=123,\n    security_groups=[security_group],\n    subnet_selection=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    ),\n    use_outputs={\n        \"use_outputs_key\": stack_output\n    },\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.S3;\nusing Amazon.CDK.Pipelines;\n\nArtifact artifact;\nBucket bucket;\nIBuildImage buildImage;\nPolicyStatement policyStatement;\nSecurityGroup securityGroup;\nStackOutput stackOutput;\nSubnet subnet;\nSubnetFilter subnetFilter;\nvar value;\nVpc vpc;\n\nShellScriptAction shellScriptAction = new ShellScriptAction(new ShellScriptActionProps {\n    ActionName = \"actionName\",\n    Commands = new [] { \"commands\" },\n\n    // the properties below are optional\n    AdditionalArtifacts = new [] { artifact },\n    BashOptions = \"bashOptions\",\n    Environment = new BuildEnvironment {\n        BuildImage = buildImage,\n        Certificate = new BuildEnvironmentCertificate {\n            Bucket = bucket,\n            ObjectKey = \"objectKey\"\n        },\n        ComputeType = ComputeType.SMALL,\n        EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n            { \"environmentVariablesKey\", new BuildEnvironmentVariable {\n                Value = value,\n\n                // the properties below are optional\n                Type = BuildEnvironmentVariableType.PLAINTEXT\n            } }\n        },\n        Privileged = false\n    },\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"environmentVariablesKey\", new BuildEnvironmentVariable {\n            Value = value,\n\n            // the properties below are optional\n            Type = BuildEnvironmentVariableType.PLAINTEXT\n        } }\n    },\n    RolePolicyStatements = new [] { policyStatement },\n    RunOrder = 123,\n    SecurityGroups = new [] { securityGroup },\n    SubnetSelection = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    },\n    UseOutputs = new Dictionary<string, StackOutput> {\n        { \"useOutputsKey\", stackOutput }\n    },\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.s3.*;\nimport software.amazon.awscdk.pipelines.*;\n\nArtifact artifact;\nBucket bucket;\nIBuildImage buildImage;\nPolicyStatement policyStatement;\nSecurityGroup securityGroup;\nStackOutput stackOutput;\nSubnet subnet;\nSubnetFilter subnetFilter;\nObject value;\nVpc vpc;\n\nShellScriptAction shellScriptAction = ShellScriptAction.Builder.create()\n        .actionName(\"actionName\")\n        .commands(List.of(\"commands\"))\n\n        // the properties below are optional\n        .additionalArtifacts(List.of(artifact))\n        .bashOptions(\"bashOptions\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(buildImage)\n                .certificate(BuildEnvironmentCertificate.builder()\n                        .bucket(bucket)\n                        .objectKey(\"objectKey\")\n                        .build())\n                .computeType(ComputeType.SMALL)\n                .environmentVariables(Map.of(\n                        \"environmentVariablesKey\", BuildEnvironmentVariable.builder()\n                                .value(value)\n\n                                // the properties below are optional\n                                .type(BuildEnvironmentVariableType.PLAINTEXT)\n                                .build()))\n                .privileged(false)\n                .build())\n        .environmentVariables(Map.of(\n                \"environmentVariablesKey\", BuildEnvironmentVariable.builder()\n                        .value(value)\n\n                        // the properties below are optional\n                        .type(BuildEnvironmentVariableType.PLAINTEXT)\n                        .build()))\n        .rolePolicyStatements(List.of(policyStatement))\n        .runOrder(123)\n        .securityGroups(List.of(securityGroup))\n        .subnetSelection(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .useOutputs(Map.of(\n                \"useOutputsKey\", stackOutput))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const bucket: s3.Bucket;\ndeclare const buildImage: codebuild.IBuildImage;\ndeclare const policyStatement: iam.PolicyStatement;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const stackOutput: pipelines.StackOutput;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const value: any;\ndeclare const vpc: ec2.Vpc;\nconst shellScriptAction = new pipelines.ShellScriptAction({\n  actionName: 'actionName',\n  commands: ['commands'],\n\n  // the properties below are optional\n  additionalArtifacts: [artifact],\n  bashOptions: 'bashOptions',\n  environment: {\n    buildImage: buildImage,\n    certificate: {\n      bucket: bucket,\n      objectKey: 'objectKey',\n    },\n    computeType: codebuild.ComputeType.SMALL,\n    environmentVariables: {\n      environmentVariablesKey: {\n        value: value,\n\n        // the properties below are optional\n        type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      },\n    },\n    privileged: false,\n  },\n  environmentVariables: {\n    environmentVariablesKey: {\n      value: value,\n\n      // the properties below are optional\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n    },\n  },\n  rolePolicyStatements: [policyStatement],\n  runOrder: 123,\n  securityGroups: [securityGroup],\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  useOutputs: {\n    useOutputsKey: stackOutput,\n  },\n  vpc: vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.ShellScriptAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildEnvironmentCertificate",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType#PLAINTEXT",
        "@aws-cdk/aws-codebuild.ComputeType",
        "@aws-cdk/aws-codebuild.ComputeType#SMALL",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/pipelines.ShellScriptAction",
        "@aws-cdk/pipelines.ShellScriptActionProps",
        "@aws-cdk/pipelines.StackOutput"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const bucket: s3.Bucket;\ndeclare const buildImage: codebuild.IBuildImage;\ndeclare const policyStatement: iam.PolicyStatement;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const stackOutput: pipelines.StackOutput;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const value: any;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst shellScriptAction = new pipelines.ShellScriptAction({\n  actionName: 'actionName',\n  commands: ['commands'],\n\n  // the properties below are optional\n  additionalArtifacts: [artifact],\n  bashOptions: 'bashOptions',\n  environment: {\n    buildImage: buildImage,\n    certificate: {\n      bucket: bucket,\n      objectKey: 'objectKey',\n    },\n    computeType: codebuild.ComputeType.SMALL,\n    environmentVariables: {\n      environmentVariablesKey: {\n        value: value,\n\n        // the properties below are optional\n        type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      },\n    },\n    privileged: false,\n  },\n  environmentVariables: {\n    environmentVariablesKey: {\n      value: value,\n\n      // the properties below are optional\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n    },\n  },\n  rolePolicyStatements: [policyStatement],\n  runOrder: 123,\n  securityGroups: [securityGroup],\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  useOutputs: {\n    useOutputsKey: stackOutput,\n  },\n  vpc: vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 13,
        "75": 93,
        "91": 2,
        "125": 1,
        "130": 10,
        "153": 9,
        "169": 9,
        "192": 7,
        "193": 9,
        "194": 9,
        "197": 1,
        "225": 11,
        "242": 11,
        "243": 11,
        "254": 6,
        "255": 6,
        "256": 6,
        "281": 33,
        "290": 1
      },
      "fqnsFingerprint": "e29b0d3343a803ae8f052531fd9c5240f3f1d4203e3523478bc888f73d8d450f"
    },
    "51c5d0ef295427cd67bb28c5839789bf798a3afbe96e802dccc032ccc27034ad": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_s3 as s3\nimport aws_cdk.pipelines as pipelines\n\n# artifact: codepipeline.Artifact\n# bucket: s3.Bucket\n# build_image: codebuild.IBuildImage\n# policy_statement: iam.PolicyStatement\n# security_group: ec2.SecurityGroup\n# stack_output: pipelines.StackOutput\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# value: Any\n# vpc: ec2.Vpc\n\nshell_script_action_props = pipelines.ShellScriptActionProps(\n    action_name=\"actionName\",\n    commands=[\"commands\"],\n\n    # the properties below are optional\n    additional_artifacts=[artifact],\n    bash_options=\"bashOptions\",\n    environment=codebuild.BuildEnvironment(\n        build_image=build_image,\n        certificate=codebuild.BuildEnvironmentCertificate(\n            bucket=bucket,\n            object_key=\"objectKey\"\n        ),\n        compute_type=codebuild.ComputeType.SMALL,\n        environment_variables={\n            \"environment_variables_key\": codebuild.BuildEnvironmentVariable(\n                value=value,\n\n                # the properties below are optional\n                type=codebuild.BuildEnvironmentVariableType.PLAINTEXT\n            )\n        },\n        privileged=False\n    ),\n    environment_variables={\n        \"environment_variables_key\": codebuild.BuildEnvironmentVariable(\n            value=value,\n\n            # the properties below are optional\n            type=codebuild.BuildEnvironmentVariableType.PLAINTEXT\n        )\n    },\n    role_policy_statements=[policy_statement],\n    run_order=123,\n    security_groups=[security_group],\n    subnet_selection=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    ),\n    use_outputs={\n        \"use_outputs_key\": stack_output\n    },\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.S3;\nusing Amazon.CDK.Pipelines;\n\nArtifact artifact;\nBucket bucket;\nIBuildImage buildImage;\nPolicyStatement policyStatement;\nSecurityGroup securityGroup;\nStackOutput stackOutput;\nSubnet subnet;\nSubnetFilter subnetFilter;\nvar value;\nVpc vpc;\n\nShellScriptActionProps shellScriptActionProps = new ShellScriptActionProps {\n    ActionName = \"actionName\",\n    Commands = new [] { \"commands\" },\n\n    // the properties below are optional\n    AdditionalArtifacts = new [] { artifact },\n    BashOptions = \"bashOptions\",\n    Environment = new BuildEnvironment {\n        BuildImage = buildImage,\n        Certificate = new BuildEnvironmentCertificate {\n            Bucket = bucket,\n            ObjectKey = \"objectKey\"\n        },\n        ComputeType = ComputeType.SMALL,\n        EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n            { \"environmentVariablesKey\", new BuildEnvironmentVariable {\n                Value = value,\n\n                // the properties below are optional\n                Type = BuildEnvironmentVariableType.PLAINTEXT\n            } }\n        },\n        Privileged = false\n    },\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"environmentVariablesKey\", new BuildEnvironmentVariable {\n            Value = value,\n\n            // the properties below are optional\n            Type = BuildEnvironmentVariableType.PLAINTEXT\n        } }\n    },\n    RolePolicyStatements = new [] { policyStatement },\n    RunOrder = 123,\n    SecurityGroups = new [] { securityGroup },\n    SubnetSelection = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    },\n    UseOutputs = new Dictionary<string, StackOutput> {\n        { \"useOutputsKey\", stackOutput }\n    },\n    Vpc = vpc\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.s3.*;\nimport software.amazon.awscdk.pipelines.*;\n\nArtifact artifact;\nBucket bucket;\nIBuildImage buildImage;\nPolicyStatement policyStatement;\nSecurityGroup securityGroup;\nStackOutput stackOutput;\nSubnet subnet;\nSubnetFilter subnetFilter;\nObject value;\nVpc vpc;\n\nShellScriptActionProps shellScriptActionProps = ShellScriptActionProps.builder()\n        .actionName(\"actionName\")\n        .commands(List.of(\"commands\"))\n\n        // the properties below are optional\n        .additionalArtifacts(List.of(artifact))\n        .bashOptions(\"bashOptions\")\n        .environment(BuildEnvironment.builder()\n                .buildImage(buildImage)\n                .certificate(BuildEnvironmentCertificate.builder()\n                        .bucket(bucket)\n                        .objectKey(\"objectKey\")\n                        .build())\n                .computeType(ComputeType.SMALL)\n                .environmentVariables(Map.of(\n                        \"environmentVariablesKey\", BuildEnvironmentVariable.builder()\n                                .value(value)\n\n                                // the properties below are optional\n                                .type(BuildEnvironmentVariableType.PLAINTEXT)\n                                .build()))\n                .privileged(false)\n                .build())\n        .environmentVariables(Map.of(\n                \"environmentVariablesKey\", BuildEnvironmentVariable.builder()\n                        .value(value)\n\n                        // the properties below are optional\n                        .type(BuildEnvironmentVariableType.PLAINTEXT)\n                        .build()))\n        .rolePolicyStatements(List.of(policyStatement))\n        .runOrder(123)\n        .securityGroups(List.of(securityGroup))\n        .subnetSelection(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .useOutputs(Map.of(\n                \"useOutputsKey\", stackOutput))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const bucket: s3.Bucket;\ndeclare const buildImage: codebuild.IBuildImage;\ndeclare const policyStatement: iam.PolicyStatement;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const stackOutput: pipelines.StackOutput;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const value: any;\ndeclare const vpc: ec2.Vpc;\nconst shellScriptActionProps: pipelines.ShellScriptActionProps = {\n  actionName: 'actionName',\n  commands: ['commands'],\n\n  // the properties below are optional\n  additionalArtifacts: [artifact],\n  bashOptions: 'bashOptions',\n  environment: {\n    buildImage: buildImage,\n    certificate: {\n      bucket: bucket,\n      objectKey: 'objectKey',\n    },\n    computeType: codebuild.ComputeType.SMALL,\n    environmentVariables: {\n      environmentVariablesKey: {\n        value: value,\n\n        // the properties below are optional\n        type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      },\n    },\n    privileged: false,\n  },\n  environmentVariables: {\n    environmentVariablesKey: {\n      value: value,\n\n      // the properties below are optional\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n    },\n  },\n  rolePolicyStatements: [policyStatement],\n  runOrder: 123,\n  securityGroups: [securityGroup],\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  useOutputs: {\n    useOutputsKey: stackOutput,\n  },\n  vpc: vpc,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.ShellScriptActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildEnvironmentCertificate",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType#PLAINTEXT",
        "@aws-cdk/aws-codebuild.ComputeType",
        "@aws-cdk/aws-codebuild.ComputeType#SMALL",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/pipelines.ShellScriptActionProps",
        "@aws-cdk/pipelines.StackOutput"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const bucket: s3.Bucket;\ndeclare const buildImage: codebuild.IBuildImage;\ndeclare const policyStatement: iam.PolicyStatement;\ndeclare const securityGroup: ec2.SecurityGroup;\ndeclare const stackOutput: pipelines.StackOutput;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const value: any;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst shellScriptActionProps: pipelines.ShellScriptActionProps = {\n  actionName: 'actionName',\n  commands: ['commands'],\n\n  // the properties below are optional\n  additionalArtifacts: [artifact],\n  bashOptions: 'bashOptions',\n  environment: {\n    buildImage: buildImage,\n    certificate: {\n      bucket: bucket,\n      objectKey: 'objectKey',\n    },\n    computeType: codebuild.ComputeType.SMALL,\n    environmentVariables: {\n      environmentVariablesKey: {\n        value: value,\n\n        // the properties below are optional\n        type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      },\n    },\n    privileged: false,\n  },\n  environmentVariables: {\n    environmentVariablesKey: {\n      value: value,\n\n      // the properties below are optional\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n    },\n  },\n  rolePolicyStatements: [policyStatement],\n  runOrder: 123,\n  securityGroups: [securityGroup],\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  useOutputs: {\n    useOutputsKey: stackOutput,\n  },\n  vpc: vpc,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 13,
        "75": 93,
        "91": 2,
        "125": 1,
        "130": 10,
        "153": 10,
        "169": 10,
        "192": 7,
        "193": 9,
        "194": 8,
        "225": 11,
        "242": 11,
        "243": 11,
        "254": 6,
        "255": 6,
        "256": 6,
        "281": 33,
        "290": 1
      },
      "fqnsFingerprint": "bd0b870ffc76936f2c989f340138f266b9bb27fb2419fef2e164fab5becf001d"
    },
    "b070501b77e33c2a8018577816f65d3e54aaba4d39936cebcaa2bbeee935d044": {
      "translations": {
        "python": {
          "source": "# Modern API\nmodern_pipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    self_mutation=False,\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"\n        ]\n    )\n)\n\n# Original API\ncloud_assembly_artifact = codepipeline.Artifact()\noriginal_pipeline = pipelines.CdkPipeline(self, \"Pipeline\",\n    self_mutating=False,\n    cloud_assembly_artifact=cloud_assembly_artifact\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Modern API\nCodePipeline modernPipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    SelfMutation = false,\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    })\n});\n\n// Original API\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline originalPipeline = new CdkPipeline(this, \"Pipeline\", new CdkPipelineProps {\n    SelfMutating = false,\n    CloudAssemblyArtifact = cloudAssemblyArtifact\n});",
          "version": "1"
        },
        "java": {
          "source": "// Modern API\nCodePipeline modernPipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .selfMutation(false)\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n        .build();\n\n// Original API\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline originalPipeline = CdkPipeline.Builder.create(this, \"Pipeline\")\n        .selfMutating(false)\n        .cloudAssemblyArtifact(cloudAssemblyArtifact)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Modern API\nconst modernPipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  selfMutation: false,\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n});\n\n// Original API\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst originalPipeline = new pipelines.CdkPipeline(this, 'Pipeline', {\n  selfMutating: false,\n  cloudAssemblyArtifact,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.ShellStep"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/pipelines.CdkPipeline",
        "@aws-cdk/pipelines.CdkPipelineProps",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Modern API\nconst modernPipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  selfMutation: false,\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n});\n\n// Original API\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst originalPipeline = new pipelines.CdkPipeline(this, 'Pipeline', {\n  selfMutating: false,\n  cloudAssemblyArtifact,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 21,
        "91": 2,
        "104": 2,
        "192": 1,
        "193": 4,
        "194": 6,
        "196": 1,
        "197": 4,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1
      },
      "fqnsFingerprint": "d79775655e9f08c85c665dd41801cd3c7a6d004232138cff23b8cca2cdff93f1"
    },
    "249b83d61125383a6690ebf2781e29bc1fbcb0ff6bfa8b5b762fd2d3ea2f5d7c": {
      "translations": {
        "python": {
          "source": "# Modern API\nmodern_pipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    self_mutation=False,\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"\n        ]\n    )\n)\n\n# Original API\ncloud_assembly_artifact = codepipeline.Artifact()\noriginal_pipeline = pipelines.CdkPipeline(self, \"Pipeline\",\n    self_mutating=False,\n    cloud_assembly_artifact=cloud_assembly_artifact\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// Modern API\nCodePipeline modernPipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    SelfMutation = false,\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    })\n});\n\n// Original API\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline originalPipeline = new CdkPipeline(this, \"Pipeline\", new CdkPipelineProps {\n    SelfMutating = false,\n    CloudAssemblyArtifact = cloudAssemblyArtifact\n});",
          "version": "1"
        },
        "java": {
          "source": "// Modern API\nCodePipeline modernPipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .selfMutation(false)\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n        .build();\n\n// Original API\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline originalPipeline = CdkPipeline.Builder.create(this, \"Pipeline\")\n        .selfMutating(false)\n        .cloudAssemblyArtifact(cloudAssemblyArtifact)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// Modern API\nconst modernPipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  selfMutation: false,\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n});\n\n// Original API\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst originalPipeline = new pipelines.CdkPipeline(this, 'Pipeline', {\n  selfMutating: false,\n  cloudAssemblyArtifact,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.ShellStepProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/pipelines.CdkPipeline",
        "@aws-cdk/pipelines.CdkPipelineProps",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Modern API\nconst modernPipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  selfMutation: false,\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: [\n      'npm ci',\n      'npm run build',\n      'npx cdk synth',\n    ],\n  }),\n});\n\n// Original API\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst originalPipeline = new pipelines.CdkPipeline(this, 'Pipeline', {\n  selfMutating: false,\n  cloudAssemblyArtifact,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 21,
        "91": 2,
        "104": 2,
        "192": 1,
        "193": 4,
        "194": 6,
        "196": 1,
        "197": 4,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 6,
        "282": 1
      },
      "fqnsFingerprint": "d79775655e9f08c85c665dd41801cd3c7a6d004232138cff23b8cca2cdff93f1"
    },
    "e89f45cbfbdf574948e6ad3447f67ea198de10c014f6eab2d8d9336c5ffd4ba6": {
      "translations": {
        "python": {
          "source": "script = pipelines.ShellStep(\"MainScript\",\n    commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"],\n    input=pipelines.CodePipelineSource.git_hub(\"org/source1\", \"main\"),\n    additional_inputs={\n        \"../siblingdir\": pipelines.CodePipelineSource.git_hub(\"org/source2\", \"main\")\n    }\n)",
          "version": "2"
        },
        "csharp": {
          "source": "ShellStep script = new ShellStep(\"MainScript\", new ShellStepProps {\n    Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" },\n    Input = CodePipelineSource.GitHub(\"org/source1\", \"main\"),\n    AdditionalInputs = new Dictionary<string, IFileSetProducer> {\n        { \"../siblingdir\", CodePipelineSource.GitHub(\"org/source2\", \"main\") }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "ShellStep script = ShellStep.Builder.create(\"MainScript\")\n        .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n        .input(CodePipelineSource.gitHub(\"org/source1\", \"main\"))\n        .additionalInputs(Map.of(\n                \"../siblingdir\", CodePipelineSource.gitHub(\"org/source2\", \"main\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const script = new pipelines.ShellStep('MainScript', {\n   commands: ['npm ci','npm run build','npx cdk synth'],\n   input: pipelines.CodePipelineSource.gitHub('org/source1', 'main'),\n   additionalInputs: {\n     '../siblingdir': pipelines.CodePipelineSource.gitHub('org/source2', 'main'),\n   }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "member",
          "fqn": "@aws-cdk/pipelines.ShellStepProps",
          "memberName": "additionalInputs"
        },
        "field": {
          "field": "markdown",
          "line": 9
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#gitHub",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst script = new pipelines.ShellStep('MainScript', {\n   commands: ['npm ci','npm run build','npx cdk synth'],\n   input: pipelines.CodePipelineSource.gitHub('org/source1', 'main'),\n   additionalInputs: {\n     '../siblingdir': pipelines.CodePipelineSource.gitHub('org/source2', 'main'),\n   }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 12,
        "192": 1,
        "193": 2,
        "194": 5,
        "196": 2,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "e2ad0a99d8c50b42b8531e39b1a36b919f595d1c3180949c031ee41b18776ab8"
    },
    "5e65e5ed7c49d2bb097a0701694e6eef7c78f6057eb3044743ae19ca4e031c07": {
      "translations": {
        "python": {
          "source": "source_artifact = codepipeline.Artifact()\ncloud_assembly_artifact = codepipeline.Artifact()\npipeline = pipelines.CdkPipeline(self, \"MyPipeline\",\n    cloud_assembly_artifact=cloud_assembly_artifact,\n    synth_action=pipelines.SimpleSynthAction.standard_npm_synth(\n        source_artifact=source_artifact,\n        cloud_assembly_artifact=cloud_assembly_artifact,\n        environment=codebuild.BuildEnvironment(\n            privileged=True\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Artifact sourceArtifact = new Artifact();\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline pipeline = new CdkPipeline(this, \"MyPipeline\", new CdkPipelineProps {\n    CloudAssemblyArtifact = cloudAssemblyArtifact,\n    SynthAction = SimpleSynthAction.StandardNpmSynth(new StandardNpmSynthOptions {\n        SourceArtifact = sourceArtifact,\n        CloudAssemblyArtifact = cloudAssemblyArtifact,\n        Environment = new BuildEnvironment {\n            Privileged = true\n        }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Artifact sourceArtifact = new Artifact();\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline pipeline = CdkPipeline.Builder.create(this, \"MyPipeline\")\n        .cloudAssemblyArtifact(cloudAssemblyArtifact)\n        .synthAction(SimpleSynthAction.standardNpmSynth(StandardNpmSynthOptions.builder()\n                .sourceArtifact(sourceArtifact)\n                .cloudAssemblyArtifact(cloudAssemblyArtifact)\n                .environment(BuildEnvironment.builder()\n                        .privileged(true)\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const sourceArtifact = new codepipeline.Artifact();\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst pipeline = new pipelines.CdkPipeline(this, 'MyPipeline', {\n  cloudAssemblyArtifact,\n  synthAction: pipelines.SimpleSynthAction.standardNpmSynth({\n    sourceArtifact,\n    cloudAssemblyArtifact,\n    environment: {\n      privileged: true,\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.SimpleSynthAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/pipelines.CdkPipeline",
        "@aws-cdk/pipelines.CdkPipelineProps",
        "@aws-cdk/pipelines.SimpleSynthAction",
        "@aws-cdk/pipelines.SimpleSynthAction#standardNpmSynth",
        "@aws-cdk/pipelines.StandardNpmSynthOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sourceArtifact = new codepipeline.Artifact();\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst pipeline = new pipelines.CdkPipeline(this, 'MyPipeline', {\n  cloudAssemblyArtifact,\n  synthAction: pipelines.SimpleSynthAction.standardNpmSynth({\n    sourceArtifact,\n    cloudAssemblyArtifact,\n    environment: {\n      privileged: true,\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 18,
        "104": 1,
        "106": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 3
      },
      "fqnsFingerprint": "f779872a9951899b78e52783e7b095599960f7d86b86e9c2d5fba9ca8c5ca348"
    },
    "53e89f0c349979cb025ffe9f3376f6b5c407b98e863a348b1a3bebee6d9c55d3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_s3 as s3\nimport aws_cdk.pipelines as pipelines\n\n# artifact: codepipeline.Artifact\n# bucket: s3.Bucket\n# build_image: codebuild.IBuildImage\n# build_spec: codebuild.BuildSpec\n# policy_statement: iam.PolicyStatement\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# value: Any\n# vpc: ec2.Vpc\n\nsimple_synth_action_props = pipelines.SimpleSynthActionProps(\n    cloud_assembly_artifact=artifact,\n    source_artifact=artifact,\n    synth_command=\"synthCommand\",\n\n    # the properties below are optional\n    action_name=\"actionName\",\n    additional_artifacts=[pipelines.AdditionalArtifact(\n        artifact=artifact,\n        directory=\"directory\"\n    )],\n    build_command=\"buildCommand\",\n    build_commands=[\"buildCommands\"],\n    build_spec=build_spec,\n    copy_environment_variables=[\"copyEnvironmentVariables\"],\n    environment=codebuild.BuildEnvironment(\n        build_image=build_image,\n        certificate=codebuild.BuildEnvironmentCertificate(\n            bucket=bucket,\n            object_key=\"objectKey\"\n        ),\n        compute_type=codebuild.ComputeType.SMALL,\n        environment_variables={\n            \"environment_variables_key\": codebuild.BuildEnvironmentVariable(\n                value=value,\n\n                # the properties below are optional\n                type=codebuild.BuildEnvironmentVariableType.PLAINTEXT\n            )\n        },\n        privileged=False\n    ),\n    environment_variables={\n        \"environment_variables_key\": codebuild.BuildEnvironmentVariable(\n            value=value,\n\n            # the properties below are optional\n            type=codebuild.BuildEnvironmentVariableType.PLAINTEXT\n        )\n    },\n    install_command=\"installCommand\",\n    install_commands=[\"installCommands\"],\n    project_name=\"projectName\",\n    role_policy_statements=[policy_statement],\n    subdirectory=\"subdirectory\",\n    subnet_selection=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    ),\n    test_commands=[\"testCommands\"],\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.S3;\nusing Amazon.CDK.Pipelines;\n\nArtifact artifact;\nBucket bucket;\nIBuildImage buildImage;\nBuildSpec buildSpec;\nPolicyStatement policyStatement;\nSubnet subnet;\nSubnetFilter subnetFilter;\nvar value;\nVpc vpc;\n\nSimpleSynthActionProps simpleSynthActionProps = new SimpleSynthActionProps {\n    CloudAssemblyArtifact = artifact,\n    SourceArtifact = artifact,\n    SynthCommand = \"synthCommand\",\n\n    // the properties below are optional\n    ActionName = \"actionName\",\n    AdditionalArtifacts = new [] { new AdditionalArtifact {\n        Artifact = artifact,\n        Directory = \"directory\"\n    } },\n    BuildCommand = \"buildCommand\",\n    BuildCommands = new [] { \"buildCommands\" },\n    BuildSpec = buildSpec,\n    CopyEnvironmentVariables = new [] { \"copyEnvironmentVariables\" },\n    Environment = new BuildEnvironment {\n        BuildImage = buildImage,\n        Certificate = new BuildEnvironmentCertificate {\n            Bucket = bucket,\n            ObjectKey = \"objectKey\"\n        },\n        ComputeType = ComputeType.SMALL,\n        EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n            { \"environmentVariablesKey\", new BuildEnvironmentVariable {\n                Value = value,\n\n                // the properties below are optional\n                Type = BuildEnvironmentVariableType.PLAINTEXT\n            } }\n        },\n        Privileged = false\n    },\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"environmentVariablesKey\", new BuildEnvironmentVariable {\n            Value = value,\n\n            // the properties below are optional\n            Type = BuildEnvironmentVariableType.PLAINTEXT\n        } }\n    },\n    InstallCommand = \"installCommand\",\n    InstallCommands = new [] { \"installCommands\" },\n    ProjectName = \"projectName\",\n    RolePolicyStatements = new [] { policyStatement },\n    Subdirectory = \"subdirectory\",\n    SubnetSelection = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    },\n    TestCommands = new [] { \"testCommands\" },\n    Vpc = vpc\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.s3.*;\nimport software.amazon.awscdk.pipelines.*;\n\nArtifact artifact;\nBucket bucket;\nIBuildImage buildImage;\nBuildSpec buildSpec;\nPolicyStatement policyStatement;\nSubnet subnet;\nSubnetFilter subnetFilter;\nObject value;\nVpc vpc;\n\nSimpleSynthActionProps simpleSynthActionProps = SimpleSynthActionProps.builder()\n        .cloudAssemblyArtifact(artifact)\n        .sourceArtifact(artifact)\n        .synthCommand(\"synthCommand\")\n\n        // the properties below are optional\n        .actionName(\"actionName\")\n        .additionalArtifacts(List.of(AdditionalArtifact.builder()\n                .artifact(artifact)\n                .directory(\"directory\")\n                .build()))\n        .buildCommand(\"buildCommand\")\n        .buildCommands(List.of(\"buildCommands\"))\n        .buildSpec(buildSpec)\n        .copyEnvironmentVariables(List.of(\"copyEnvironmentVariables\"))\n        .environment(BuildEnvironment.builder()\n                .buildImage(buildImage)\n                .certificate(BuildEnvironmentCertificate.builder()\n                        .bucket(bucket)\n                        .objectKey(\"objectKey\")\n                        .build())\n                .computeType(ComputeType.SMALL)\n                .environmentVariables(Map.of(\n                        \"environmentVariablesKey\", BuildEnvironmentVariable.builder()\n                                .value(value)\n\n                                // the properties below are optional\n                                .type(BuildEnvironmentVariableType.PLAINTEXT)\n                                .build()))\n                .privileged(false)\n                .build())\n        .environmentVariables(Map.of(\n                \"environmentVariablesKey\", BuildEnvironmentVariable.builder()\n                        .value(value)\n\n                        // the properties below are optional\n                        .type(BuildEnvironmentVariableType.PLAINTEXT)\n                        .build()))\n        .installCommand(\"installCommand\")\n        .installCommands(List.of(\"installCommands\"))\n        .projectName(\"projectName\")\n        .rolePolicyStatements(List.of(policyStatement))\n        .subdirectory(\"subdirectory\")\n        .subnetSelection(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .testCommands(List.of(\"testCommands\"))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const bucket: s3.Bucket;\ndeclare const buildImage: codebuild.IBuildImage;\ndeclare const buildSpec: codebuild.BuildSpec;\ndeclare const policyStatement: iam.PolicyStatement;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const value: any;\ndeclare const vpc: ec2.Vpc;\nconst simpleSynthActionProps: pipelines.SimpleSynthActionProps = {\n  cloudAssemblyArtifact: artifact,\n  sourceArtifact: artifact,\n  synthCommand: 'synthCommand',\n\n  // the properties below are optional\n  actionName: 'actionName',\n  additionalArtifacts: [{\n    artifact: artifact,\n    directory: 'directory',\n  }],\n  buildCommand: 'buildCommand',\n  buildCommands: ['buildCommands'],\n  buildSpec: buildSpec,\n  copyEnvironmentVariables: ['copyEnvironmentVariables'],\n  environment: {\n    buildImage: buildImage,\n    certificate: {\n      bucket: bucket,\n      objectKey: 'objectKey',\n    },\n    computeType: codebuild.ComputeType.SMALL,\n    environmentVariables: {\n      environmentVariablesKey: {\n        value: value,\n\n        // the properties below are optional\n        type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      },\n    },\n    privileged: false,\n  },\n  environmentVariables: {\n    environmentVariablesKey: {\n      value: value,\n\n      // the properties below are optional\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n    },\n  },\n  installCommand: 'installCommand',\n  installCommands: ['installCommands'],\n  projectName: 'projectName',\n  rolePolicyStatements: [policyStatement],\n  subdirectory: 'subdirectory',\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  testCommands: ['testCommands'],\n  vpc: vpc,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.SimpleSynthActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildEnvironmentCertificate",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType#PLAINTEXT",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.ComputeType",
        "@aws-cdk/aws-codebuild.ComputeType#SMALL",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/pipelines.SimpleSynthActionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const bucket: s3.Bucket;\ndeclare const buildImage: codebuild.IBuildImage;\ndeclare const buildSpec: codebuild.BuildSpec;\ndeclare const policyStatement: iam.PolicyStatement;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const value: any;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst simpleSynthActionProps: pipelines.SimpleSynthActionProps = {\n  cloudAssemblyArtifact: artifact,\n  sourceArtifact: artifact,\n  synthCommand: 'synthCommand',\n\n  // the properties below are optional\n  actionName: 'actionName',\n  additionalArtifacts: [{\n    artifact: artifact,\n    directory: 'directory',\n  }],\n  buildCommand: 'buildCommand',\n  buildCommands: ['buildCommands'],\n  buildSpec: buildSpec,\n  copyEnvironmentVariables: ['copyEnvironmentVariables'],\n  environment: {\n    buildImage: buildImage,\n    certificate: {\n      bucket: bucket,\n      objectKey: 'objectKey',\n    },\n    computeType: codebuild.ComputeType.SMALL,\n    environmentVariables: {\n      environmentVariablesKey: {\n        value: value,\n\n        // the properties below are optional\n        type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      },\n    },\n    privileged: false,\n  },\n  environmentVariables: {\n    environmentVariablesKey: {\n      value: value,\n\n      // the properties below are optional\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n    },\n  },\n  installCommand: 'installCommand',\n  installCommands: ['installCommands'],\n  projectName: 'projectName',\n  rolePolicyStatements: [policyStatement],\n  subdirectory: 'subdirectory',\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  testCommands: ['testCommands'],\n  vpc: vpc,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 21,
        "75": 99,
        "91": 2,
        "125": 1,
        "130": 9,
        "153": 9,
        "169": 9,
        "192": 9,
        "193": 9,
        "194": 8,
        "225": 10,
        "242": 10,
        "243": 10,
        "254": 6,
        "255": 6,
        "256": 6,
        "281": 41,
        "290": 1
      },
      "fqnsFingerprint": "d44e5366f18f2df3a3ca52dbe17cfaed033965858202c9da7998f73e9ddbe019"
    },
    "63392734ad010b617fa4ca36622c0175f89f6d62c8682cd40b11468c161bd647": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_s3 as s3\nimport aws_cdk.pipelines as pipelines\n\n# artifact: codepipeline.Artifact\n# bucket: s3.Bucket\n# build_image: codebuild.IBuildImage\n# build_spec: codebuild.BuildSpec\n# policy_statement: iam.PolicyStatement\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# value: Any\n# vpc: ec2.Vpc\n\nsimple_synth_options = pipelines.SimpleSynthOptions(\n    cloud_assembly_artifact=artifact,\n    source_artifact=artifact,\n\n    # the properties below are optional\n    action_name=\"actionName\",\n    additional_artifacts=[pipelines.AdditionalArtifact(\n        artifact=artifact,\n        directory=\"directory\"\n    )],\n    build_spec=build_spec,\n    copy_environment_variables=[\"copyEnvironmentVariables\"],\n    environment=codebuild.BuildEnvironment(\n        build_image=build_image,\n        certificate=codebuild.BuildEnvironmentCertificate(\n            bucket=bucket,\n            object_key=\"objectKey\"\n        ),\n        compute_type=codebuild.ComputeType.SMALL,\n        environment_variables={\n            \"environment_variables_key\": codebuild.BuildEnvironmentVariable(\n                value=value,\n\n                # the properties below are optional\n                type=codebuild.BuildEnvironmentVariableType.PLAINTEXT\n            )\n        },\n        privileged=False\n    ),\n    environment_variables={\n        \"environment_variables_key\": codebuild.BuildEnvironmentVariable(\n            value=value,\n\n            # the properties below are optional\n            type=codebuild.BuildEnvironmentVariableType.PLAINTEXT\n        )\n    },\n    project_name=\"projectName\",\n    role_policy_statements=[policy_statement],\n    subdirectory=\"subdirectory\",\n    subnet_selection=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    ),\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.S3;\nusing Amazon.CDK.Pipelines;\n\nArtifact artifact;\nBucket bucket;\nIBuildImage buildImage;\nBuildSpec buildSpec;\nPolicyStatement policyStatement;\nSubnet subnet;\nSubnetFilter subnetFilter;\nvar value;\nVpc vpc;\n\nSimpleSynthOptions simpleSynthOptions = new SimpleSynthOptions {\n    CloudAssemblyArtifact = artifact,\n    SourceArtifact = artifact,\n\n    // the properties below are optional\n    ActionName = \"actionName\",\n    AdditionalArtifacts = new [] { new AdditionalArtifact {\n        Artifact = artifact,\n        Directory = \"directory\"\n    } },\n    BuildSpec = buildSpec,\n    CopyEnvironmentVariables = new [] { \"copyEnvironmentVariables\" },\n    Environment = new BuildEnvironment {\n        BuildImage = buildImage,\n        Certificate = new BuildEnvironmentCertificate {\n            Bucket = bucket,\n            ObjectKey = \"objectKey\"\n        },\n        ComputeType = ComputeType.SMALL,\n        EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n            { \"environmentVariablesKey\", new BuildEnvironmentVariable {\n                Value = value,\n\n                // the properties below are optional\n                Type = BuildEnvironmentVariableType.PLAINTEXT\n            } }\n        },\n        Privileged = false\n    },\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"environmentVariablesKey\", new BuildEnvironmentVariable {\n            Value = value,\n\n            // the properties below are optional\n            Type = BuildEnvironmentVariableType.PLAINTEXT\n        } }\n    },\n    ProjectName = \"projectName\",\n    RolePolicyStatements = new [] { policyStatement },\n    Subdirectory = \"subdirectory\",\n    SubnetSelection = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    },\n    Vpc = vpc\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.s3.*;\nimport software.amazon.awscdk.pipelines.*;\n\nArtifact artifact;\nBucket bucket;\nIBuildImage buildImage;\nBuildSpec buildSpec;\nPolicyStatement policyStatement;\nSubnet subnet;\nSubnetFilter subnetFilter;\nObject value;\nVpc vpc;\n\nSimpleSynthOptions simpleSynthOptions = SimpleSynthOptions.builder()\n        .cloudAssemblyArtifact(artifact)\n        .sourceArtifact(artifact)\n\n        // the properties below are optional\n        .actionName(\"actionName\")\n        .additionalArtifacts(List.of(AdditionalArtifact.builder()\n                .artifact(artifact)\n                .directory(\"directory\")\n                .build()))\n        .buildSpec(buildSpec)\n        .copyEnvironmentVariables(List.of(\"copyEnvironmentVariables\"))\n        .environment(BuildEnvironment.builder()\n                .buildImage(buildImage)\n                .certificate(BuildEnvironmentCertificate.builder()\n                        .bucket(bucket)\n                        .objectKey(\"objectKey\")\n                        .build())\n                .computeType(ComputeType.SMALL)\n                .environmentVariables(Map.of(\n                        \"environmentVariablesKey\", BuildEnvironmentVariable.builder()\n                                .value(value)\n\n                                // the properties below are optional\n                                .type(BuildEnvironmentVariableType.PLAINTEXT)\n                                .build()))\n                .privileged(false)\n                .build())\n        .environmentVariables(Map.of(\n                \"environmentVariablesKey\", BuildEnvironmentVariable.builder()\n                        .value(value)\n\n                        // the properties below are optional\n                        .type(BuildEnvironmentVariableType.PLAINTEXT)\n                        .build()))\n        .projectName(\"projectName\")\n        .rolePolicyStatements(List.of(policyStatement))\n        .subdirectory(\"subdirectory\")\n        .subnetSelection(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const bucket: s3.Bucket;\ndeclare const buildImage: codebuild.IBuildImage;\ndeclare const buildSpec: codebuild.BuildSpec;\ndeclare const policyStatement: iam.PolicyStatement;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const value: any;\ndeclare const vpc: ec2.Vpc;\nconst simpleSynthOptions: pipelines.SimpleSynthOptions = {\n  cloudAssemblyArtifact: artifact,\n  sourceArtifact: artifact,\n\n  // the properties below are optional\n  actionName: 'actionName',\n  additionalArtifacts: [{\n    artifact: artifact,\n    directory: 'directory',\n  }],\n  buildSpec: buildSpec,\n  copyEnvironmentVariables: ['copyEnvironmentVariables'],\n  environment: {\n    buildImage: buildImage,\n    certificate: {\n      bucket: bucket,\n      objectKey: 'objectKey',\n    },\n    computeType: codebuild.ComputeType.SMALL,\n    environmentVariables: {\n      environmentVariablesKey: {\n        value: value,\n\n        // the properties below are optional\n        type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      },\n    },\n    privileged: false,\n  },\n  environmentVariables: {\n    environmentVariablesKey: {\n      value: value,\n\n      // the properties below are optional\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n    },\n  },\n  projectName: 'projectName',\n  rolePolicyStatements: [policyStatement],\n  subdirectory: 'subdirectory',\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  vpc: vpc,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.SimpleSynthOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildEnvironmentCertificate",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType#PLAINTEXT",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.ComputeType",
        "@aws-cdk/aws-codebuild.ComputeType#SMALL",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/pipelines.SimpleSynthOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const bucket: s3.Bucket;\ndeclare const buildImage: codebuild.IBuildImage;\ndeclare const buildSpec: codebuild.BuildSpec;\ndeclare const policyStatement: iam.PolicyStatement;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const value: any;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst simpleSynthOptions: pipelines.SimpleSynthOptions = {\n  cloudAssemblyArtifact: artifact,\n  sourceArtifact: artifact,\n\n  // the properties below are optional\n  actionName: 'actionName',\n  additionalArtifacts: [{\n    artifact: artifact,\n    directory: 'directory',\n  }],\n  buildSpec: buildSpec,\n  copyEnvironmentVariables: ['copyEnvironmentVariables'],\n  environment: {\n    buildImage: buildImage,\n    certificate: {\n      bucket: bucket,\n      objectKey: 'objectKey',\n    },\n    computeType: codebuild.ComputeType.SMALL,\n    environmentVariables: {\n      environmentVariablesKey: {\n        value: value,\n\n        // the properties below are optional\n        type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      },\n    },\n    privileged: false,\n  },\n  environmentVariables: {\n    environmentVariablesKey: {\n      value: value,\n\n      // the properties below are optional\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n    },\n  },\n  projectName: 'projectName',\n  rolePolicyStatements: [policyStatement],\n  subdirectory: 'subdirectory',\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  vpc: vpc,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 15,
        "75": 93,
        "91": 2,
        "125": 1,
        "130": 9,
        "153": 9,
        "169": 9,
        "192": 6,
        "193": 9,
        "194": 8,
        "225": 10,
        "242": 10,
        "243": 10,
        "254": 6,
        "255": 6,
        "256": 6,
        "281": 35,
        "290": 1
      },
      "fqnsFingerprint": "cf374b418947108cf3d5bf80e6426c22b492fbfab9fc72a6e176e72a1493e0bb"
    },
    "45ebb002fed00b75cad9282a82243211b80649148ef705d93e23bce11036dbff": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.pipelines as pipelines\n\nstack_asset = pipelines.StackAsset(\n    asset_id=\"assetId\",\n    asset_manifest_path=\"assetManifestPath\",\n    asset_selector=\"assetSelector\",\n    asset_type=pipelines.AssetType.FILE,\n    is_template=False,\n\n    # the properties below are optional\n    asset_publishing_role_arn=\"assetPublishingRoleArn\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Pipelines;\n\nStackAsset stackAsset = new StackAsset {\n    AssetId = \"assetId\",\n    AssetManifestPath = \"assetManifestPath\",\n    AssetSelector = \"assetSelector\",\n    AssetType = AssetType.FILE,\n    IsTemplate = false,\n\n    // the properties below are optional\n    AssetPublishingRoleArn = \"assetPublishingRoleArn\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.pipelines.*;\n\nStackAsset stackAsset = StackAsset.builder()\n        .assetId(\"assetId\")\n        .assetManifestPath(\"assetManifestPath\")\n        .assetSelector(\"assetSelector\")\n        .assetType(AssetType.FILE)\n        .isTemplate(false)\n\n        // the properties below are optional\n        .assetPublishingRoleArn(\"assetPublishingRoleArn\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\nconst stackAsset: pipelines.StackAsset = {\n  assetId: 'assetId',\n  assetManifestPath: 'assetManifestPath',\n  assetSelector: 'assetSelector',\n  assetType: pipelines.AssetType.FILE,\n  isTemplate: false,\n\n  // the properties below are optional\n  assetPublishingRoleArn: 'assetPublishingRoleArn',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.StackAsset"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.AssetType",
        "@aws-cdk/pipelines.AssetType#FILE",
        "@aws-cdk/pipelines.StackAsset"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stackAsset: pipelines.StackAsset = {\n  assetId: 'assetId',\n  assetManifestPath: 'assetManifestPath',\n  assetSelector: 'assetSelector',\n  assetType: pipelines.AssetType.FILE,\n  isTemplate: false,\n\n  // the properties below are optional\n  assetPublishingRoleArn: 'assetPublishingRoleArn',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 13,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "678845d8050a0aa67e6cde400ec8c53f738f1050abee2092b01301fbd1248c9a"
    },
    "cd9eed90b88a24090538a2f95d3620410096b4bfbbc0298f0817eefe39185115": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.cx_api as cx_api\nimport aws_cdk.pipelines as pipelines\n\n# cloud_formation_stack_artifact: cx_api.CloudFormationStackArtifact\n\nstack_deployment = pipelines.StackDeployment.from_artifact(cloud_formation_stack_artifact)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.CXAPI;\nusing Amazon.CDK.Pipelines;\n\nCloudFormationStackArtifact cloudFormationStackArtifact;\n\nStackDeployment stackDeployment = StackDeployment.FromArtifact(cloudFormationStackArtifact);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.cxapi.*;\nimport software.amazon.awscdk.pipelines.*;\n\nCloudFormationStackArtifact cloudFormationStackArtifact;\n\nStackDeployment stackDeployment = StackDeployment.fromArtifact(cloudFormationStackArtifact);",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cx_api from '@aws-cdk/cx-api';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const cloudFormationStackArtifact: cx_api.CloudFormationStackArtifact;\nconst stackDeployment = pipelines.StackDeployment.fromArtifact(cloudFormationStackArtifact);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.StackDeployment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/cx-api.CloudFormationStackArtifact",
        "@aws-cdk/pipelines.StackDeployment",
        "@aws-cdk/pipelines.StackDeployment#fromArtifact"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cx_api from '@aws-cdk/cx-api';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const cloudFormationStackArtifact: cx_api.CloudFormationStackArtifact;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stackDeployment = pipelines.StackDeployment.fromArtifact(cloudFormationStackArtifact);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "290": 1
      },
      "fqnsFingerprint": "616739c6662978fded2bb004be12e269cfc87edece34be7206b68da34ceed8bc"
    },
    "e4f22f4c8aca077b424047f6d810224f18b9f68cb9c72497af57554b2ed7e650": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.pipelines as pipelines\n\nstack_deployment_props = pipelines.StackDeploymentProps(\n    absolute_template_path=\"absoluteTemplatePath\",\n    construct_path=\"constructPath\",\n    stack_artifact_id=\"stackArtifactId\",\n    stack_name=\"stackName\",\n\n    # the properties below are optional\n    account=\"account\",\n    assets=[pipelines.StackAsset(\n        asset_id=\"assetId\",\n        asset_manifest_path=\"assetManifestPath\",\n        asset_selector=\"assetSelector\",\n        asset_type=pipelines.AssetType.FILE,\n        is_template=False,\n\n        # the properties below are optional\n        asset_publishing_role_arn=\"assetPublishingRoleArn\"\n    )],\n    assume_role_arn=\"assumeRoleArn\",\n    execution_role_arn=\"executionRoleArn\",\n    region=\"region\",\n    tags={\n        \"tags_key\": \"tags\"\n    },\n    template_s3_uri=\"templateS3Uri\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Pipelines;\n\nStackDeploymentProps stackDeploymentProps = new StackDeploymentProps {\n    AbsoluteTemplatePath = \"absoluteTemplatePath\",\n    ConstructPath = \"constructPath\",\n    StackArtifactId = \"stackArtifactId\",\n    StackName = \"stackName\",\n\n    // the properties below are optional\n    Account = \"account\",\n    Assets = new [] { new StackAsset {\n        AssetId = \"assetId\",\n        AssetManifestPath = \"assetManifestPath\",\n        AssetSelector = \"assetSelector\",\n        AssetType = AssetType.FILE,\n        IsTemplate = false,\n\n        // the properties below are optional\n        AssetPublishingRoleArn = \"assetPublishingRoleArn\"\n    } },\n    AssumeRoleArn = \"assumeRoleArn\",\n    ExecutionRoleArn = \"executionRoleArn\",\n    Region = \"region\",\n    Tags = new Dictionary<string, string> {\n        { \"tagsKey\", \"tags\" }\n    },\n    TemplateS3Uri = \"templateS3Uri\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.pipelines.*;\n\nStackDeploymentProps stackDeploymentProps = StackDeploymentProps.builder()\n        .absoluteTemplatePath(\"absoluteTemplatePath\")\n        .constructPath(\"constructPath\")\n        .stackArtifactId(\"stackArtifactId\")\n        .stackName(\"stackName\")\n\n        // the properties below are optional\n        .account(\"account\")\n        .assets(List.of(StackAsset.builder()\n                .assetId(\"assetId\")\n                .assetManifestPath(\"assetManifestPath\")\n                .assetSelector(\"assetSelector\")\n                .assetType(AssetType.FILE)\n                .isTemplate(false)\n\n                // the properties below are optional\n                .assetPublishingRoleArn(\"assetPublishingRoleArn\")\n                .build()))\n        .assumeRoleArn(\"assumeRoleArn\")\n        .executionRoleArn(\"executionRoleArn\")\n        .region(\"region\")\n        .tags(Map.of(\n                \"tagsKey\", \"tags\"))\n        .templateS3Uri(\"templateS3Uri\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\nconst stackDeploymentProps: pipelines.StackDeploymentProps = {\n  absoluteTemplatePath: 'absoluteTemplatePath',\n  constructPath: 'constructPath',\n  stackArtifactId: 'stackArtifactId',\n  stackName: 'stackName',\n\n  // the properties below are optional\n  account: 'account',\n  assets: [{\n    assetId: 'assetId',\n    assetManifestPath: 'assetManifestPath',\n    assetSelector: 'assetSelector',\n    assetType: pipelines.AssetType.FILE,\n    isTemplate: false,\n\n    // the properties below are optional\n    assetPublishingRoleArn: 'assetPublishingRoleArn',\n  }],\n  assumeRoleArn: 'assumeRoleArn',\n  executionRoleArn: 'executionRoleArn',\n  region: 'region',\n  tags: {\n    tagsKey: 'tags',\n  },\n  templateS3Uri: 'templateS3Uri',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.StackDeploymentProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.AssetType",
        "@aws-cdk/pipelines.AssetType#FILE",
        "@aws-cdk/pipelines.StackDeploymentProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stackDeploymentProps: pipelines.StackDeploymentProps = {\n  absoluteTemplatePath: 'absoluteTemplatePath',\n  constructPath: 'constructPath',\n  stackArtifactId: 'stackArtifactId',\n  stackName: 'stackName',\n\n  // the properties below are optional\n  account: 'account',\n  assets: [{\n    assetId: 'assetId',\n    assetManifestPath: 'assetManifestPath',\n    assetSelector: 'assetSelector',\n    assetType: pipelines.AssetType.FILE,\n    isTemplate: false,\n\n    // the properties below are optional\n    assetPublishingRoleArn: 'assetPublishingRoleArn',\n  }],\n  assumeRoleArn: 'assumeRoleArn',\n  executionRoleArn: 'executionRoleArn',\n  region: 'region',\n  tags: {\n    tagsKey: 'tags',\n  },\n  templateS3Uri: 'templateS3Uri',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 15,
        "75": 25,
        "91": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "194": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 18,
        "290": 1
      },
      "fqnsFingerprint": "abefa633cedcb7d362d72590d50951883ae369db68a5b3416042964b9a36abae"
    },
    "5b0fa0c29720b2146b34fb26c013f59748887d7ba88ce3d6f2c006b5dfc8d8cc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.pipelines as pipelines\n\n# artifact_path: codepipeline.ArtifactPath\n\nstack_output = pipelines.StackOutput(artifact_path, \"outputName\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.Pipelines;\n\nArtifactPath artifactPath;\n\nStackOutput stackOutput = new StackOutput(artifactPath, \"outputName\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.pipelines.*;\n\nArtifactPath artifactPath;\n\nStackOutput stackOutput = new StackOutput(artifactPath, \"outputName\");",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifactPath: codepipeline.ArtifactPath;\nconst stackOutput = new pipelines.StackOutput(artifactPath, 'outputName');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.StackOutput"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codepipeline.ArtifactPath",
        "@aws-cdk/pipelines.StackOutput"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifactPath: codepipeline.ArtifactPath;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stackOutput = new pipelines.StackOutput(artifactPath, 'outputName');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "290": 1
      },
      "fqnsFingerprint": "482ccf45a2f5b9f17873ac94086fc852ae6c24813c426f8aa4bd60bfa2355077"
    },
    "f1974b902ba4a7453f8c15de43d0da531bfcac16836c49ef6d964a3f181463e4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\nimport aws_cdk.pipelines as pipelines\n\n# cfn_output: cdk.CfnOutput\n\nstack_output_reference = pipelines.StackOutputReference.from_cfn_output(cfn_output)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nusing Amazon.CDK.Pipelines;\n\nCfnOutput cfnOutput;\nStackOutputReference stackOutputReference = StackOutputReference.FromCfnOutput(cfnOutput);",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.pipelines.*;\n\nCfnOutput cfnOutput;\n\nStackOutputReference stackOutputReference = StackOutputReference.fromCfnOutput(cfnOutput);",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const cfnOutput: cdk.CfnOutput;\nconst stackOutputReference = pipelines.StackOutputReference.fromCfnOutput(cfnOutput);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.StackOutputReference"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/pipelines.StackOutputReference",
        "@aws-cdk/pipelines.StackOutputReference#fromCfnOutput"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const cfnOutput: cdk.CfnOutput;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stackOutputReference = pipelines.StackOutputReference.fromCfnOutput(cfnOutput);\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "290": 1
      },
      "fqnsFingerprint": "e0aa8f9304a27acc01042ad63c7a763087931349190fb4c2710647910d4e148b"
    },
    "9d450264ab8796d3961e167431df3f5d946968fcd06fcbda38e66c917fa1e6f3": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\nimport aws_cdk.pipelines as pipelines\n\n# stack: cdk.Stack\n# step: pipelines.Step\n\nstack_steps = pipelines.StackSteps(\n    stack=stack,\n\n    # the properties below are optional\n    change_set=[step],\n    post=[step],\n    pre=[step]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nusing Amazon.CDK.Pipelines;\n\nStack stack;\nStep step;\nStackSteps stackSteps = new StackSteps {\n    Stack = stack,\n\n    // the properties below are optional\n    ChangeSet = new [] { step },\n    Post = new [] { step },\n    Pre = new [] { step }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.pipelines.*;\n\nStack stack;\nStep step;\n\nStackSteps stackSteps = StackSteps.builder()\n        .stack(stack)\n\n        // the properties below are optional\n        .changeSet(List.of(step))\n        .post(List.of(step))\n        .pre(List.of(step))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const stack: cdk.Stack;\ndeclare const step: pipelines.Step;\nconst stackSteps: pipelines.StackSteps = {\n  stack: stack,\n\n  // the properties below are optional\n  changeSet: [step],\n  post: [step],\n  pre: [step],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.StackSteps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Stack",
        "@aws-cdk/pipelines.StackSteps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const stack: cdk.Stack;\ndeclare const step: pipelines.Step;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stackSteps: pipelines.StackSteps = {\n  stack: stack,\n\n  // the properties below are optional\n  changeSet: [step],\n  post: [step],\n  pre: [step],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 19,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "fa1ef4e71227b42089a20956dca29d562dfd3139b0363a1b7b3b3bcd0d5d1de8"
    },
    "47d11be230456bfbfbe1473d75a5cff63ef7b72ef5837c8cab38750cff2a7720": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\nimport aws_cdk.pipelines as pipelines\n\n# stack: cdk.Stack\n# stage: cdk.Stage\n# step: pipelines.Step\n\nstage_deployment = pipelines.StageDeployment.from_stage(stage,\n    post=[step],\n    pre=[step],\n    stack_steps=[pipelines.StackSteps(\n        stack=stack,\n\n        # the properties below are optional\n        change_set=[step],\n        post=[step],\n        pre=[step]\n    )],\n    stage_name=\"stageName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nusing Amazon.CDK.Pipelines;\n\nStack stack;\nStage stage;\nStep step;\nStageDeployment stageDeployment = StageDeployment.FromStage(stage, new StageDeploymentProps {\n    Post = new [] { step },\n    Pre = new [] { step },\n    StackSteps = new [] { new StackSteps {\n        Stack = stack,\n\n        // the properties below are optional\n        ChangeSet = new [] { step },\n        Post = new [] { step },\n        Pre = new [] { step }\n    } },\n    StageName = \"stageName\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.pipelines.*;\n\nStack stack;\nStage stage;\nStep step;\n\nStageDeployment stageDeployment = StageDeployment.fromStage(stage, StageDeploymentProps.builder()\n        .post(List.of(step))\n        .pre(List.of(step))\n        .stackSteps(List.of(StackSteps.builder()\n                .stack(stack)\n\n                // the properties below are optional\n                .changeSet(List.of(step))\n                .post(List.of(step))\n                .pre(List.of(step))\n                .build()))\n        .stageName(\"stageName\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const stack: cdk.Stack;\ndeclare const stage: cdk.Stage;\ndeclare const step: pipelines.Step;\nconst stageDeployment = pipelines.StageDeployment.fromStage(stage, /* all optional props */ {\n  post: [step],\n  pre: [step],\n  stackSteps: [{\n    stack: stack,\n\n    // the properties below are optional\n    changeSet: [step],\n    post: [step],\n    pre: [step],\n  }],\n  stageName: 'stageName',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.StageDeployment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage",
        "@aws-cdk/pipelines.StageDeployment",
        "@aws-cdk/pipelines.StageDeployment#fromStage",
        "@aws-cdk/pipelines.StageDeploymentProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const stack: cdk.Stack;\ndeclare const stage: cdk.Stage;\ndeclare const step: pipelines.Step;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stageDeployment = pipelines.StageDeployment.fromStage(stage, /* all optional props */ {\n  post: [step],\n  pre: [step],\n  stackSteps: [{\n    stack: stack,\n\n    // the properties below are optional\n    changeSet: [step],\n    post: [step],\n    pre: [step],\n  }],\n  stageName: 'stageName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 30,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 6,
        "193": 2,
        "194": 2,
        "196": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "1183af6dfc165bc26ffcc2eb86b1ca01bc9d0eb38f9aceaea7ff73a86423db82"
    },
    "d46ae652eaf91ff53e48993526ac794b6184ceeed7ed34d3b2dc6f9822dfb44d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.core as cdk\nimport aws_cdk.pipelines as pipelines\n\n# stack: cdk.Stack\n# step: pipelines.Step\n\nstage_deployment_props = pipelines.StageDeploymentProps(\n    post=[step],\n    pre=[step],\n    stack_steps=[pipelines.StackSteps(\n        stack=stack,\n\n        # the properties below are optional\n        change_set=[step],\n        post=[step],\n        pre=[step]\n    )],\n    stage_name=\"stageName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK;\nusing Amazon.CDK.Pipelines;\n\nStack stack;\nStep step;\nStageDeploymentProps stageDeploymentProps = new StageDeploymentProps {\n    Post = new [] { step },\n    Pre = new [] { step },\n    StackSteps = new [] { new StackSteps {\n        Stack = stack,\n\n        // the properties below are optional\n        ChangeSet = new [] { step },\n        Post = new [] { step },\n        Pre = new [] { step }\n    } },\n    StageName = \"stageName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.pipelines.*;\n\nStack stack;\nStep step;\n\nStageDeploymentProps stageDeploymentProps = StageDeploymentProps.builder()\n        .post(List.of(step))\n        .pre(List.of(step))\n        .stackSteps(List.of(StackSteps.builder()\n                .stack(stack)\n\n                // the properties below are optional\n                .changeSet(List.of(step))\n                .post(List.of(step))\n                .pre(List.of(step))\n                .build()))\n        .stageName(\"stageName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const stack: cdk.Stack;\ndeclare const step: pipelines.Step;\nconst stageDeploymentProps: pipelines.StageDeploymentProps = {\n  post: [step],\n  pre: [step],\n  stackSteps: [{\n    stack: stack,\n\n    // the properties below are optional\n    changeSet: [step],\n    post: [step],\n    pre: [step],\n  }],\n  stageName: 'stageName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.StageDeploymentProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Stack",
        "@aws-cdk/pipelines.StageDeploymentProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cdk from '@aws-cdk/core';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const stack: cdk.Stack;\ndeclare const step: pipelines.Step;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst stageDeploymentProps: pipelines.StageDeploymentProps = {\n  post: [step],\n  pre: [step],\n  stackSteps: [{\n    stack: stack,\n\n    // the properties below are optional\n    changeSet: [step],\n    post: [step],\n    pre: [step],\n  }],\n  stageName: 'stageName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 25,
        "130": 2,
        "153": 3,
        "169": 3,
        "192": 6,
        "193": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "5dff9da274e6ddcfc5bfe5cf5839a1bd9677a7a9ab20e930712e017476413550"
    },
    "cb05f6925bbdc2da661b56b26d97101ce22f8ed0d48435d0e92af2d30c6ae53a": {
      "translations": {
        "python": {
          "source": "source_artifact = codepipeline.Artifact()\ncloud_assembly_artifact = codepipeline.Artifact()\npipeline = pipelines.CdkPipeline(self, \"MyPipeline\",\n    cloud_assembly_artifact=cloud_assembly_artifact,\n    synth_action=pipelines.SimpleSynthAction.standard_npm_synth(\n        source_artifact=source_artifact,\n        cloud_assembly_artifact=cloud_assembly_artifact,\n        environment=codebuild.BuildEnvironment(\n            privileged=True\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Artifact sourceArtifact = new Artifact();\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline pipeline = new CdkPipeline(this, \"MyPipeline\", new CdkPipelineProps {\n    CloudAssemblyArtifact = cloudAssemblyArtifact,\n    SynthAction = SimpleSynthAction.StandardNpmSynth(new StandardNpmSynthOptions {\n        SourceArtifact = sourceArtifact,\n        CloudAssemblyArtifact = cloudAssemblyArtifact,\n        Environment = new BuildEnvironment {\n            Privileged = true\n        }\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "Artifact sourceArtifact = new Artifact();\nArtifact cloudAssemblyArtifact = new Artifact();\nCdkPipeline pipeline = CdkPipeline.Builder.create(this, \"MyPipeline\")\n        .cloudAssemblyArtifact(cloudAssemblyArtifact)\n        .synthAction(SimpleSynthAction.standardNpmSynth(StandardNpmSynthOptions.builder()\n                .sourceArtifact(sourceArtifact)\n                .cloudAssemblyArtifact(cloudAssemblyArtifact)\n                .environment(BuildEnvironment.builder()\n                        .privileged(true)\n                        .build())\n                .build()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const sourceArtifact = new codepipeline.Artifact();\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst pipeline = new pipelines.CdkPipeline(this, 'MyPipeline', {\n  cloudAssemblyArtifact,\n  synthAction: pipelines.SimpleSynthAction.standardNpmSynth({\n    sourceArtifact,\n    cloudAssemblyArtifact,\n    environment: {\n      privileged: true,\n    },\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.StandardNpmSynthOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-codepipeline.IAction",
        "@aws-cdk/pipelines.CdkPipeline",
        "@aws-cdk/pipelines.CdkPipelineProps",
        "@aws-cdk/pipelines.SimpleSynthAction",
        "@aws-cdk/pipelines.SimpleSynthAction#standardNpmSynth",
        "@aws-cdk/pipelines.StandardNpmSynthOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst sourceArtifact = new codepipeline.Artifact();\nconst cloudAssemblyArtifact = new codepipeline.Artifact();\nconst pipeline = new pipelines.CdkPipeline(this, 'MyPipeline', {\n  cloudAssemblyArtifact,\n  synthAction: pipelines.SimpleSynthAction.standardNpmSynth({\n    sourceArtifact,\n    cloudAssemblyArtifact,\n    environment: {\n      privileged: true,\n    },\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 18,
        "104": 1,
        "106": 1,
        "193": 3,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 3,
        "282": 3
      },
      "fqnsFingerprint": "f779872a9951899b78e52783e7b095599960f7d86b86e9c2d5fba9ca8c5ca348"
    },
    "5637a3b753bc3cc2213399e23a76d27af536e871332b3bf5d03ec28fec9091ba": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_iam as iam\nimport aws_cdk.aws_s3 as s3\nimport aws_cdk.pipelines as pipelines\n\n# artifact: codepipeline.Artifact\n# bucket: s3.Bucket\n# build_image: codebuild.IBuildImage\n# build_spec: codebuild.BuildSpec\n# policy_statement: iam.PolicyStatement\n# subnet: ec2.Subnet\n# subnet_filter: ec2.SubnetFilter\n# value: Any\n# vpc: ec2.Vpc\n\nstandard_yarn_synth_options = pipelines.StandardYarnSynthOptions(\n    cloud_assembly_artifact=artifact,\n    source_artifact=artifact,\n\n    # the properties below are optional\n    action_name=\"actionName\",\n    additional_artifacts=[pipelines.AdditionalArtifact(\n        artifact=artifact,\n        directory=\"directory\"\n    )],\n    build_command=\"buildCommand\",\n    build_spec=build_spec,\n    copy_environment_variables=[\"copyEnvironmentVariables\"],\n    environment=codebuild.BuildEnvironment(\n        build_image=build_image,\n        certificate=codebuild.BuildEnvironmentCertificate(\n            bucket=bucket,\n            object_key=\"objectKey\"\n        ),\n        compute_type=codebuild.ComputeType.SMALL,\n        environment_variables={\n            \"environment_variables_key\": codebuild.BuildEnvironmentVariable(\n                value=value,\n\n                # the properties below are optional\n                type=codebuild.BuildEnvironmentVariableType.PLAINTEXT\n            )\n        },\n        privileged=False\n    ),\n    environment_variables={\n        \"environment_variables_key\": codebuild.BuildEnvironmentVariable(\n            value=value,\n\n            # the properties below are optional\n            type=codebuild.BuildEnvironmentVariableType.PLAINTEXT\n        )\n    },\n    install_command=\"installCommand\",\n    project_name=\"projectName\",\n    role_policy_statements=[policy_statement],\n    subdirectory=\"subdirectory\",\n    subnet_selection=ec2.SubnetSelection(\n        availability_zones=[\"availabilityZones\"],\n        one_per_az=False,\n        subnet_filters=[subnet_filter],\n        subnet_group_name=\"subnetGroupName\",\n        subnet_name=\"subnetName\",\n        subnets=[subnet],\n        subnet_type=ec2.SubnetType.ISOLATED\n    ),\n    synth_command=\"synthCommand\",\n    test_commands=[\"testCommands\"],\n    vpc=vpc\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.IAM;\nusing Amazon.CDK.AWS.S3;\nusing Amazon.CDK.Pipelines;\n\nArtifact artifact;\nBucket bucket;\nIBuildImage buildImage;\nBuildSpec buildSpec;\nPolicyStatement policyStatement;\nSubnet subnet;\nSubnetFilter subnetFilter;\nvar value;\nVpc vpc;\n\nStandardYarnSynthOptions standardYarnSynthOptions = new StandardYarnSynthOptions {\n    CloudAssemblyArtifact = artifact,\n    SourceArtifact = artifact,\n\n    // the properties below are optional\n    ActionName = \"actionName\",\n    AdditionalArtifacts = new [] { new AdditionalArtifact {\n        Artifact = artifact,\n        Directory = \"directory\"\n    } },\n    BuildCommand = \"buildCommand\",\n    BuildSpec = buildSpec,\n    CopyEnvironmentVariables = new [] { \"copyEnvironmentVariables\" },\n    Environment = new BuildEnvironment {\n        BuildImage = buildImage,\n        Certificate = new BuildEnvironmentCertificate {\n            Bucket = bucket,\n            ObjectKey = \"objectKey\"\n        },\n        ComputeType = ComputeType.SMALL,\n        EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n            { \"environmentVariablesKey\", new BuildEnvironmentVariable {\n                Value = value,\n\n                // the properties below are optional\n                Type = BuildEnvironmentVariableType.PLAINTEXT\n            } }\n        },\n        Privileged = false\n    },\n    EnvironmentVariables = new Dictionary<string, BuildEnvironmentVariable> {\n        { \"environmentVariablesKey\", new BuildEnvironmentVariable {\n            Value = value,\n\n            // the properties below are optional\n            Type = BuildEnvironmentVariableType.PLAINTEXT\n        } }\n    },\n    InstallCommand = \"installCommand\",\n    ProjectName = \"projectName\",\n    RolePolicyStatements = new [] { policyStatement },\n    Subdirectory = \"subdirectory\",\n    SubnetSelection = new SubnetSelection {\n        AvailabilityZones = new [] { \"availabilityZones\" },\n        OnePerAz = false,\n        SubnetFilters = new [] { subnetFilter },\n        SubnetGroupName = \"subnetGroupName\",\n        SubnetName = \"subnetName\",\n        Subnets = new [] { subnet },\n        SubnetType = SubnetType.ISOLATED\n    },\n    SynthCommand = \"synthCommand\",\n    TestCommands = new [] { \"testCommands\" },\n    Vpc = vpc\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.iam.*;\nimport software.amazon.awscdk.services.s3.*;\nimport software.amazon.awscdk.pipelines.*;\n\nArtifact artifact;\nBucket bucket;\nIBuildImage buildImage;\nBuildSpec buildSpec;\nPolicyStatement policyStatement;\nSubnet subnet;\nSubnetFilter subnetFilter;\nObject value;\nVpc vpc;\n\nStandardYarnSynthOptions standardYarnSynthOptions = StandardYarnSynthOptions.builder()\n        .cloudAssemblyArtifact(artifact)\n        .sourceArtifact(artifact)\n\n        // the properties below are optional\n        .actionName(\"actionName\")\n        .additionalArtifacts(List.of(AdditionalArtifact.builder()\n                .artifact(artifact)\n                .directory(\"directory\")\n                .build()))\n        .buildCommand(\"buildCommand\")\n        .buildSpec(buildSpec)\n        .copyEnvironmentVariables(List.of(\"copyEnvironmentVariables\"))\n        .environment(BuildEnvironment.builder()\n                .buildImage(buildImage)\n                .certificate(BuildEnvironmentCertificate.builder()\n                        .bucket(bucket)\n                        .objectKey(\"objectKey\")\n                        .build())\n                .computeType(ComputeType.SMALL)\n                .environmentVariables(Map.of(\n                        \"environmentVariablesKey\", BuildEnvironmentVariable.builder()\n                                .value(value)\n\n                                // the properties below are optional\n                                .type(BuildEnvironmentVariableType.PLAINTEXT)\n                                .build()))\n                .privileged(false)\n                .build())\n        .environmentVariables(Map.of(\n                \"environmentVariablesKey\", BuildEnvironmentVariable.builder()\n                        .value(value)\n\n                        // the properties below are optional\n                        .type(BuildEnvironmentVariableType.PLAINTEXT)\n                        .build()))\n        .installCommand(\"installCommand\")\n        .projectName(\"projectName\")\n        .rolePolicyStatements(List.of(policyStatement))\n        .subdirectory(\"subdirectory\")\n        .subnetSelection(SubnetSelection.builder()\n                .availabilityZones(List.of(\"availabilityZones\"))\n                .onePerAz(false)\n                .subnetFilters(List.of(subnetFilter))\n                .subnetGroupName(\"subnetGroupName\")\n                .subnetName(\"subnetName\")\n                .subnets(List.of(subnet))\n                .subnetType(SubnetType.ISOLATED)\n                .build())\n        .synthCommand(\"synthCommand\")\n        .testCommands(List.of(\"testCommands\"))\n        .vpc(vpc)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const bucket: s3.Bucket;\ndeclare const buildImage: codebuild.IBuildImage;\ndeclare const buildSpec: codebuild.BuildSpec;\ndeclare const policyStatement: iam.PolicyStatement;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const value: any;\ndeclare const vpc: ec2.Vpc;\nconst standardYarnSynthOptions: pipelines.StandardYarnSynthOptions = {\n  cloudAssemblyArtifact: artifact,\n  sourceArtifact: artifact,\n\n  // the properties below are optional\n  actionName: 'actionName',\n  additionalArtifacts: [{\n    artifact: artifact,\n    directory: 'directory',\n  }],\n  buildCommand: 'buildCommand',\n  buildSpec: buildSpec,\n  copyEnvironmentVariables: ['copyEnvironmentVariables'],\n  environment: {\n    buildImage: buildImage,\n    certificate: {\n      bucket: bucket,\n      objectKey: 'objectKey',\n    },\n    computeType: codebuild.ComputeType.SMALL,\n    environmentVariables: {\n      environmentVariablesKey: {\n        value: value,\n\n        // the properties below are optional\n        type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      },\n    },\n    privileged: false,\n  },\n  environmentVariables: {\n    environmentVariablesKey: {\n      value: value,\n\n      // the properties below are optional\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n    },\n  },\n  installCommand: 'installCommand',\n  projectName: 'projectName',\n  rolePolicyStatements: [policyStatement],\n  subdirectory: 'subdirectory',\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  synthCommand: 'synthCommand',\n  testCommands: ['testCommands'],\n  vpc: vpc,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.StandardYarnSynthOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.BuildEnvironmentCertificate",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariable",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType",
        "@aws-cdk/aws-codebuild.BuildEnvironmentVariableType#PLAINTEXT",
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codebuild.ComputeType",
        "@aws-cdk/aws-codebuild.ComputeType#SMALL",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.SubnetSelection",
        "@aws-cdk/aws-ec2.SubnetType",
        "@aws-cdk/aws-ec2.SubnetType#ISOLATED",
        "@aws-cdk/aws-s3.IBucket",
        "@aws-cdk/pipelines.StandardYarnSynthOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as s3 from '@aws-cdk/aws-s3';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const bucket: s3.Bucket;\ndeclare const buildImage: codebuild.IBuildImage;\ndeclare const buildSpec: codebuild.BuildSpec;\ndeclare const policyStatement: iam.PolicyStatement;\ndeclare const subnet: ec2.Subnet;\ndeclare const subnetFilter: ec2.SubnetFilter;\ndeclare const value: any;\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst standardYarnSynthOptions: pipelines.StandardYarnSynthOptions = {\n  cloudAssemblyArtifact: artifact,\n  sourceArtifact: artifact,\n\n  // the properties below are optional\n  actionName: 'actionName',\n  additionalArtifacts: [{\n    artifact: artifact,\n    directory: 'directory',\n  }],\n  buildCommand: 'buildCommand',\n  buildSpec: buildSpec,\n  copyEnvironmentVariables: ['copyEnvironmentVariables'],\n  environment: {\n    buildImage: buildImage,\n    certificate: {\n      bucket: bucket,\n      objectKey: 'objectKey',\n    },\n    computeType: codebuild.ComputeType.SMALL,\n    environmentVariables: {\n      environmentVariablesKey: {\n        value: value,\n\n        // the properties below are optional\n        type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n      },\n    },\n    privileged: false,\n  },\n  environmentVariables: {\n    environmentVariablesKey: {\n      value: value,\n\n      // the properties below are optional\n      type: codebuild.BuildEnvironmentVariableType.PLAINTEXT,\n    },\n  },\n  installCommand: 'installCommand',\n  projectName: 'projectName',\n  rolePolicyStatements: [policyStatement],\n  subdirectory: 'subdirectory',\n  subnetSelection: {\n    availabilityZones: ['availabilityZones'],\n    onePerAz: false,\n    subnetFilters: [subnetFilter],\n    subnetGroupName: 'subnetGroupName',\n    subnetName: 'subnetName',\n    subnets: [subnet],\n    subnetType: ec2.SubnetType.ISOLATED,\n  },\n  synthCommand: 'synthCommand',\n  testCommands: ['testCommands'],\n  vpc: vpc,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 19,
        "75": 97,
        "91": 2,
        "125": 1,
        "130": 9,
        "153": 9,
        "169": 9,
        "192": 7,
        "193": 9,
        "194": 8,
        "225": 10,
        "242": 10,
        "243": 10,
        "254": 6,
        "255": 6,
        "256": 6,
        "281": 39,
        "290": 1
      },
      "fqnsFingerprint": "73fda1074f8ec752b33a9978a00c9086f29f22ee5eba74358c85b30e84969669"
    },
    "fb5fa8a29f3b82b03519c018abbe6601aeb71d540ba0eafbbb6b45ebb2214dae": {
      "translations": {
        "python": {
          "source": "# Step A will depend on step B and step B will depend on step C\nordered_steps = pipelines.Step.sequence([\n    pipelines.ManualApprovalStep(\"A\"),\n    pipelines.ManualApprovalStep(\"B\"),\n    pipelines.ManualApprovalStep(\"C\")\n])",
          "version": "2"
        },
        "csharp": {
          "source": "// Step A will depend on step B and step B will depend on step C\nStep[] orderedSteps = Step.Sequence(new [] {\n    new ManualApprovalStep(\"A\"),\n    new ManualApprovalStep(\"B\"),\n    new ManualApprovalStep(\"C\") });",
          "version": "1"
        },
        "java": {
          "source": "// Step A will depend on step B and step B will depend on step C\nStep[] orderedSteps = Step.sequence(List.of(\n    new ManualApprovalStep(\"A\"),\n    new ManualApprovalStep(\"B\"),\n    new ManualApprovalStep(\"C\")));",
          "version": "1"
        },
        "$": {
          "source": "// Step A will depend on step B and step B will depend on step C\nconst orderedSteps = pipelines.Step.sequence([\n  new pipelines.ManualApprovalStep('A'),\n  new pipelines.ManualApprovalStep('B'),\n  new pipelines.ManualApprovalStep('C'),\n]);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.Step"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.ManualApprovalStep",
        "@aws-cdk/pipelines.Step",
        "@aws-cdk/pipelines.Step#sequence"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n// Step A will depend on step B and step B will depend on step C\nconst orderedSteps = pipelines.Step.sequence([\n  new pipelines.ManualApprovalStep('A'),\n  new pipelines.ManualApprovalStep('B'),\n  new pipelines.ManualApprovalStep('C'),\n]);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "192": 1,
        "194": 5,
        "196": 1,
        "197": 3,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "095f3547b92a11c19e9438cd9c619d798fbfae3ed573218ac093a49da966fb3b"
    },
    "9ef4e1cd52a5bccb96828237918c4e5db55d1bd71738ca91488338977e44488e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.pipelines as pipelines\n\n# artifact: codepipeline.Artifact\n# build_spec: codebuild.BuildSpec\n# docker_credential: pipelines.DockerCredential\n\nupdate_pipeline_action = pipelines.UpdatePipelineAction(self, \"MyUpdatePipelineAction\",\n    cloud_assembly_input=artifact,\n    pipeline_stack_hierarchical_id=\"pipelineStackHierarchicalId\",\n\n    # the properties below are optional\n    build_spec=build_spec,\n    cdk_cli_version=\"cdkCliVersion\",\n    docker_credentials=[docker_credential],\n    pipeline_stack_name=\"pipelineStackName\",\n    privileged=False,\n    project_name=\"projectName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.Pipelines;\n\nArtifact artifact;\nBuildSpec buildSpec;\nDockerCredential dockerCredential;\n\nUpdatePipelineAction updatePipelineAction = new UpdatePipelineAction(this, \"MyUpdatePipelineAction\", new UpdatePipelineActionProps {\n    CloudAssemblyInput = artifact,\n    PipelineStackHierarchicalId = \"pipelineStackHierarchicalId\",\n\n    // the properties below are optional\n    BuildSpec = buildSpec,\n    CdkCliVersion = \"cdkCliVersion\",\n    DockerCredentials = new [] { dockerCredential },\n    PipelineStackName = \"pipelineStackName\",\n    Privileged = false,\n    ProjectName = \"projectName\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.pipelines.*;\n\nArtifact artifact;\nBuildSpec buildSpec;\nDockerCredential dockerCredential;\n\nUpdatePipelineAction updatePipelineAction = UpdatePipelineAction.Builder.create(this, \"MyUpdatePipelineAction\")\n        .cloudAssemblyInput(artifact)\n        .pipelineStackHierarchicalId(\"pipelineStackHierarchicalId\")\n\n        // the properties below are optional\n        .buildSpec(buildSpec)\n        .cdkCliVersion(\"cdkCliVersion\")\n        .dockerCredentials(List.of(dockerCredential))\n        .pipelineStackName(\"pipelineStackName\")\n        .privileged(false)\n        .projectName(\"projectName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const buildSpec: codebuild.BuildSpec;\ndeclare const dockerCredential: pipelines.DockerCredential;\nconst updatePipelineAction = new pipelines.UpdatePipelineAction(this, 'MyUpdatePipelineAction', {\n  cloudAssemblyInput: artifact,\n  pipelineStackHierarchicalId: 'pipelineStackHierarchicalId',\n\n  // the properties below are optional\n  buildSpec: buildSpec,\n  cdkCliVersion: 'cdkCliVersion',\n  dockerCredentials: [dockerCredential],\n  pipelineStackName: 'pipelineStackName',\n  privileged: false,\n  projectName: 'projectName',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.UpdatePipelineAction"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/pipelines.UpdatePipelineAction",
        "@aws-cdk/pipelines.UpdatePipelineActionProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const buildSpec: codebuild.BuildSpec;\ndeclare const dockerCredential: pipelines.DockerCredential;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst updatePipelineAction = new pipelines.UpdatePipelineAction(this, 'MyUpdatePipelineAction', {\n  cloudAssemblyInput: artifact,\n  pipelineStackHierarchicalId: 'pipelineStackHierarchicalId',\n\n  // the properties below are optional\n  buildSpec: buildSpec,\n  cdkCliVersion: 'cdkCliVersion',\n  dockerCredentials: [dockerCredential],\n  pipelineStackName: 'pipelineStackName',\n  privileged: false,\n  projectName: 'projectName',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 8,
        "75": 26,
        "91": 1,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "112f8994784ebcd20d721b87ce95ec37db7afadae6b01fe23ed3ee25cd1ccca0"
    },
    "229e7bea465eae4ebdbe822cef457611a07b76a36c149eccf21f65c5fe286c7e": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_codebuild as codebuild\nimport aws_cdk.aws_codepipeline as codepipeline\nimport aws_cdk.pipelines as pipelines\n\n# artifact: codepipeline.Artifact\n# build_spec: codebuild.BuildSpec\n# docker_credential: pipelines.DockerCredential\n\nupdate_pipeline_action_props = pipelines.UpdatePipelineActionProps(\n    cloud_assembly_input=artifact,\n    pipeline_stack_hierarchical_id=\"pipelineStackHierarchicalId\",\n\n    # the properties below are optional\n    build_spec=build_spec,\n    cdk_cli_version=\"cdkCliVersion\",\n    docker_credentials=[docker_credential],\n    pipeline_stack_name=\"pipelineStackName\",\n    privileged=False,\n    project_name=\"projectName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.CodeBuild;\nusing Amazon.CDK.AWS.CodePipeline;\nusing Amazon.CDK.Pipelines;\n\nArtifact artifact;\nBuildSpec buildSpec;\nDockerCredential dockerCredential;\n\nUpdatePipelineActionProps updatePipelineActionProps = new UpdatePipelineActionProps {\n    CloudAssemblyInput = artifact,\n    PipelineStackHierarchicalId = \"pipelineStackHierarchicalId\",\n\n    // the properties below are optional\n    BuildSpec = buildSpec,\n    CdkCliVersion = \"cdkCliVersion\",\n    DockerCredentials = new [] { dockerCredential },\n    PipelineStackName = \"pipelineStackName\",\n    Privileged = false,\n    ProjectName = \"projectName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.codebuild.*;\nimport software.amazon.awscdk.services.codepipeline.*;\nimport software.amazon.awscdk.pipelines.*;\n\nArtifact artifact;\nBuildSpec buildSpec;\nDockerCredential dockerCredential;\n\nUpdatePipelineActionProps updatePipelineActionProps = UpdatePipelineActionProps.builder()\n        .cloudAssemblyInput(artifact)\n        .pipelineStackHierarchicalId(\"pipelineStackHierarchicalId\")\n\n        // the properties below are optional\n        .buildSpec(buildSpec)\n        .cdkCliVersion(\"cdkCliVersion\")\n        .dockerCredentials(List.of(dockerCredential))\n        .pipelineStackName(\"pipelineStackName\")\n        .privileged(false)\n        .projectName(\"projectName\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const buildSpec: codebuild.BuildSpec;\ndeclare const dockerCredential: pipelines.DockerCredential;\nconst updatePipelineActionProps: pipelines.UpdatePipelineActionProps = {\n  cloudAssemblyInput: artifact,\n  pipelineStackHierarchicalId: 'pipelineStackHierarchicalId',\n\n  // the properties below are optional\n  buildSpec: buildSpec,\n  cdkCliVersion: 'cdkCliVersion',\n  dockerCredentials: [dockerCredential],\n  pipelineStackName: 'pipelineStackName',\n  privileged: false,\n  projectName: 'projectName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.UpdatePipelineActionProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildSpec",
        "@aws-cdk/aws-codepipeline.Artifact",
        "@aws-cdk/pipelines.UpdatePipelineActionProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as codebuild from '@aws-cdk/aws-codebuild';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const artifact: codepipeline.Artifact;\ndeclare const buildSpec: codebuild.BuildSpec;\ndeclare const dockerCredential: pipelines.DockerCredential;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst updatePipelineActionProps: pipelines.UpdatePipelineActionProps = {\n  cloudAssemblyInput: artifact,\n  pipelineStackHierarchicalId: 'pipelineStackHierarchicalId',\n\n  // the properties below are optional\n  buildSpec: buildSpec,\n  cdkCliVersion: 'cdkCliVersion',\n  dockerCredentials: [dockerCredential],\n  pipelineStackName: 'pipelineStackName',\n  privileged: false,\n  projectName: 'projectName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 7,
        "75": 26,
        "91": 1,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 1,
        "193": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 3,
        "255": 3,
        "256": 3,
        "281": 8,
        "290": 1
      },
      "fqnsFingerprint": "0ac4cab388a79b0137f51f518df2d3b6c67e88e6f512ed1a91549856b3094835"
    },
    "f6a12fccb4930d62f6ffe54a4d07b87d40e0c5968d9b6d1603066cbec058ece3": {
      "translations": {
        "python": {
          "source": "# pipeline: pipelines.CodePipeline\n\neurope_wave = pipeline.add_wave(\"Europe\")\neurope_wave.add_stage(MyApplicationStage(self, \"Ireland\",\n    env=cdk.Environment(region=\"eu-west-1\")\n))\neurope_wave.add_stage(MyApplicationStage(self, \"Germany\",\n    env=cdk.Environment(region=\"eu-central-1\")\n))",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline;\n\nWave europeWave = pipeline.AddWave(\"Europe\");\neuropeWave.AddStage(new MyApplicationStage(this, \"Ireland\", new StageProps {\n    Env = new Environment { Region = \"eu-west-1\" }\n}));\neuropeWave.AddStage(new MyApplicationStage(this, \"Germany\", new StageProps {\n    Env = new Environment { Region = \"eu-central-1\" }\n}));",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline;\n\nWave europeWave = pipeline.addWave(\"Europe\");\neuropeWave.addStage(MyApplicationStage.Builder.create(this, \"Ireland\")\n        .env(Environment.builder().region(\"eu-west-1\").build())\n        .build());\neuropeWave.addStage(MyApplicationStage.Builder.create(this, \"Germany\")\n        .env(Environment.builder().region(\"eu-central-1\").build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const pipeline: pipelines.CodePipeline;\nconst europeWave = pipeline.addWave('Europe');\neuropeWave.addStage(new MyApplicationStage(this, 'Ireland', {\n  env: { region: 'eu-west-1' }\n}));\neuropeWave.addStage(new MyApplicationStage(this, 'Germany', {\n  env: { region: 'eu-central-1' }\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.Wave"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/core.Environment",
        "@aws-cdk/core.Stage",
        "@aws-cdk/core.StageProps",
        "@aws-cdk/pipelines.PipelineBase#addWave",
        "@aws-cdk/pipelines.Wave",
        "@aws-cdk/pipelines.Wave#addStage",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const pipeline: pipelines.CodePipeline;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst europeWave = pipeline.addWave('Europe');\neuropeWave.addStage(new MyApplicationStage(this, 'Ireland', {\n  env: { region: 'eu-west-1' }\n}));\neuropeWave.addStage(new MyApplicationStage(this, 'Germany', {\n  env: { region: 'eu-central-1' }\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 16,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 3,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "7c1328c90763eb82ab741fff763db8d3cecc0fd8ddfee72a32831a3b68ddc5f1"
    },
    "f705250f8d8a245768c5ab95ed00849a33014ef0ad034ed420af44d398400cce": {
      "translations": {
        "python": {
          "source": "pipeline = pipelines.CodePipeline(self, \"Pipeline\",\n    synth=pipelines.ShellStep(\"Synth\",\n        input=pipelines.CodePipelineSource.connection(\"my-org/my-app\", \"main\",\n            connection_arn=\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        ),\n        commands=[\"npm ci\", \"npm run build\", \"npx cdk synth\"]\n    ),\n\n    # Turn this on because the pipeline uses Docker image assets\n    docker_enabled_for_self_mutation=True\n)\n\npipeline.add_wave(\"MyWave\",\n    post=[\n        pipelines.CodeBuildStep(\"RunApproval\",\n            commands=[\"command-from-image\"],\n            build_environment=codebuild.BuildEnvironment(\n                # The user of a Docker image asset in the pipeline requires turning on\n                # 'dockerEnabledForSelfMutation'.\n                build_image=codebuild.LinuxBuildImage.from_asset(self, \"Image\",\n                    directory=\"./docker-image\"\n                )\n            )\n        )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "CodePipeline pipeline = new CodePipeline(this, \"Pipeline\", new CodePipelineProps {\n    Synth = new ShellStep(\"Synth\", new ShellStepProps {\n        Input = CodePipelineSource.Connection(\"my-org/my-app\", \"main\", new ConnectionSourceOptions {\n            ConnectionArn = \"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\"\n        }),\n        Commands = new [] { \"npm ci\", \"npm run build\", \"npx cdk synth\" }\n    }),\n\n    // Turn this on because the pipeline uses Docker image assets\n    DockerEnabledForSelfMutation = true\n});\n\npipeline.AddWave(\"MyWave\", new WaveOptions {\n    Post = new [] {\n        new CodeBuildStep(\"RunApproval\", new CodeBuildStepProps {\n            Commands = new [] { \"command-from-image\" },\n            BuildEnvironment = new BuildEnvironment {\n                // The user of a Docker image asset in the pipeline requires turning on\n                // 'dockerEnabledForSelfMutation'.\n                BuildImage = LinuxBuildImage.FromAsset(this, \"Image\", new DockerImageAssetProps {\n                    Directory = \"./docker-image\"\n                })\n            }\n        }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "CodePipeline pipeline = CodePipeline.Builder.create(this, \"Pipeline\")\n        .synth(ShellStep.Builder.create(\"Synth\")\n                .input(CodePipelineSource.connection(\"my-org/my-app\", \"main\", ConnectionSourceOptions.builder()\n                        .connectionArn(\"arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41\")\n                        .build()))\n                .commands(List.of(\"npm ci\", \"npm run build\", \"npx cdk synth\"))\n                .build())\n\n        // Turn this on because the pipeline uses Docker image assets\n        .dockerEnabledForSelfMutation(true)\n        .build();\n\npipeline.addWave(\"MyWave\", WaveOptions.builder()\n        .post(List.of(\n            CodeBuildStep.Builder.create(\"RunApproval\")\n                    .commands(List.of(\"command-from-image\"))\n                    .buildEnvironment(BuildEnvironment.builder()\n                            // The user of a Docker image asset in the pipeline requires turning on\n                            // 'dockerEnabledForSelfMutation'.\n                            .buildImage(LinuxBuildImage.fromAsset(this, \"Image\", DockerImageAssetProps.builder()\n                                    .directory(\"./docker-image\")\n                                    .build()))\n                            .build())\n                    .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: ['npm ci','npm run build','npx cdk synth'],\n  }),\n\n  // Turn this on because the pipeline uses Docker image assets\n  dockerEnabledForSelfMutation: true,\n});\n\npipeline.addWave('MyWave', {\n  post: [\n    new pipelines.CodeBuildStep('RunApproval', {\n      commands: ['command-from-image'],\n      buildEnvironment: {\n        // The user of a Docker image asset in the pipeline requires turning on\n        // 'dockerEnabledForSelfMutation'.\n        buildImage: codebuild.LinuxBuildImage.fromAsset(this, 'Image', {\n          directory: './docker-image',\n        }),\n      },\n    }),\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.WaveOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-codebuild.BuildEnvironment",
        "@aws-cdk/aws-codebuild.IBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage",
        "@aws-cdk/aws-codebuild.LinuxBuildImage#fromAsset",
        "@aws-cdk/aws-ecr-assets.DockerImageAssetProps",
        "@aws-cdk/pipelines.CodeBuildStep",
        "@aws-cdk/pipelines.CodeBuildStepProps",
        "@aws-cdk/pipelines.CodePipeline",
        "@aws-cdk/pipelines.CodePipelineProps",
        "@aws-cdk/pipelines.CodePipelineSource",
        "@aws-cdk/pipelines.CodePipelineSource#connection",
        "@aws-cdk/pipelines.ConnectionSourceOptions",
        "@aws-cdk/pipelines.IFileSetProducer",
        "@aws-cdk/pipelines.PipelineBase#addWave",
        "@aws-cdk/pipelines.ShellStep",
        "@aws-cdk/pipelines.ShellStepProps",
        "@aws-cdk/pipelines.WaveOptions",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { CfnOutput, Duration, Stage, Stack, StackProps, StageProps } from '@aws-cdk/core';\nimport cdk = require('@aws-cdk/core');\nimport codepipeline = require('@aws-cdk/aws-codepipeline');\nimport cpactions = require('@aws-cdk/aws-codepipeline-actions');\nimport codebuild = require('@aws-cdk/aws-codebuild');\nimport codecommit = require('@aws-cdk/aws-codecommit');\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport ecr = require('@aws-cdk/aws-ecr');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\nimport pipelines = require('@aws-cdk/pipelines');\nimport secretsmanager = require('@aws-cdk/aws-secretsmanager');\nimport sns = require('@aws-cdk/aws-sns');\nimport subscriptions = require('@aws-cdk/aws-sns-subscriptions');\nimport s3 = require('@aws-cdk/aws-s3');\n\nclass MyApplicationStage extends Stage {\n  constructor(scope: Construct, id: string, props?: StageProps) {\n    super(scope, id, props);\n  }\n}\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst pipeline = new pipelines.CodePipeline(this, 'Pipeline', {\n  synth: new pipelines.ShellStep('Synth', {\n    input: pipelines.CodePipelineSource.connection('my-org/my-app', 'main', {\n      connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console * });',\n    }),\n    commands: ['npm ci','npm run build','npx cdk synth'],\n  }),\n\n  // Turn this on because the pipeline uses Docker image assets\n  dockerEnabledForSelfMutation: true,\n});\n\npipeline.addWave('MyWave', {\n  post: [\n    new pipelines.CodeBuildStep('RunApproval', {\n      commands: ['command-from-image'],\n      buildEnvironment: {\n        // The user of a Docker image asset in the pipeline requires turning on\n        // 'dockerEnabledForSelfMutation'.\n        buildImage: codebuild.LinuxBuildImage.fromAsset(this, 'Image', {\n          directory: './docker-image',\n        }),\n      },\n    }),\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 13,
        "75": 25,
        "104": 2,
        "106": 1,
        "192": 3,
        "193": 7,
        "194": 8,
        "196": 3,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 10
      },
      "fqnsFingerprint": "1dca25e6bf638f81fe2313afc3cf97679d46d14bf6c704f6494f25992863e05a"
    },
    "bfb41c68cad0f5671246c420f5447faf7fe23ff711c49bd8a3653eb2a3eb485c": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.pipelines as pipelines\n\n# step: pipelines.Step\n\nwave_props = pipelines.WaveProps(\n    post=[step],\n    pre=[step]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.Pipelines;\n\nStep step;\n\nWaveProps waveProps = new WaveProps {\n    Post = new [] { step },\n    Pre = new [] { step }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.pipelines.*;\n\nStep step;\n\nWaveProps waveProps = WaveProps.builder()\n        .post(List.of(step))\n        .pre(List.of(step))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const step: pipelines.Step;\nconst waveProps: pipelines.WaveProps = {\n  post: [step],\n  pre: [step],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/pipelines.WaveProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/pipelines.WaveProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as pipelines from '@aws-cdk/pipelines';\n\ndeclare const step: pipelines.Step;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst waveProps: pipelines.WaveProps = {\n  post: [step],\n  pre: [step],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 11,
        "130": 1,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a2c6532f2522929c7bd79941ce41537a9255c9913c7ddc58ddef7db844c636f9"
    }
  }
}
